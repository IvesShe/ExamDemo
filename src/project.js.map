{"version":3,"sources":["assets/subgame/brnn/script/BRNNGame/brnnAnimate.ts","assets/subgame/brnn/script/brnnutils/brnnAppstart.ts","assets/subgame/brnn/script/brnnutils/brnnAudioTool.ts","assets/subgame/brnn/script/brnnutils/brnnButtonSclear.ts","assets/subgame/brnn/script/brnnutils/brnnConfiguration.ts","assets/subgame/brnn/script/BRNNGame/brnnGameScene.ts","assets/subgame/brnn/script/BRNNGame/brnnGameView.ts","assets/subgame/brnn/script/brnnutils/brnnGlobal.ts","assets/subgame/brnn/script/brnnutils/brnnMessageBox.ts","assets/subgame/brnn/script/brnnutils/brnnUtils.ts","assets/subgame/brnn/script/brnnnet/brnn_client.ts","assets/subgame/brnn/script/brnntools/brnn_config.ts","assets/subgame/brnn/script/brnntools/brnn_event.ts","assets/subgame/brnn/script/brnnproto/brnn_proto_msg.js","assets/subgame/brnn/script/brnnproto/brnn_protobuf.js","assets/subgame/brnn/script/brnnutils/brnncreatePoke.ts","assets/subgame/brnn/language/brnnlanguage.ts","assets/subgame/brnn/script/BRNNGame/brnnscene.ts","assets/subgame/brnn/script/BRNNGame/promptbox.ts"],"names":["brnnConfiguration_1","require","brnnAudioTool_1","brnncreatePoke_1","brnn_proto_msg_1","brnnAnimate","this","allchip_arr","correspond_chips_arr","lastPlayerHead","chippos","nodeleng","timer1","timer2","timer3","lose_area_num","win_area","chipCount","isCompleteFlyChip","isfilck","endDushenStarX","getInstance","instance","prototype","HeadAnim","head","headpos","index","_this","cc","isValid","stopAllActions","s1","moveTo","v2","x","y","s2","seq","sequence","call","callFunc","sender","position","spew","runAction","points_chip_move","betNum","headPos","area","quantity","itemarr","areanum","num","count","Math","floor","i","showCoins","item","chilp","instantiate","addChild","push","mpos","tos","parent","convertToWorldSpaceAR","convertToNodeSpaceAR","xx","configuration","random","yy","jumpBy","name","console","log","chipback","win","length","ceil","arr","chunk","audiotool","play_audioSource","LoadAudio","a","postion","ac","destroy","Chipset","data","quan_Arr","fun","award","isWin","awardArea","msg","EnumArea","Banker","bankerTongChi","bankerTongPei","fiyBanker","j","bpos","m","area_num","setTimeout","clearTimeout","fiyWinPos","bankerToTable","k","_loop_1","_loop_2","r_num","state_1","directCardValue","car_node","isdisplay","r","poke0","getChildByName","poke1","poke2","poke3","poke4","active","getPosition","timer","playCardFly","c","d","pos","_loop_3","value","p","setPosition","add","call_Audio","delayTime","spawn","fadeIn","state_2","flipCard0","_loop_4","state_3","flipCard1","votgold","_loop_5","children","createpoke","createCardType2","cardType","awardAreaOdds","state_4","showWaiting","n","d0","d1","d2","action1_show","fadeTo","action1_hide","action2_show","action2_hide","action3_show","action3_hide","callBack1","callBack2","callBack3","WinPlayerlight","winlose_g","offsetMe","win_light","playAnim","Floatword","lab_gold_pos","lab_win","lab_lose","winlose","offsetBanker","w_pos","w","l","w_g","l_g","gold_count","removeDecimalpoint","lab_worl","opacity","getComponent","Label","string","eatandpay","w_num","l_num","blink","repeat","createStarMoveAction","t","startPoint","endPoint","height","angle","radian","q1x","q1","cos","q2x","q2","bezierTo","easing","easeInOut","godStarMoveAction","starFlashFabNode","currentBettingTableNode","callback","moveTime","starStartPoint","endDushenStarY","exports","brnnanimate","_a","_decorator","ccclass","brnnAppstart","property","_super","__extends","onLoad","loadSoundsRes","node","onDestroy","__decorate","Component","default","AudioTool","Volume","Mute","_audios","AudioTool_1","tempnode","thda","loader","loadResDir","AudioClip","err","clips","judgmentsfcz","audioSource","addComponent","AudioSource","clip","str","volume_udioSource","volume","volume_iudioSource","bol","audio","mute","strname","findid","getState","play","stop_audioSource","stop","pause_audioSource","pause","resume_audioSource","resume","rewind_audioSource","rewind","Removeaudios","brnnButtonSclear","apply","arguments","pressedScale","transDuration","initScale","scaleDownAction","scaleUpAction","scale","scaleTo","onTouchUp","event","on","start","tooltip","brnnConfiguration","UserInfo","id","seat","gold","headurl","ListHistory","OutListHistory","ListResult","roomType","EnterRoom","isok","room_id","JoinRoomR","time","banker_before","lgold","ugold","banker","bet_list","mybet_list","myprebet_list","pre_loterry","player_list","result","bet_result","real_bet_result","source","type","time_gameState","jishiqi","robotCount","PlayerInfo","obj","PrePokerList","banker_list","is_in_list","ChangeBanker","is_auto","pre_banker","StoreLottery","continue","initUserInfo","xdata","balance","userId","initListHistory","outInitListHistory","JSON","parse","initListResult","initEnterRoom","mdata","initJoinRoomR","robot_num","setInterval","clearInterval","initOtherPlayerInfo","initPrePokerList","initStoreLottery","initChangeBanker","spin","anim_name","isloop","sp","Skeleton","clearTracks","addAnimation","determineIsInteger","number","Number","isInteger","toString","removeAfterInteger","parseFloat","roundFun","round","pow","floorFun","toFixed","includes","substring","indexOf","displaytwodecimalplaces","number1","split","Conversion","replace","loadSpriteFrame","url","spr","Sprite","loadRes","SpriteFrame","spriteFrame","loadSpriteAtlasFrame","atlasurl","SpriteAtlas","atlas","spm","getSpriteFrame","loadNetworkSpriteFrame","imgtype","spr_1","load","img","lower","upper","ret","forEach","brnnUtils_1","brnn_event_1","brnnAnimate_1","brnnGlobal_1","brnn_client_1","brnnlanguage_1","brnnGameScene","chip","winlost","sz_item","pokerAtlas","perlist","sz_no","streamer","Winpanl","Losepanl","prepoker","grp_chip_btn","tips","Messeagebox","myhead","bankerHead","btn_back","btn_trend","btn_help","btn_shouqi","btn_sz","btn_qx","btn_xz","btn_continvot","xutou_numbg","vot_num","Grp_cz","rulepanl","ratePanl","winlos_node","toggle","lab_winrate0","lab_winrate1","lab_winrate2","lab_winrate3","SzPanl","p_btn_clear","btn_applysz","btn_applyxz","btn_cancelapply","GameLayer","rare_scrollw","biao_mid1","biao_mid2","roomtype","spin_kaishi","spin_tingzhi","wl_start_stop_anim","spin_watch","tipstate_qxz","tipstate_qdd","_state","_timer_lab_qxz","_timer_lab_qdd","pre_xiala","perPokeScrollow","prepoker_num","sz_inputEditBox","starparPos","waitsp","wachtip","Promptbox","beichang","banker_tip","jiazaiAnim","roomTypeBet","initHeadPos","playerHead","orginPlayerCardPos","cardpoke","carrd_node","win_gold","winlose_gold_pos","lose_gold","quanti","twink","tableNum","p_coin","vot","di_bg","xinxin","myw_gold_lab","myl_gold_lab","isprepoker","df_sc_y","my_sz_gold","initRateContentPos","isSwitchScreen","region","mytotalvot","votgold1","eachtypevotcount","eachtypevot","sumbetarea","iscontinue","ischecked","now_isbet","isApplySz","iscancel","isApplyxz","isclickBtn_back","isclicki_Btn_enter","isSettle","isCheckAfter","s_timer0","s_timer1","s_timer2","s_timer3","s_timer4","s_timer5","s_timer6","s_timer7","s_timer8","s_timer11","s_timer12","reconnected","playbetAudioMax","playbetAudioCount","chipRecordIndex","isclickxt","roomstate","isone","ske_kaishi","ske_watch","zb_callback","xz_callback","winplayer","allwinratearr","init","find","brnnlanguage","getCurLanguage","judgeSzCondition","star","my_w_gold","my_l_gold","quantity_","filck","vot_lab","total_chip_num","di_bg__","interactable","win_lab","lose_lab","winSize","width","cardPos","card","pukeNode","initSzList","getInitWinRate","initdata","cover","updatePreBankList","addBankerInfo","addPlayerInfo","addOrdinaryEventListener","addInterEventListener","websocket","setCurSceneRootNode","brnnutils","setMessageBoxPrefab","whetherPlayAudio","gameProcess","DiffentChipArea","game","EVENT_HIDE","gameHideBackgroundAction","bind","EVENT_SHOW","gameShowAction","scheduleOnce","tempWidget","Widget","alignMode","AlignMode","ON_WINDOW_RESIZE","Button","unscheduleAllCallbacks","removeInterEventListener","removeDelayTimer","restCradChip","closeWebsock","reConnect","onGenZhuClick","events","register","EventKind","S2C_PreBanker","prePokerErr","S2C_PreBankerList","prePokerList","S2C_OpenLoterry","LotteryResult","S2C_ShowPlayerList","storageT_p","S2C_ExitPreBanker","cancalApply","S2C_mbankerChange","storageCb","S2C_SzModifgold","changeMyGold","S2C_playerExitRoom","isOutroom","S2C_ServerconnectClose","serverClose","S2CEnterRoom","renewJionRoom","S2C_RenewPlayerList","S2C_RenewpreBankerList","S2C_Self","reEnterRoom","S2C_GameStart","S2C_GameStartBet","S2C_GameAward","touchChooseChip","customIndex","JudgeChipValue","brnnglobal","isxz","currentChipNode","lastChipNode","substr","VotIndex","target","parseInt","amount","dispatch","C2S_PlayerBet","enoughgold","errTipPrefab","getTextByID","onBtnClicked","total","mytotal","isxt","_i","_b","_c","bet_type","betnum","msg_1","stringify","C2S_Voting","onclick","targetname","bankerid","isChangbanker","hasme","Array","bankListIndex","showMessageBox","msg_2","director","preloadScene","isHallBtnClicked","C2S_playerExitRoom","lupan_bg","lupan_bgWidget","scaleY","roomname","mygold","content","EditBox","maxnum","msg_3","C2S_PreBanker","msg_4","C2S_mbankerChange","msg_5","C2S_ExitPreBanker","tipStr","sz_noenought_tip","tip_lab","initPrompt","judgeIsPlay","wicthingAnim","JudgeGametype","PreparPhaseDisplay","startCountDown0","BetStageDisplay","roomBeiNum","votCount","StartBetAnim","initBetRegionPos","childrenCount","removeAllChildren","JudgeContinuedVot","SettlementStageDisplay","displayChipCardValue","updateSettleInfo","setCardValue","createCardType","TableflickerAnim","recordWinner","Updategold","addW_LPanl","myPlayerWLGold","bankerChange","pre_bank_id","my_gold","banker_img","getPlayerImg","StopBetAnim","starParticle","_seat","p_star","uilar","removeChild","timer_node","unschedule","schedule","macro","REPEAT_FOREVER","startCountDown1","PlayerBet2","userBetReq","isRoundBeenBet","updaePlayerNowGoldandTableNum","OtherPlayerBet2","isself","allowGold","totalgold","o","saveVotData","needbreak","addWinRate","beyondWlrate","restGame","createPoker","u_gold_count","win_panl","settleMentWin","lose_panl","settleMentLose","ScrollView","wlitem","Layout","updateLayout","getRate","splice","lastListDisPlay","childCont","ContinuVot","currentScene","getScene","isroomExit","loadScene","headImg","gold_lab","my_Img","my_id","isbankerchange","img_num","history","update","dt","w_panl","l_panl","removeOrdinaryEventListener","off","unregister","S2C_PlayerBet","S2C_Voting","S2C_RenewEnter","audioEngine","stopAll","isLottery","C2S_EnterRoom","readyTimer","Prefab","Node","rankTemp","Class","properties","nickName","thirdAvatarID","location","division","challengeCoin","brnnGameView","onlinePanl","err_item","btn_sound","btn_mute","bot_layer","bet_region","card_node","addonlin_node","rulePanl","FloatWordlayer","tipbg","online_panl","head_player_8","updateBetRegionPos","designResolutionW","designResolutionH","rankTemps","aArray","BGState","resize","S2C_OnlineP","addOnlineList","S2C_History","roomInfo","S2C_Err","getErrMsg","C2S_OnlineP","touchSoundMuteBtn","isSoundOpen","removeFromParent","onLinePlayerList","resultCode","err_tip","brnnGlobal","isBet","roomid","brnnMessageBox","ButtonOK","ButtonCancel","ButtonClose","fnCallbackOK","fnCallbackCancel","messageLabel","FrameBox","MaskLayer","messagenode","close","isOK","isCancel","isClose","onClickCancel","onClickOK","customEventData","brnnUtils","MessageBoxPrefab","addClickEvent","component","handler","eventHandler","EventHandler","clickEvents","prefab","messagebox_1","msgboxscript","Client","io","undefined","mapHandler","Map","ReConnectCount","curRootNode","SubCommand","EnumSubHeartBeatReq","HeartBeatReq","EnumSubHeartBeatResp","HeartBeatResp","EnumSubLoginReq","LoginReq","EnumSubLoginResp","LoginResp","EnumSubUserBetReq","UserBetReq","EnumSubUserBetResp","UserBetResp","EnumSubGameStart","GameStart","EnumSubGameStartBet","GameStartBet","EnumSubGameAward","GameAward","BetRequest","Client_1","_instance","initSocket","registerCallBack","kind","func","stopPing","onopen","onerror","onclose","onmessage","ServerURL","sys","platform","ANDROID","os","OS_ANDROID","WebSocket","raw","binaryType","evt","startPing","LoginTest","onReceiveMessageEvent","parseProtoBufId","Uint8ArrayToInt","uint8Ary","retInt","buffer","arrayBuffer","dataUnit8Array","Uint8Array","slice","distrubuteMsg","bodyClass","gameMsg","decode","Recive","warn","p_id","p_data","isQueue","trycount","ResultCode","Success","sendMessage","create","reconnect","tryConnect","readyState","OPEN","message","encode","finish","addTagBuffer","protoBufAddTag","send","tag","bufferAddTag","tagBinary","IntToUint8Array","tagUnit8","set","subarray","bits","resArry","xresArry","binaryStr_1","chr","unshift","resArryStr","join","app","Version","IconPath","GameKind","UserID","Password","GameID","postMsg","CLIENT_LOAD","CLIENT_ENTER","CLIENT_DONE","CLIENT_RETURN","CLIENT_PROGRESS","audios","BACKGROUND","NEW_RED_PACK","EFFECT_DRUM","EFFECT_CLICK","EFFECT_BOOM","EFFECT_OPEN","EventManage","_mapHandler","EventManage_1","className","funcs","get","has","delete","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","valuesById","values","Object","keys","writer","encodeDelimited","ldelim","reader","end","len","uint32","skipType","decodeDelimited","verify","_typeof","fromObject","object","toObject","toJSON","constructor","toJSONOptions","hasOwnProperty","int32","options","defaults","enums","String","double","fork","error","TypeError","json","isFinite","roundId","emptyArray","AwardDetail","isArray","arrays","cards","bool","Boolean","EnumCardType","EnumGameStatus","module","modules","cache","entries","protobuf","$require","$module","global","define","amd","Long","isLong","configure","1","fn","ctx","params","offset","pending","Promise","resolve","reject","2","base64","charAt","b64","s64","parts","b","fromCharCode","charCodeAt","Error","test","3","EventEmitter","_listeners","listeners","emit","args","4","factory","Float32Array","f32","f8b","le","writeFloat_f32_cpy","val","buf","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","exponent","LN2","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","5","inquire","moduleName","mod","eval","e","6","alloc","size","SIZE","MAX","slab","7","utf8","read","write","c1","c2","8","_configure","BufferWriter","BufferReader","build","rpc","10","11","12","15","16","17","9","LongBits","indexOutOfRange","writeLength","RangeError","create_array","Buffer","isBuffer","readLongVarint","readFixed32_end","readFixed64","_slice","sint32","fixed32","sfixed32","float","bytes","skip","wireType","BufferReader_","merge","int64","uint64","sint64","zzDecode","fixed64","sfixed64","utf8Slice","min","Service","13","rpcImpl","requestDelimited","responseDelimited","rpcCall","method","requestCtor","responseCtor","request","self","asPromise","response","endedByRPC","14","zero","toNumber","zzEncode","zeroHash","fromNumber","from","isString","fromString","low","high","unsigned","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","src","ifNotSet","newError","CustomError","defineProperty","captureStackTrace","stack","pool","window","freeze","emptyObject","isNode","process","versions","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","fromBits","lcFirst","toLowerCase","ProtocolError","oneOfGetter","fieldNames","fieldMap","oneOfSetter","longs","encoding","allocUnsafe","Op","next","noop","State","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength","brnncreatePoke","card_bg","back","pokenum","color_0","color_1","scaleX","pokevalue","smallHua","large_Hua","huase","niu","datatype","cheng","niu_bet","cardTypeBet","W_gold_lab","l_gold_lab","chiptype","mybetNum","language","Chinese","0","18","19","20","21","22","23","24","25","26","27","28","29","30","31","brnnscene","promptbox","action","action2"],"mappings":"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","sourcesContent":["/*\n * @Author: your name\n * @Date: 2019-10-11 08:28:24\n * @LastEditTime : 2019-12-23 18:08:32\n * @LastEditors  : Please set LastEditors\n * @Description: In User Settings Edit\n * @FilePath: \\allGame\\assets\\subgame\\brnn\\script\\BRNNGame\\brnnAnimate.ts\n */\nimport { configuration } from \"../brnnutils/brnnConfiguration\";\nimport { audiotool } from \"../brnnutils/brnnAudioTool\";\nimport { createpoke } from \"../brnnutils/brnncreatePoke\";\nimport {msg} from '../brnnproto/brnn_proto_msg';\n\nclass brnnAnimate {\n\n    public allchip_arr: any[] = [];//存储所有创建的筹码\n    public correspond_chips_arr = [[], [], [], []];//存储每个筹码区域创建的筹码\n    private lastPlayerHead: any = null; //上一次抖动的玩家头像\n    private chippos: any[] = [];\n    private nodeleng: number = 3;//扑克大节点的个数\n\n    protected static instance: brnnAnimate;\n    public static getInstance(): brnnAnimate {\n        if (!this.instance) {\n            this.instance = new brnnAnimate();\n        }\n        return this.instance;\n    }\n    /**\n  * 头像抖动\n  * @param head 玩家头像\n  * @param pos 头像的位置\n  * @param index 座位号\n  */\n    public HeadAnim(head: cc.Node, headpos: any, index: number) {\n        if( cc.isValid( head ))\n        {\n            head.stopAllActions();\n            if (index > 1 && index < 5) {\n                var s1 = cc.moveTo(0.05, cc.v2(headpos.x + 39, headpos.y));\n            } else {\n                var s1 = cc.moveTo(0.05, cc.v2(headpos.x - 39, headpos.y));\n            }\n            var s2 = cc.moveTo(0.1, headpos);\n            var seq = cc.sequence([s1, s2]);\n            let call = cc.callFunc((sender) => {\n                if( cc.isValid( sender ) )\n                {\n                    sender.stopAllActions();\n                    sender.position = headpos;\n                    this.lastPlayerHead = sender;\n                }\n\n            })\n            let spew = cc.sequence(seq, call);\n            head.runAction(spew);\n        }\n    }\n\n\n    /**\n        * 分筹码行动\n        * 下注筹码移动\n        * @param betNum 筹码总额\n        * @param headPos 玩家头像\n        * @param area 筹码层\n        * @param quantity 下注区域  \n        * @param itemarr[] 需要创建的筹码\n        * @param areanum 下注区域序号\n        */\n    points_chip_move(betNum: number, headPos, area, quantity, itemarr: any, areanum: number) {\n        if (betNum <= 0) {\n            return;\n        }\n        let num = betNum;\n        let count = 0;\n        if (num >= 1000) {\n            count = Math.floor(num / 1000);\n            num = num % 1000;\n            for (let i = 0; i < count; i++) {\n                this.showCoins(headPos, area, itemarr[4], quantity, areanum);\n            }\n        }\n        if (num >= 100) {\n            count = Math.floor(num / 100);\n            num = num % 100;\n            for (let i = 0; i < count; i++) {\n                this.showCoins(headPos, area, itemarr[3], quantity, areanum);\n            }\n        }\n        if (num >= 50) {\n            count = Math.floor(num / 50);\n            num = num % 50;\n            for (let i = 0; i < count; i++) {\n                this.showCoins(headPos, area, itemarr[2], quantity, areanum);\n            }\n        }\n        if (num >= 10) {\n            count = Math.floor(num / 10);\n            num = num % 10;\n            for (let i = 0; i < count; i++) {\n                this.showCoins(headPos, area, itemarr[1], quantity, areanum);\n            }\n        }\n        if (num >= 1) {\n            count = Math.floor(num / 1);\n            num = num % 1;\n            for (let i = 0; i < count; i++) {\n                this.showCoins(headPos, area, itemarr[0], quantity, areanum);\n            }\n        }\n    }\n    /**\n   * 下注筹码移动\n   * @param headPos 玩家头像\n   * @param area 筹码层\n   * @param item 需要创建的筹码\n   * @param quantity 下注区域\n   * @param areanum 下注区域序号\n   */\n    public showCoins(headPos: any, area: cc.Node, item: any, quantity, areanum: number): void {\n        if(!cc.isValid(item))return;\n        let i = 0;\n        let chilp = cc.instantiate(item);\n        area.addChild(chilp);\n        this.allchip_arr.push(chilp);\n        this.correspond_chips_arr[areanum].push(chilp);\n        var mpos: cc.Vec2 = cc.v2(0, 0);\n        // mpos = headPos.position;     //起始点\n\n        // mpos = headPos.parent.convertToWorldSpaceAR(mpos);\n        // // cc.log(\"起始点 _ 转换后位置\", pos);\n        // mpos = area.convertToNodeSpaceAR(mpos);\n        mpos = headPos;     //起始点\n        // mpos = headPos.parent.convertToWorldSpaceAR(mpos)\n\n        chilp.position = mpos;\n\n        if( !cc.isValid( quantity ) )\n        {\n            console.log(\"showCoins  quantity is null\");\n            return;\n        }\n        let tos: cc.Vec2 = quantity.position;   //目标点\n        tos = quantity.parent.convertToWorldSpaceAR(tos);\n        tos = area.convertToNodeSpaceAR(tos);\n\n        let xx = configuration.random(-70, 70);\n        let yy = configuration.random(-40, 40);\n\n        tos.x += xx;\n        tos.y += yy;\n        this.chippos.push(tos);\n        chilp.stopAllActions();\n        chilp.runAction(\n            cc.sequence(\n                cc.moveTo(0.7, tos),\n                cc.jumpBy(0.2, 4, 0, 2, 2),\n                // cc.scaleTo(0.1, 1.2, 1.2),\n                // cc.scaleTo(0.1, 1, 1),\n                cc.callFunc( ()=>{\n                    if( cc.isValid( chilp ) )\n                    {\n                        chilp.name = chilp.name + i;\n                        i++;\n                        chilp.stopAllActions();\n                    }\n                }, this)\n            )\n        );\n    }\n    /**\n    * //筹码回收\n    * @param  headpos 玩家头像坐标\n    * @param  win   赢家列表\n    */\n    public chipback(headpos, win: number[]) {\n        if (this.allchip_arr.length == 0) {\n            cc.log('本局未有玩家进行下注操作，或没有玩家进行游戏');\n            return;\n        } else {\n            let num = Math.ceil(this.allchip_arr.length / win.length);\n            let arr = configuration.chunk(this.allchip_arr, num);\n            audiotool.play_audioSource(audiotool.LoadAudio(27));\n            for (let i = 0; i < win.length; i++) {\n                if (arr[i] == null || arr == null) return;\n                else {\n                    for (let a = 0; a < arr[i].length; a++) {\n                        let postion: cc.Vec2 = headpos[win[i]];   //目标点\n                        let ac = cc.moveTo(0.5, postion);\n                        let call = cc.callFunc((sender) => {\n                            if( cc.isValid( sender ) )\n                            {\n                                sender.destroy();\n                                sender = null;\n                            }\n                        })\n                        let seq = cc.sequence(ac, call);\n                        arr[i][a].stopAllActions();\n                        arr[i][a].runAction(seq);\n                    }\n                }\n            }\n        }\n    }\n    private timer1: number = -1;//延时器\n    private timer2: number = -1;\n    private timer3: number = -1;\n    private lose_area_num: number = 0;\n    public win_area: number = 0;\n    public chipCount:number = 0;\n    /** \n     * //筹码回收\n     * @param  head 玩家头像\n     * @param  win   赢家列表\n     * @param  data  开奖时每个筹码区域输赢\n     * @param  bankerNode  庄家头像节点\n     * @param  quan_Arr  存放筹码区域节点数组\n     * @param  area     筹码层\n     * @param  itemarr   需要创建的預製體\n     */\n    public Chipset(head: any[], win: number[], data: msg.GameAward, quan_Arr: cc.Node[], area: any, itemarr: any[], fun: Function) {\n        this.win_area = 0;\n        this.chipCount = 0;\n        for (let i = 0; i < data.award.length; i++) {\n            if ( data.award[i].isWin == true && data.award[i].awardArea != msg.EnumArea.Banker ) {\n                this.win_area++;\n            }\n        }\n        for( let i=0;i<this.correspond_chips_arr.length;i++)\n        {\n            this.chipCount += this.correspond_chips_arr[ i ].length;\n        }\n        if (this.win_area == 0) {  //庄家通吃(桌子全输)延迟0秒\n            cc.log('庄家通吃');\n            this.bankerTongChi(head, data);\n        }\n        else if (this.win_area == 2) { //庄家通赔（桌子全赢）延迟4秒\n            cc.log('庄家通赔');\n            this.bankerTongPei(head, win, data, quan_Arr, area, itemarr, fun && fun());\n        }\n        else if (this.win_area != 2 && this.win_area != 0) {//（桌子有输有赢）延迟4.3秒\n            cc.log('庄家有输有赢');\n            this.fiyBanker(head, win, data, quan_Arr, area, itemarr, fun && fun());\n        }\n    }\n    /**\n    * 庄家通吃\n    * @param  head  玩家头像\n    * @param  win  赢家列表\n    * @param  data  开奖时每个筹码区域输赢\n    * @param  bankerNode  庄家头像节点\n    * @param  fun  \n    */\n   public bankerTongChi(head, data: msg.GameAward ) { //先从输的筹码区域飞向庄家\n        if( !cc.isValid( head[ 0 ] ) )\n        {\n            console.log( \"fiyBanker head[0] is null\");\n            return;\n        }\n        this.lose_area_num = 0;\n        if( this.chipCount > 0 )\n        {\n            audiotool.play_audioSource(audiotool.LoadAudio(35));\n        }\n        for (let i = 0; i < data.award.length; i++) {\n            if (data.award[i].isWin == false && data.award[i].awardArea != msg.EnumArea.Banker) {\n                this.lose_area_num++;\n                for (let j = 0; j < this.correspond_chips_arr[i].length; j++) {\n                    let postion: cc.Vec2 = head[0].position;   //目标点\n                    let bpos = cc.moveTo(0.3, postion);\n                    let call = cc.callFunc((sender) => {\n                        if( cc.isValid( sender ) )\n                        {\n                            sender.destroy();\n                            sender = null;\n                        }\n                    })\n\n                    let seq = cc.sequence(bpos, call);\n                    if( cc.isValid( this.correspond_chips_arr[i][j] ) )\n                    {\n                        this.correspond_chips_arr[i][j].stopAllActions();\n                        this.correspond_chips_arr[i][j].runAction(seq);\n                    }\n                }\n            }\n        }\n    }\n\n    /** \n    * //庄家通赔\n    * @param  head 玩家头像\n    * @param  win   赢家列表\n    * @param  data  开奖时每个筹码区域输赢\n    * @param  quan_Arr  存放筹码区域节点数组\n    * @param  area     筹码层\n    * @param  itemarr   需要创建的預製體\n    */\n    public bankerTongPei(head: any[], win: number[], data: msg.GameAward, quan_Arr: cc.Node[], area: any, itemarr: any[], fun: Function) {\n        if( this.chipCount > 0 )\n        {\n            audiotool.play_audioSource(audiotool.LoadAudio(35));\n        }\n        for (let i = 0; i < data.award.length; i++) {\n            if (data.award[i].isWin == true && data.award[i].awardArea != msg.EnumArea.Banker && this.correspond_chips_arr[data.award[i].awardArea].length>0 ) {\n                for (let m = 0; m < 3; m++) {\n                    let area_num = configuration.random(0, 4);\n                    this.showCoins(head[0], area, itemarr[area_num], quan_Arr[i], 0);\n                }\n            }\n        }\n        this.timer2 = setTimeout(() => {\n            clearTimeout(this.timer2);\n            this.fiyWinPos(head, win, fun && fun());\n        }, 2 * 1000)\n    }\n    /** \n        * 庄家筹码飞到桌子\n        * @param  head 玩家头像\n        * @param  win   赢家列表\n        * @param  data  开奖时每个筹码区域输赢\n        * @param  quan_Arr  存放筹码区域节点数组\n        * @param  area     筹码层\n        * @param  itemarr   需要创建的預製體\n        */\n    public bankerToTable(head: any[], win: number[], data: msg.GameAward, quan_Arr: cc.Node[], area: any, itemarr: any[], fun: Function) {    //再从庄家飞向赢的筹码区域\n        if( this.chipCount > 0 )\n        {\n            audiotool.play_audioSource(audiotool.LoadAudio(35));\n        }\n        for (let i = 0; i < data.award.length; i++) {\n            if (data.award[i].isWin == true && data.award[i].awardArea != msg.EnumArea.Banker && this.correspond_chips_arr[data.award[i].awardArea].length>0) {\n                let quantity = quan_Arr[i];\n                //庄家没有通吃（筹码区域有输的情况）\n                for (let k = 0; k < 12; k++) {\n                    let area_num = configuration.random(0, 4);\n                    this.showCoins(head[0], area, itemarr[area_num], quantity, 0);\n                }\n            }\n        }\n        this.timer3 = setTimeout(() => {\n            clearTimeout(this.timer3);\n            // fun && fun()\n            this.fiyWinPos(head, win, fun && fun());\n        }, 2 * 1000)\n    }\n    /**\n    * 筹码飞向庄家\n    * @param  head  玩家头像\n    * @param  win  赢家列表\n    * @param  data  开奖时每个筹码区域输赢\n    * @param  bankerNode  庄家头像节点\n    * @param  fun  \n    */\n    public fiyBanker(head, win: number[], data: msg.GameAward, quan_Arr: cc.Node[], area: any, itemarr: any[], fun: Function) { //先从输的筹码区域飞向庄家\n        if( !cc.isValid( head[ 0 ] ) )\n        {\n            console.log( \"fiyBanker head[0] is null\");\n            return;\n        }\n        this.lose_area_num = 0;\n        if( this.chipCount > 0 )\n        {\n            audiotool.play_audioSource(audiotool.LoadAudio(35));\n        }\n        for (let i = 0; i < data.award.length; i++) {\n            if (data.award[i].isWin == false && data.award[i].awardArea != msg.EnumArea.Banker) {\n                this.lose_area_num++;\n                for (let j = 0; j < this.correspond_chips_arr[i].length; j++) {\n                    let postion: cc.Vec2 = head[0].position;   //目标点\n                    let bpos = cc.moveTo(0.3, postion);\n                    let call = cc.callFunc((sender) => {\n                        if( cc.isValid( sender ) )\n                        {\n                            sender.destroy();\n                            sender = null;\n                        }\n                    })\n\n                    let seq = cc.sequence(bpos, call);\n                    if( cc.isValid( this.correspond_chips_arr[i][j] ) )\n                    {\n                        this.correspond_chips_arr[i][j].stopAllActions();\n                        this.correspond_chips_arr[i][j].runAction(seq);\n                    }\n                }\n            }\n        }\n        this.timer1 = setTimeout(() => {\n            clearTimeout(this.timer1);\n            this.bankerToTable(head, win, data, quan_Arr, area, itemarr, fun && fun())\n        }, 0.3 * 1000)\n    }\n    public isCompleteFlyChip: boolean = false;\n    /**\n     * 筹码飞向赢家\n     * @param  head 玩家头像\n     * @param  win   赢家列表 \n     */\n    public fiyWinPos(head: any[], win: number[], fun: Function) {\n        let num = Math.ceil(this.allchip_arr.length / win.length);\n        let arr = configuration.chunk(this.allchip_arr, num);\n        for (let i = 0; i < win.length; i++) {\n            if( !cc.isValid( head[win[i]] ) )\n            {\n                console.log( \"fiyWinPos head[win[i]] is null\");\n                return;\n            }\n            if (arr[i] == null || arr == null) return;\n            else {\n                audiotool.play_audioSource(audiotool.LoadAudio(27));\n                for (let a = 0; a < arr[i].length; a++) {\n                    let postion: cc.Vec2 = head[win[i]].position;   //目标点\n                    let r_num = Math.random();\n                    if (r_num >= 0.5) {\n                        r_num = 1;\n                    } else {\n                        r_num = 0;\n                    }\n                    let ac = cc.moveTo(r_num == 0 ? 0.5 : 0.7, postion);\n                    let call = cc.callFunc((sender) => {\n                        if (a == arr[i].length - 1) fun && fun();\n                        if( cc.isValid( sender ) )\n                        {\n                            sender.destroy();\n                            sender = null;\n                        }\n                    })\n                    let seq = cc.sequence(ac, call);\n                    if( cc.isValid( arr[i][a]) )\n                    {\n                        arr[i][a].stopAllActions();\n                        arr[i][a].runAction(seq);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * 直接显示牌值\n     * @param car_node 牌的大节点\n     * @param isdisplay 是否显示牌节点\n     * @param fun 赋值牌值的方法\n     */\n    public directCardValue(car_node: any, isdisplay: boolean, fun): void {\n        if ( !cc.isValid( car_node ) ) {\n            cc.log('牌不足或牌被销毁');\n            return;\n        }\n        for (let i = 0; i < this.nodeleng; i++) {\n            if( !cc.isValid( car_node[ i ] ) )return;\n            var r = car_node[i],\n                poke0 = r.getChildByName('poker_0'),\n                poke1 = r.getChildByName('poker_1'),\n                poke2 = r.getChildByName('poker_2'),\n                poke3 = r.getChildByName('poker_3'),\n                poke4 = r.getChildByName('poker_4');\n            if( !cc.isValid( poke0 ) || !cc.isValid( poke1 ) ||\n                !cc.isValid( poke2 ) || !cc.isValid( poke3 ) ||\n                !cc.isValid( poke4 ) )\n            {\n                return;\n            }\n            poke0.active = isdisplay,\n                poke1.active = isdisplay,\n                poke2.active = isdisplay,\n                poke3.active = isdisplay,\n                poke4.active = isdisplay;\n\n            poke0.getChildByName('back').active = false;\n            poke1.getChildByName('back').active = false;\n            poke2.getChildByName('back').active = false;\n            poke3.getChildByName('back').active = false;\n            poke4.getChildByName('back').active = false;\n\n            poke0.stopAllActions(),\n                poke1.stopAllActions(),\n                poke2.stopAllActions(),\n                poke3.stopAllActions(),\n                poke4.stopAllActions();\n\n            poke0.getPosition(),\n                poke1.getPosition(),\n                poke2.getPosition(),\n                poke3.getPosition(),\n                poke4.getPosition();\n        }\n        var timer = setTimeout(() => {\n            clearTimeout(timer)\n            fun && fun()\n        }, 0 * 1000)\n    }\n    /**飞牌动画 */\n    public playCardFly(car_node: any, fun): void {\n        if ( !cc.isValid( car_node ) ) {\n            cc.log('牌不足或牌被销毁');\n            return;\n        }\n        for (let i = 0; i < this.nodeleng; i++) {\n            if( !cc.isValid( car_node[i] ) )return;\n            var r = car_node[i];\n            var c = r.parent.convertToWorldSpaceAR(r.parent.position);\n            var d = r.convertToNodeSpaceAR(c),\n                pos = cc.v2(0, 150),\n                poke0 = r.getChildByName('poker_0');\n\n            if( !cc.isValid( poke0 ) )\n            {\n                return;\n            }\n            poke0.active = true;\n\n            poke0.stopAllActions();\n\n            let p = poke0.getPosition();\n            \n            poke0.setPosition((pos.add(d)));\n            let call_Audio = cc.callFunc((sender) => {\n                audiotool.play_audioSource(audiotool.LoadAudio(14));\n            })\n            \n\n            \n            //发完最后一张牌，执行下一个动作\n            let call = cc.callFunc((sender) => {\n                if (i == this.nodeleng - 1 ) {\n                    fun && fun();\n                    // cc.log('要执行翻牌一动作,flipCard0');\n                }\n            })\n            poke0.runAction(cc.sequence(\n                cc.delayTime(0 * .06 + i * .5), call_Audio,\n                cc.spawn(cc.moveTo(.15, p),\n                    cc.fadeIn(.15),\n                    ),\n                    call\n                ));\n        }\n    }\n    /**翻牌0 */\n    public flipCard0(car_node: any, num: number, fun): void {\n        if ( !cc.isValid( car_node ) ) {\n            cc.log('牌不足或牌被销毁');\n            return;\n        }\n        for (let i = 0; i < this.nodeleng; i++) {\n            if( !cc.isValid( car_node[i] ) )\n            {\n                cc.log(\"flipCard0=============== car_node[i] is null i=\",i)\n                return;\n            }\n            var r = car_node[i],\n                poke0 = r.getChildByName('poker_0');\n\n            if( !cc.isValid( poke0 ) )\n            {\n                cc.log(\"flipCard0=============== poke0 is null\")\n                return;\n            }\n            \n            poke0.stopAllActions();\n\n            var p = poke0.getPosition();\n\n            let call = cc.callFunc((sender) => {\n                if (i == this.nodeleng - 1) {\n                    fun && fun();\n                    // cc.log('要执行翻牌二动作,flipCard1');\n                }\n            })\n\n            poke0.runAction(cc.sequence(\n                cc.delayTime(.8), call)),\n\n                cc.delayTime(.5),\n                poke0.getChildByName('back').active = false;\n        }\n    }\n\n    /**翻牌1 */\n    public flipCard1(car_node: any, data:msg.GameAward, votgold: number[], fun): void {\n        if ( !cc.isValid( car_node ) ) {\n            cc.log('牌不足或牌被销毁');\n            return;\n        }\n        for (let i = 0; i < this.nodeleng; i++) {\n            if( !cc.isValid( car_node[i] ) )\n            {\n                cc.log(\"flipCard1=============== car_node[i] is null i=\",i)\n                return;\n            }\n            if ( !cc.isValid( car_node[i].children ) ) {\n                cc.log('节点被销毁');\n                return;\n            }\n            var r = car_node[i],\n                poke0 = r.getChildByName('poker_0');\n\n            if( !cc.isValid( poke0 ) )\n            {\n                cc.log(\"flipCard1=============== poke0 is null\")\n                return;\n            }\n           \n            poke0.stopAllActions();\n\n            var p = poke0.getPosition();\n\n            let call = cc.callFunc((sender) => {\n                createpoke.createCardType2(car_node[i], data.award[i].cardType, votgold, i,data.award[i].awardAreaOdds);\n                if (i == this.nodeleng - 1 ) fun && fun();\n            })\n            poke0.runAction(cc.sequence(\n                cc.delayTime(i + .3),\n                ,call));\n        }\n        // var timer = setTimeout(() => {\n        //     clearTimeout(timer)\n        //     fun && fun()\n        // }, .3 * 1000)\n    }\n    /**\n     * @param  请耐心等待下一局逗号闪烁\n     */\n    showWaiting(n: cc.Node) {\n        if( !cc.isValid( n ) )return;\n        let d0 = n.getChildByName('dot_0');\n        let d1 = n.getChildByName('dot_1');\n        let d2 = n.getChildByName('dot_2');\n\n        let action1_show = cc.fadeTo(0.5, 255);\n        let action1_hide = cc.fadeTo(0.5, 0);\n        let action2_show = cc.fadeTo(0.5, 255);\n        let action2_hide = cc.fadeTo(0.5, 0);\n        let action3_show = cc.fadeTo(0.5, 255);\n        let action3_hide = cc.fadeTo(0.5, 0);\n\n        d0.stopAllActions()\n        d1.stopAllActions()\n        d2.stopAllActions()\n        let callBack1 = cc.callFunc(() => {\n            if( cc.isValid( d1 ) )\n            {\n                d1.runAction(cc.sequence(action2_show, action2_show, callBack2))\n            }\n        })\n        let callBack2 = cc.callFunc(() => {\n            if( cc.isValid( d2 ) )\n            {\n                d2.runAction(cc.sequence(action3_show, action3_show, callBack3))\n            }\n        })\n        let callBack3 = cc.callFunc(() => {\n            if( cc.isValid( d2 ) )\n            {\n                d0.runAction(action1_hide)\n                d0.runAction(cc.sequence(action1_show, action1_show, callBack1))\n            }\n            if( cc.isValid( d1 ) )\n            {\n                d1.runAction(action2_hide)\n            }\n            if( cc.isValid( d2 ) )\n            {\n                d2.runAction(action3_hide)\n            }\n            \n        })\n        d0.runAction(cc.sequence(action1_show, action1_show, callBack1))\n    }\n\n    /**\n     *结算赢家闪光\n     * @param data 收到结算输赢结果\n     * @param head 桌上玩家图像节点\n     */\n    public WinPlayerlight(data:msg.GameAward, head: any[]) {\n        for (let i = 0; i < data.award.length; i++) {\n            let winlose_g = data.offsetMe;\n            if ( data.award[i].isWin) { //当前玩家赢 没有用闪光特效\n                if( cc.isValid( head[i]))\n                {\n                    let win_light = head[i].getChildByName('p_win_light');\n                    if (winlose_g > 0) {\n                        if( cc.isValid( win_light ) )\n                        {\n                            win_light.active = true;\n                            configuration.playAnim(win_light, 0, 'win', false, null);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     *结算飘字\n     * @param data 收到结算输赢结果\n     * @param lab_gold_pos 所有玩家输赢gold_lab初始位置\n     * @param lab_win 所有玩家win_lab 节点\n     * @param lab_lose 所有玩家lose_lab 节点\n     * @param conut (0:正常流程结算，1：进入房间时时结算状态)\n     */\n    public Floatword(data: msg.GameAward, lab_gold_pos: any[], lab_win: any[], lab_lose: any[], count: number) {\n        let index = 0;\n        for (let i = 0; i < 9; i=i+7) {\n            let winlose:number = null;\n            index = i;\n            if ( i == 0) {  //庄家\n                winlose = data.offsetBanker;\n            } else {\n                winlose = data.offsetMe;\n            }\n            if( cc.isValid( lab_gold_pos[index] ) && cc.isValid( lab_win[index] ) && cc.isValid( lab_lose[index] ) )\n            {\n                let w_pos = lab_gold_pos[index];\n                let w = lab_win[index];\n                let l = lab_lose[index];\n                let w_g = w.getChildByName('win_gold_'),\n                    l_g = l.getChildByName('lose_gold_'),\n                    winlose_g = winlose,\n                    gold_count = configuration.removeDecimalpoint(winlose_g),\n                    lab_worl = null;\n                w.position = w_pos,\n                    l.position = w_pos;\n                if (winlose_g > 0) {\n                    w.opacity = 255;//设置透明度\n                    l.opacity = 255;\n                    w.active = true;\n                    l.active = false;\n                    lab_worl = w;\n                    w_g.getComponent(cc.Label).string = '+' + gold_count;\n                } else if (winlose_g < 0) {\n                    w.opacity = 255;\n                    l.opacity = 255;\n                    l.active = true;\n                    w.active = false;\n                    lab_worl = l;\n                    l_g.getComponent(cc.Label).string = '' + gold_count;\n                }\n                if ( cc.isValid( lab_worl ) ) {\n                    lab_worl.stopAllActions();\n                    let call = cc.callFunc((sender) => {\n                        if( cc.isValid( sender ) )\n                        {\n                            sender.stopAllActions();\n                        }\n                    })\n                    let seq = cc.moveTo(1, cc.v2(w_pos.x, w_pos.y + 60))\n                    let spew = cc.sequence(seq, call);\n                    lab_worl.runAction(spew);\n                }\n            }\n        }\n    }\n    /**\n   *庄家通吃通赔音效 \n   * @param data 结算数据\n   * @param w_num 筹码区域赢得个数\n   * @param l_num 筹码区域输得个数\n   */\n    public eatandpay(data:msg.GameAward) {\n        let w_num: number = 0;\n        let l_num: number = 0;\n        for (let i = 0; i < data.award.length; i++) {\n            if( data.award[i].awardArea != msg.EnumArea.Banker )\n            {\n                if (data.award[i].isWin == true) {\n                    w_num++;\n                } else {\n                    l_num++;\n                }\n            }\n        }\n        if (w_num == 2) { //庄家通赔\n            audiotool.play_audioSource(audiotool.LoadAudio(18));\n        }\n        if (l_num == 2) {  //庄家通吃\n            audiotool.play_audioSource(audiotool.LoadAudio(17));\n        }\n    }\n    public isfilck: boolean = false;\n    /**\n    * //闪烁特效\n    * @param i 是要闪硕的节点\n    */\n    public blink(i) {\n        if( cc.isValid( i ) )\n        {\n            let l = i;\n            l.active = true;\n            l.stopAllActions();\n            var seq = cc.repeat(\n                cc.sequence(\n                    cc.fadeTo(0.7, 0),\n                    cc.fadeTo(0.7, 255),\n                ), 5);\n            var call = cc.callFunc((sender) => {\n                if( cc.isValid( sender ) )\n                {\n                    sender.stopAllActions();\n                    sender.active = false;\n                }\n            })\n            l.runAction(cc.sequence(seq, call))\n        }\n    }\n    /**\n     * 赌神星星抛物线\n     * @param t 运动时间\n     * @param startPoint 开始位置\n     * @param endPoint 结束位置\n     * @param height 运动高度\n     * @param angle 角度\n     */\n    public createStarMoveAction(t, startPoint, endPoint, height, angle) {\n        // 把角度转换为弧度\n        let radian = angle * 3.14159 / 180;\n        // 第一个控制点为抛物线左半弧的中点\n        let q1x = startPoint.x + (endPoint.x - startPoint.x) / 4;\n        let q1 = cc.v2(q1x, height + startPoint.y + Math.cos(radian) * q1x);\n\n        // 第二个控制点为整个抛物线的中点\n        let q2x = startPoint.x + (endPoint.x - startPoint.x) / 2;\n        let q2 = cc.v2(q2x, height + startPoint.y + Math.cos(radian) * q2x);\n        // 曲线配置\n        return cc.bezierTo(t, [q1, q2, endPoint]).easing(cc.easeInOut(t));\n    }\n\n    /**\n     * 赌神星星动画\n     * @param starFlashFabNode 闪烁预制体实例\n     * @param currentBettingTableNode 目标节点\n     * @param index 当前投注桌面下标\n     * @param callback 回调\n     */\n    endDushenStarX = 0\n    godStarMoveAction(starFlashFabNode: any, currentBettingTableNode: any,\n        index: number, callback: Function) {\n        if( !cc.isValid( starFlashFabNode ) )return;\n        if( !cc.isValid( currentBettingTableNode ) )return;\n        let randomAngle = 100;\n        let moveTime = 1;\n        let starStartPoint = cc.v2(starFlashFabNode.x, starFlashFabNode.y);\n        //如果是赌神,记录当前点击的星星的坐标\n\n        // let endDushenStarX = 0;\n        if (index == 0) {\n            moveTime = 1.5;\n            this.endDushenStarX = currentBettingTableNode.x - 57;\n        } else if (index == 1) {\n            moveTime = 1.5;\n            this.endDushenStarX = currentBettingTableNode.x - 70;\n        } else if (index == 2) {\n            this.endDushenStarX = currentBettingTableNode.x - 85;\n        } else if (index == 3) {\n            this.endDushenStarX = currentBettingTableNode.x - 95;\n        }\n        // cc.log('赌神星星动画', this.endDushenStarX);\n        let endDushenStarY = currentBettingTableNode.height / 2 + 45;\n\n        let dushenStarEndPosition = cc.v2(this.endDushenStarX, endDushenStarY);\n\n        let endPoint = dushenStarEndPosition;\n        let height = starStartPoint.y - endPoint.y;\n        // let randomAngle = DataTool.countRandomAction(90, 60);\n\n        // if (index == 3) {\n        //     moveTime = 1.5;\n        //     randomAngle = 90;\n        //     // height -= 80;\n        // } else if (index == 4) {\n        //     randomAngle = DataTool.countRandomAction(90, 80);\n        // } else if (index == 1 || index == 2) {\n        //     randomAngle = 90;\n        // }\n        starFlashFabNode.stopAllActions();\n        starFlashFabNode.runAction(cc.sequence(\n            //星星抛物线动作\n            this.createStarMoveAction(moveTime, starStartPoint, endPoint, height, randomAngle),\n            cc.callFunc((sender, endPoint) => {\n                if( cc.isValid( callback ) )\n                {\n                    callback(endPoint);\n                }\n            }, this, endPoint)\n        ));\n    }\n\n}\nexport const brnnanimate = brnnAnimate.getInstance();","import { audiotool } from \"./brnnAudioTool\";\n\n// import client from '../brnnnet/brnn_client';\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class brnnAppstart extends cc.Component {\n\n    onLoad() {\n        audiotool.loadSoundsRes( this.node );\n    }\n    // update (dt) {}\n    onDestroy() {\n\n    }\n}\n","const { ccclass, property } = cc._decorator;\n\n@ccclass\nclass AudioTool {\n\n    private Volume: number = 1;\n    public Mute: boolean = false; ss\n    /**音效池 */\n    private _audios: cc.AudioSource[] = [];\n\n    protected static instance: AudioTool;\n    public static getInstance(): AudioTool {\n        if (!this.instance) {\n            this.instance = new AudioTool();\n        }\n        return this.instance;\n    }\n    /**加载音频文件夹 */\n    loadSoundsRes( tempnode:cc.Node ) {\n        let thda = this;\n        thda._audios = [];\n        cc.loader.loadResDir('brnn/brnn_audio', cc.AudioClip, function (err, clips) {\n            if (err) {\n                cc.log(\"资源加载失败！\");\n                return;\n            }\n            for (let i = 0; i < clips.length; i++) {\n                if( cc.isValid( clips[ i ] ))\n                {\n                    let presence = thda.judgmentsfcz(clips[i].name);\n                    if (presence) {\n                        return;\n                    }\n                    else {\n                        let audioSource = tempnode.addComponent( cc.AudioSource );\n                        audioSource.clip = clips[i];\n                        audioSource.name = clips[i].name;\n                        thda._audios.push(audioSource);\n                    }\n                }\n            }\n            cc.log(\"资源加载完成！\");\n        });\n    }\n    /**音乐资源 */\n    LoadAudio(index: number) {\n        var str: string = \"\";\n        switch (index) {\n            case 0: str = \"00_meiniu\"; break;        //没牛音效\n            case 1: str = \"01_niuyi\"; break;         //牛1音效\n            case 2: str = \"02_niuer\"; break;         //牛2音效\n            case 3: str = \"03_niusan\"; break;        //牛3音效\n            case 4: str = \"04_niusi\"; break;         //牛4音效\n            case 5: str = \"05_niuwu\"; break;         //牛5音效\n            case 6: str = \"06_niuliu\"; break;         //牛6音效\n            case 7: str = \"07_niuqi\"; break;         //牛7音效\n            case 8: str = \"08_niuba\"; break;         //牛8音效\n            case 9: str = \"09_niujiu\"; break;         //牛9音效\n            case 10: str = \"10_niuniu\"; break;        //牛牛音效\n            case 11: str = \"11_sizha\"; break;         //四炸音效\n            case 12: str = \"12_wuhuaniu\"; break;      //五花牛音效\n            case 13: str = \"brnn_bgm\"; break;         //游戏背景音乐\n            case 14: str = \"brnn_fapai\"; break;        //发牌音效\n            case 15: str = \"brnn_lose\"; break;        //你输了界面音效\n            case 16: str = \"brnn_win\"; break;        //你赢了界面音效\n            case 17: str = \"brnn_zjtongchi2\"; break;    //庄家通吃音效\n            case 18: str = \"brnn_zjtongpei\"; break;        //庄家通赔音效\n            case 19: str = \"p_bet_long\"; break;        //丢筹码音效0\n            case 20: str = \"p_bet_mid\"; break;        //丢筹码音效1\n            case 21: str = \"p_bet_short\"; break;        //丢筹码音效2\n            case 22: str = \"p_bet_short2\"; break;        //丢筹码音效3\n            case 23: str = \"p_change_banker2\"; break;    //庄家轮换音效\n            case 24: str = \"p_click\"; break;             //普通按钮点击音效\n            case 25: str = \"p_clickcm\"; break;        //点击筹码按钮音效\n            case 26: str = \"p_clickxiazhuqu\"; break;        //点击筹码区域音效\n            case 27: str = \"p_collectgold2\"; break;     //回收筹码音效\n            case 28: str = \"p_countdown\"; break;     //倒计时音效 (嘟嘟嘟)\n            case 29: str = \"p_dating_rm_bgm\"; break;     //房间音效\n            case 30: str = \"p_dplayer_bet\"; break;        //玩家下注头像抖动音效\n            case 31: str = \"p_remind\"; break;        //停止下注时叮叮音效  (叮叮叮)\n            case 32: str = \"p_start_bet\"; break;     //开始下注音效\n            case 33: str = \"p_stop_bet\"; break;     //停止下注音效\n            case 34: str = \"p_tip_remind\"; break;     //配合开始下注/停止下注动画出现时的「咻」 音效\n            case 35: str = \"zhuangjiatuntu\"; break;     //庄家吞吐筹码 音效\n            case 36: str = \"opencard\"; break;     //翻牌 音效\n            case 37: str = \"p_player_come_In\"; break;     //从房间列表返回到大厅和加载页返回列表成功返回到大厅后 音效\n            case 38: str = \"p_button_click\"; break;     //返回键的点击 音效\n\n            default:\n                break;\n        }\n        return str;\n    }\n    /**判断音频是否存在 */\n    judgmentsfcz(name: string) {\n        let thda = this;\n        for (let i = 0; i < thda._audios.length; i++) {\n            if (thda._audios[i].name == name) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**音频源的音量（0.0 ~ 1.0）*/\n    volume_udioSource(num: number) {\n        let thda = this;\n        this.Volume = num;\n        for (let i = 0; i < thda._audios.length; i++) {\n            thda._audios[i].volume = this.Volume;\n        }\n    }\n    /**音频源的音量（true-关   false-开）*/\n    volume_iudioSource(bol: boolean) {\n        let thda = this;\n        this.Mute = bol;\n        for (let i = 0; i < thda._audios.length; i++) {\n            if( cc.isValid( thda._audios[i] ))\n            {\n                if( cc.isValid( thda._audios[ i ].audio ) )\n                {\n                    thda._audios[i].mute = this.Mute;\n                }\n                else\n                {\n                    cc.log( \"thda._audios[ i ].audio is null thda._audios[i]=\"+thda._audios[i].name);\n                }\n            }\n        }\n    }\n    /**播放音乐\n     * strname 资源名\n     */\n    play_audioSource(strname: string , volume:number = 1 ) {\n        let thda = this;\n        let findid = -1;\n        for (let i = 0; i < thda._audios.length; i++) {\n            if( cc.isValid( thda._audios[i] ) )\n            {\n                if (strname == thda._audios[i].name) {\n                    findid = i;\n                    if( !( thda._audios[ i ].audio.getState() == 1 ) )\n                    {\n                        thda._audios[i].volume = volume;\n                        thda._audios[i].play();\n                        return;\n                    }\n                }\n            }\n        }\n        if( findid >= 0 && findid < thda._audios.length )\n        {\n            let audioSource = thda._audios[ findid ].node.addComponent( cc.AudioSource );\n            audioSource.clip = thda._audios[ findid ].clip;\n            audioSource.name = thda._audios[ findid ].name;\n            audioSource.volume = volume;\n            audioSource.mute = thda._audios[ findid ].mute;\n            thda._audios.push(audioSource);\n            audioSource.play();\n        }\n    }\n    /**停止音乐 */\n    stop_audioSource() {\n        let thda = this;\n        for (let i = 0; i < thda._audios.length; i++) {\n            thda._audios[i].stop();\n        }\n    }\n    /**暂停音乐 */\n    pause_audioSource() {\n        let thda = this;\n        for (let i = 0; i < thda._audios.length; i++) {\n            thda._audios[i].pause();\n        }\n    }\n    /**恢复播放 */\n    resume_audioSource() {\n        let thda = this;\n        for (let i = 0; i < thda._audios.length; i++) {\n            thda._audios[i].resume();\n        }\n    }\n    /**重头开始 */\n    rewind_audioSource(index: number) {\n        let thda = this;\n        thda._audios[index].rewind();\n    }\n    /**清空音效 */\n    Removeaudios() {\n        for (let i = 0; i < this._audios.length; i++) {\n            if (this._audios[i] != null) {\n                this._audios[i] = null;\n            }\n        }\n        this._audios = [];\n    }\n}\n\nexport const audiotool = AudioTool.getInstance();","const { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class brnnButtonSclear extends cc.Component {\n\n    @property({ tooltip: '缩放大小倍数' })\n    pressedScale: number = 1;\n    @property({ tooltip: '缩放时间' })\n    transDuration: number = 0;\n\n\n    private initScale: number = 1;\n\n    private scaleDownAction: any = null;\n    private scaleUpAction: any = null;\n    onLoad() {\n        this.initScale = this.node.scale;\n        // this.button = this.getComponent(cc.Button);\n        this.scaleDownAction = cc.scaleTo(this.transDuration, this.pressedScale);\n        this.scaleUpAction = cc.scaleTo(this.transDuration, this.initScale);\n        let onTouchDown = (event)=> {\n            this.node.stopAllActions();\n            this.node.runAction(this.scaleDownAction);\n        }\n        let onTouchUp = (event)=> {\n            this.node.stopAllActions();\n            this.node.runAction(this.scaleUpAction);\n        }\n        this.node.on('touchstart', onTouchDown, this.node);\n        this.node.on('touchend', onTouchUp, this.node);\n        this.node.on('touchcancel', onTouchUp, this.node);\n    }\n\n    start() {\n\n    }\n\n    // update (dt) {}\n}\n","import { msg } from \"../brnnproto/brnn_proto_msg\";\n\n/**\n * 方法类\n * 其他脚本使用此类  import Configuration from \"./Configuration\"\n */\nclass brnnConfiguration {\n\n    protected static instance: brnnConfiguration;\n    public static getInstance(): brnnConfiguration {\n        if (!this.instance) {\n            this.instance = new brnnConfiguration();\n        }\n        return this.instance;\n    }\n    //登陆信息\n    // LoginR: Msg = null;\n    // //个人信息 \n    // UserInfo: msg.IUserInfo = null;\n\n    /**个人信息 */\n    UserInfo: any = {\n        id: '',\n        seat: 0,\n        name: \"\",\n        gold: 0,\n        headurl: \"\",\n        winlose: 0\n    }\n\n    /**导航房间列表历史 */\n    ListHistory: any = {\n        data: []\n    };\n    /**退出游戏房间列表历史 */\n    OutListHistory: any = {\n        data: null\n    }\n    /**导航房间新增结果 */\n    ListResult: any = {\n        data: []\n    };\n\n    roomType: string[] = [];//房间类型\n    /**进入房间信息 */\n    EnterRoom: any = {\n        isok: true,\n        room_id: 0,\n        name: \"\",\n    }\n    /**进入房间庄家数据 \n     * @param lgold 玩家上庄锁定金币\n     * @param ugold 玩家未锁定金币\n     * @param gold 玩家总金币\n     */\n    JoinRoomR: any = {\n        time: 0,     //玩家进入房间的时间\n        isok: true, //dsada\n        room_id: 0,\n        name: \"\",\n        banker_before: {\n            id: 0,\n            seat: 0,\n            name: \"\",\n            lgold: 0,\n            ugold: 0,\n            headurl: \"\",\n            winlose: 0\n        },\n        banker: {\n            id: 0,\n            seat: 0,\n            name: \"\",\n            lgold: 0,\n            ugold: 0,\n            gold: 0,\n            headurl: \"\",\n            winlose: 0\n        },\n        bet_list: [],\n        mybet_list: [],\n        myprebet_list: [],\n        pre_loterry: {\n            player_list: [],\n            result: {\n                time: 0, //开奖的时间\n                name: \"\",\n                result: [true, true, true, true]\n            },\n            bet_result: [],\n            real_bet_result: [],\n            source: [],\n            type: [],\n        },\n        time_gameState: 0,\n        jishiqi: -1,\n        robotCount:0\n    }\n    /**其他六个玩家数据 */\n    PlayerInfo: any = {\n        obj: null\n    }\n    /**上庄列表 */\n    PrePokerList: any = {\n        banker: {\n            id: 0,\n            seat: 0,\n            name: \"\",\n            lgold: 0,\n            ugold: 0,\n            headurl: \"\",\n            winlose: 0\n        },\n        banker_list: [],\n        id: 0,\n        is_in_list: false\n    }\n    /**换庄 下庄 */\n    ChangeBanker: any = {\n        is_auto: false,\n        banker: {\n            lgold: 0,\n            ugold: 0,\n            headurl: \"\",\n            id: 0,\n            name: \"\",\n            seat: 0,\n            winlose: 0,\n        },\n        pre_banker: {\n            lgold: 0,\n            ugold: 0,\n            headurl: \"\",\n            id: 0,\n            name: \"\",\n            seat: 0,\n            winlose: 0,\n        }\n\n    }\n    /**\n     * 储存开奖信息（处理特殊情况，进入房间在下注1秒进入，但跳转到游戏房间时间是在开奖之后，\n     * 这时候需要用开奖信息 而不是数据 id=3 上一局的数据）\n     */\n    StoreLottery: any = {\n        continue: 0,\n        source: [],\n        type: [],\n        result: {\n            time: 0,\n            name: \"\",\n            result: [false, false, false, false]\n        },\n        bet_result: [0, 0, 0, 0],\n        real_bet_result: [0, 0, 0, 0],\n        player_list: []\n    }\n    /**\n   * 存贮个人数据\n   * @param date 个人数据\n   */\n    initUserInfo(xdata:msg.LoginResp) {\n        cc.log('玩家数据:', xdata);\n        let gold = xdata.balance;\n        if (gold <= 0.01) {\n            gold = 0;\n        }\n        this.UserInfo.id = xdata.userId;\n        // this.UserInfo.seat = mdata.seat;\n        this.UserInfo.name = xdata.userId;\n        this.UserInfo.gold = gold;\n    }\n    /**\n    * 存贮房间历史数据\n    * @param date 列表历史数据\n    */\n    initListHistory(xdata: any) {\n        this.ListHistory.data = xdata;\n    }\n\n    /**\n    * 存贮退出房间历史数据\n    * @param date 列表历史数据\n    */\n    outInitListHistory(xdata: any) {\n        // let mdata = JSON.parse(xdata.data);\n        cc.log('退出房间时房间列表:', JSON.parse(xdata.data));\n        // this.OutListHistory.id = mdata.id;\n        // this.OutListHistory.data = mdata;\n        this.OutListHistory.data = xdata;\n    }\n    /**\n     * 存贮房间更新历史\n     * @param date 房间数据\n     */\n\n    initListResult(xdata: any) {\n        this.ListResult.data = xdata;\n    }\n\n    initEnterRoom(xdata: any) {\n        let mdata = JSON.parse(xdata.data);\n        this.EnterRoom.room_id = mdata.room_id;\n        this.EnterRoom.isok = mdata.isok;\n        this.EnterRoom.name = mdata.name;\n    }\n    /**\n     * 存贮加入房间数据\n     * @param xdata 房间庄家数据\n     */\n    initJoinRoomR(xdata: any) {\n        let mdata = JSON.parse(xdata.data);\n\n        this.JoinRoomR.time = mdata.time;\n        this.JoinRoomR.isok = mdata.isok;\n        this.JoinRoomR.room_id = mdata.room_id;\n        this.JoinRoomR.name = mdata.name;\n\n        this.JoinRoomR.banker_before.id = mdata.banker_before.id;\n        this.JoinRoomR.banker_before.seat = mdata.banker_before.seat;\n        this.JoinRoomR.banker_before.name = mdata.banker_before.name;\n        this.JoinRoomR.banker_before.lgold = mdata.banker_before.lgold;\n        this.JoinRoomR.banker_before.ugold = mdata.banker_before.ugold;\n        this.JoinRoomR.banker_before.headurl = mdata.banker_before.headurl;\n        this.JoinRoomR.banker_before.winlose = mdata.banker_before.winlose;\n\n        this.JoinRoomR.banker.id = mdata.banker.id;\n        this.JoinRoomR.banker.seat = mdata.banker.seat;\n        this.JoinRoomR.banker.name = mdata.banker.name;\n        this.JoinRoomR.banker.lgold = mdata.banker.lgold;\n        this.JoinRoomR.banker.ugold = mdata.banker.ugold;\n        this.JoinRoomR.banker.gold = mdata.banker.lgold + mdata.banker.ugold;\n        this.JoinRoomR.banker.headurl = mdata.banker.headurl;\n        this.JoinRoomR.banker.winlose = mdata.banker.winlose;\n\n        this.PrePokerList.banker.id = mdata.banker.id;\n        this.PrePokerList.banker.seat = mdata.banker.seat;\n        this.PrePokerList.banker.name = mdata.banker.name;\n        this.PrePokerList.banker.lgold = mdata.banker.lgold;\n        this.PrePokerList.banker.ugold = mdata.banker.ugold;\n        this.PrePokerList.banker.gold = mdata.banker.lgold + mdata.banker.ugold;\n        this.PrePokerList.banker.headurl = mdata.banker.headurl;\n        this.PrePokerList.banker.winlose = mdata.banker.winlose;\n\n        this.JoinRoomR.bet_list = mdata.bet_list;\n        this.JoinRoomR.mybet_list = mdata.mybet_list;\n        this.JoinRoomR.myprebet_list = mdata.myprebet_list;\n        this.JoinRoomR.pre_loterry.player_list = mdata.pre_loterry.player_list;\n\n        this.JoinRoomR.pre_loterry.result.time = mdata.pre_loterry.result.time;\n        this.JoinRoomR.pre_loterry.result.name = mdata.pre_loterry.result.name;\n        this.JoinRoomR.pre_loterry.result.result = mdata.pre_loterry.result.result;\n\n        this.JoinRoomR.pre_loterry.bet_result = mdata.pre_loterry.bet_result;\n        this.JoinRoomR.pre_loterry.real_bet_result = mdata.pre_loterry.real_bet_result;\n        this.JoinRoomR.pre_loterry.source = mdata.pre_loterry.source;\n        this.JoinRoomR.pre_loterry.type = mdata.pre_loterry.type;\n\n        this.JoinRoomR.time_gameState = mdata.time - mdata.pre_loterry.result.time;\n        this.JoinRoomR.robotCount = mdata.robot_num;\n        \n        this.JoinRoomR.jishiqi = setInterval(()=>{\n            clearInterval(this.JoinRoomR.jishiqi);\n            this.JoinRoomR.time_gameState++;\n            if (this.JoinRoomR.time_gameState > 30) {\n                this.JoinRoomR.time_gameState = 1;\n            }\n            cc.log('切换场景所用时间', this.JoinRoomR.time_gameState);\n        }, 1000)\n    }\n    /**\n    * 存贮加入房间数据\n    * @param date 房间其他玩家数据\n    */\n    initOtherPlayerInfo(xdata: any) {\n        let mdata = JSON.parse(xdata.data);\n        this.PlayerInfo.obj = mdata;\n        cc.log('其他玩家信息:', this.PlayerInfo.obj);\n    }\n\n    /**\n    * 存贮上庄列表\n    * @param date 上庄列表数据\n    */\n    initPrePokerList(xdata: any) {\n        let mdata = JSON.parse(xdata.data);\n        this.PrePokerList.banker = mdata.banker;\n        this.PrePokerList.banker_list = mdata.banker_list;\n        this.PrePokerList.id = mdata.id;\n        this.PrePokerList.is_in_list = mdata.is_in_list;\n    }\n    /**\n       * 存贮结算开奖数据\n       * @param date 开奖数据\n       */\n    initStoreLottery(xdata: any) {\n        let mdata = JSON.parse(xdata.data);\n        this.StoreLottery.continue = mdata.continue;\n        this.StoreLottery.source = mdata.source;\n        this.StoreLottery.type = mdata.type;\n        this.StoreLottery.result.time = mdata.result.time;\n        this.StoreLottery.result.name = mdata.result.name;\n        this.StoreLottery.result.result = mdata.result.result;\n        this.StoreLottery.bet_result = mdata.bet_result;\n        this.StoreLottery.real_bet_result = mdata.real_bet_result;\n        this.StoreLottery.player_list = mdata.player_list;\n    }\n    /**\n       * 存贮换庄 下庄\n       * @param date 换庄 下庄数据\n       */\n    initChangeBanker(xdata: any) {\n        let mdata = JSON.parse(xdata.data);\n        this.ChangeBanker.is_auto = mdata.is_auto;//当前玩家是否自动下庄\n        //换庄的信息\n        this.ChangeBanker.banker.lgold = mdata.banker.lgold;\n        this.ChangeBanker.banker.ugold = mdata.banker.ugold;\n        this.ChangeBanker.banker.headurl = mdata.banker.headurl;\n        this.ChangeBanker.banker.id = mdata.banker.id;\n        this.ChangeBanker.banker.name = mdata.banker.name;\n        this.ChangeBanker.banker.seat = mdata.banker.seat;\n        this.ChangeBanker.banker.winlose = mdata.banker.winlose;\n        //上一次庄的信息\n        this.ChangeBanker.pre_banker.lgold = mdata.pre_banker.lgold;\n        this.ChangeBanker.pre_banker.ugold = mdata.pre_banker.ugold;\n        this.ChangeBanker.pre_banker.headurl = mdata.pre_banker.headurl;\n        this.ChangeBanker.pre_banker.id = mdata.pre_banker.id;\n        this.ChangeBanker.pre_banker.name = mdata.pre_banker.name;\n        this.ChangeBanker.pre_banker.seat = mdata.pre_banker.seat;\n        this.ChangeBanker.pre_banker.winlose = mdata.pre_banker.winlose;\n    }\n\n    /**\n    * 播放骨骼动画\n    * @param spin 动画节点\n    * @param index  管道index\n    * @param anim_name  播放动画的名称\n    * @param fun  回调方法\n    */\n    playAnim(spin: any, index: number, anim_name: string, isloop: boolean, fun: Function) {\n        if ( !cc.isValid( spin ) ) {\n            cc.log(\"动画资源在家失败!\")\n            return;\n        }\n        spin.active = true;\n        let ske_0 = spin.getComponent(sp.Skeleton);\n        spin = ske_0;\n        spin.clearTracks();\n        spin.addAnimation(index, anim_name, isloop);\n\n        var timer = setTimeout(() => {\n            clearTimeout(timer)\n            fun && fun()\n        }, .5 * 1000)\n    }\n\n    /**\n     * 判断是否是整数\n     * @param number 传入的值 输入整数返回ture  输入其他返回false\n     */\n    determineIsInteger(number) {\n        if (Number.isInteger(number) == true) {\n            number = number.toString() + \".00\";\n        } else {\n\n        }\n    }\n    /**\n     * 去除整数小数点后的0 或者小数点后两位有0部分去除\n     * @param number 传入的数字\n     */\n    removeAfterInteger(number) {\n        return parseFloat(number);\n\n    }\n\n    //n位小数(四舍五入)\n    roundFun(value, n) {\n        return Number(Math.round(value*Math.pow(10,n))/Math.pow(10,n));\n    }\n\n    //n位小数(无条件舍去)\n    floorFun(value, n) {\n        return Number((Math.floor(Math.round(value*Math.pow(10,n)))/Math.pow(10,n)).toFixed(n));\n    }\n    \n    /**\n     * 保留小数点后两位 去尾法\n     * @param number 传入的数字\n     */\n    removeDecimalpoint(number) {\n        number = number.toFixed(6)\n        let str = number.toString()\n        if (str.includes(\".\")) {\n            return str.substring(0, str.indexOf(\".\") + 3)\n        } else {\n            return str\n        }\n    }\n\n    /**\n     * 整数不显示小数点儿 小数只显示两位且只有一位小数后补0 \n     * @param number 传入的数字\n     */\n    displaytwodecimalplaces(number) {\n        let number1 = number.toString().split(\".\");\n        if (number1.length == 1) {\n            return parseFloat(number);\n        }\n        if (number1.length > 1) {\n            if (number1[1].length < 2) {\n                number = number.toString() + \"0\";\n            }\n            if (number1[1].length > 2) {\n                number = number1[0] + \".\" + number1[1].substring(2, 0);\n            }\n            return number;\n        }\n    }\n    /**\n   * 艺术字体若第一个字体是. 以/代替 然后再转换\n   * @param gold 金币钱数\n   */\n    Conversion(gold: number) {\n        var str: string = \"\";\n        str = gold.toString().replace(\".\", \"/\")\n        return str;\n    }\n    /**\n     * 切换图片\n     * @param node 图片（node节点）\n     * @param url  资源地址 \"路径加资源名\"\n     */\n    loadSpriteFrame(node: any, url: string) {\n        if ( !cc.isValid( node ) ) {\n            return;\n        }\n        let spr = node.getComponent(cc.Sprite);\n        cc.loader.loadRes(url, cc.SpriteFrame, function (err, spriteFrame) {\n            if (err) {\n                cc.log(\"资源加载失败！url:\" + url + \" , Node:\"+ node+ \" , spr:\"+ spr+\"  err=\"+err);\n                return;\n            }\n            if( cc.isValid( spr ) )\n            {\n                spr.spriteFrame = spriteFrame;\n            }\n        });\n    }\n    /**\n       * 切换图集资源\n       * @param node 图片（node节点）\n       * @param atlasurl   \"图片集资源名\"\n       * @param url  资源地址 \"路径加资源名\"\n       */\n    loadSpriteAtlasFrame(node: any, atlasurl: string, url: string) {\n        if (node == null) {\n            return;\n        }\n        cc.loader.loadRes(atlasurl, cc.SpriteAtlas, function (err, atlas) {\n            if (err) {\n                cc.log(\"图片集资源加载失败\");\n                return;\n            }\n            if( cc.isValid( node ) )\n            {\n                let sp = node.getComponent(cc.Sprite);\n                let spm:cc.SpriteFrame = null;\n                if( cc.isValid( atlas ) )\n                {\n                    spm = atlas.getSpriteFrame( url );\n                }\n                if( cc.isValid( sp ) )\n                {\n                    if( cc.isValid( spm ) )\n                    {\n                        sp.spriteFrame = spm;\n                    }\n                }\n            }\n        })\n    }\n    /**\n     * 切换网络图片\n     * @param node 图片（node节点）\n     * @param url  资源地址 \"路径加资源名\"\n     * @param imgtype  图片类型 (png jpg)\n     */\n    loadNetworkSpriteFrame(node: any, url: string, imgtype: string) {\n        if( cc.isValid( node ) )\n        {\n            let spr = node.getComponent(cc.Sprite);\n            cc.loader.load({ url: url, type: imgtype }, (err, img) => {\n                if( err )\n                {\n                    cc.log( \"切换网络图片错误 url=\",url);\n                    return;\n                }\n                if( cc.isValid( spr ) )\n                {\n                    if( cc.isValid( img ) )\n                    {\n                        spr.spriteFrame = new cc.SpriteFrame(img);\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * 图片地址\n     * @param num 图片编号\n     */\n    img(num: number) {\n        var str: string = \"\";\n        switch (num) {\n            case 0: str = \"chips/chip_green-s\"; break;\n            case 1: str = \"chips/chip_blue-s\"; break;\n            case 2: str = \"chips/chip_purple-s\"; break;\n            case 3: str = \"chips/chip_red-s\"; break;\n            case 4: str = \"chips/chip_orange-s\"; break;\n            default:\n                break;\n        }\n        return str;\n    }\n\n    /**\n     * 产生一个随机数 包含上下限\n     * @param lower 最小值\n     * @param upper 最大值\n     */\n    random(lower, upper) {\n        return Math.floor(Math.random() * (upper - lower + 1)) + lower;\n    }\n\n    /**\n         * 分数组方法\n         * @param arr 出入要分的数组\n         * @param num 几个数组为一段\n         */\n    chunk(arr, num) {\n        num = num * 1 || 1;\n        var ret = [];\n        arr.forEach(function (item, i) {\n            if (i % num === 0) {\n                ret.push([]);\n            }\n            ret[ret.length - 1].push(item);\n        });\n        // cc.log(ret);\n        return ret;\n    };\n\n\n}\nexport const configuration = brnnConfiguration.getInstance();\n","/*\n * @Author: ******* \n * @Date: 2019-12-24 13:58:01 \n * @Last Modified by: mikey.zhaopeng\n * @Last Modified time: 2020-01-10 09:44:20\n */\n/**brnn场景GameScene */\nimport { brnnutils } from '../brnnutils/brnnUtils';\nimport { events, EventKind } from '../brnntools/brnn_event';\nimport { configuration } from '../brnnutils/brnnConfiguration';\nimport { brnnanimate } from './brnnAnimate';\nimport { brnnglobal } from '../brnnutils/brnnGlobal';\nimport { audiotool } from '../brnnutils/brnnAudioTool';\nimport { createpoke } from '../brnnutils/brnncreatePoke';\nimport { app } from '../brnntools/brnn_config';\nimport { websocket } from '../brnnnet/brnn_client';\nimport {msg} from '../brnnproto/brnn_proto_msg';\nimport { brnnlanguage } from '../../language/brnnlanguage';\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class brnnGameScene extends cc.Component {\n    @property({ type: cc.Prefab, tooltip: '筹码种类Item' })\n    chip: cc.Prefab[] = [];\n\n    @property({ type: cc.Prefab, tooltip: '胜率输赢item' })\n    winlost: cc.Prefab = null;\n\n    @property({ type: cc.Prefab, tooltip: '上庄item' })\n    sz_item: cc.Prefab = null;\n\n    @property({ type: cc.SpriteAtlas, tooltip: '牌的图片集' })\n    pokerAtlas = null;\n\n    @property({ type: cc.Prefab, tooltip: '上庄列表名字Item' })\n    perlist: cc.Prefab = null;\n\n    @property({ type: cc.Prefab, tooltip: '上庄金币不足提示' })\n    sz_no: cc.Prefab = null;\n\n    @property({ type: cc.Prefab, tooltip: '赌神星星流光粒子特效' })\n    streamer: cc.Prefab = null;\n\n    @property({ type: cc.Prefab, tooltip: '赢家面板预制体' })\n    Winpanl: cc.Prefab = null;\n\n    @property({ type: cc.Prefab, tooltip: '输家面板预制体' })\n    Losepanl: cc.Prefab = null;\n\n    @property({ type: cc.Node, tooltip: '上庄小面板' })\n    prepoker: cc.Node = null;\n\n    @property({ type: cc.Button, tooltip: '筹码按钮' })\n    grp_chip_btn: cc.Button[] = [];\n\n    @property({ type: cc.Node, tooltip: '提示' })\n    tips: cc.Node = null;\n\n    @property({ type: cc.Prefab, tooltip: '弹窗预制体' })\n    Messeagebox: cc.Prefab = null;\n\n    public myhead = null;\n    public bankerHead = null;\n\n    public btn_back = null;\n    public btn_trend = null;\n    public btn_help = null;\n    public btn_shouqi = null;\n    public btn_sz = null;\n    public btn_qx = null;\n    public btn_xz = null;\n    public btn_continvot = null;\n    public xutou_numbg = null;\n    public vot_num = null;\n    public Grp_cz = null;\n    public rulepanl = null; //规则面板\n    public ratePanl = null;//胜率面板\n    public winlos_node = null;\n    public toggle = null;//胜率面板toggle\n    public lab_winrate0 = null;\n    public lab_winrate1 = null;\n    public lab_winrate2 = null;\n    public lab_winrate3 = null;\n    public SzPanl = null;//上庄面板\n    public p_btn_clear = null;\n    public btn_applysz = null;\n    public btn_applyxz = null;\n    public btn_cancelapply = null;\n\n    public GameLayer = null;\n    public rare_scrollw = null;//胜率列表scroll\n    public biao_mid1 = null;\n    public biao_mid2 = null;\n    public roomtype = null;//胜率列表房间类型\n    public spin_kaishi = null;//开始下注动画\n    public spin_tingzhi = null;//停止下注动画\n    public wl_start_stop_anim = null;\n    public spin_watch = null;//观看动画\n    public tipstate_qxz = null;\n    public tipstate_qdd = null;\n    public _state = null;\n    public _timer_lab_qxz = null;//请下注时间\n    public _timer_lab_qdd = null;//请等待时间\n    public pre_xiala = null;\n    public perPokeScrollow = null;\n    public prepoker_num = null;\n    public sz_inputEditBox = null;//上庄输入框\n\n    public starparPos: cc.Vec2 = null;//存储赌神星星初始轨迹位置\n    public waitsp = null;//请耐性等待下一局\n    public wachtip = null;//当前玩家金币不足观战提示\n    public Promptbox = null;//上庄输入框\n    public beichang = null;//倍场\n    public banker_tip = null;//庄家提示\n    public jiazaiAnim = null;//加载动画\n\n    private roomTypeBet: number = 0;//房间类型倍场 \n    private initHeadPos = [];//存储玩家头像位置\n    private playerHead = [];         //储存玩家头像\n    private orginPlayerCardPos = [];    // 存储玩家扑克位置\n    private cardpoke = [];    // 存储所有扑克\n    private carrd_node = [];    // 存储玩家扑克大节点\n    private win_gold = [];  //存储玩家赢飘字lab\n    private winlose_gold_pos = [];  //存储玩家飘字lab位置\n    private lose_gold = [];  //存储玩家输飘字lab\n    private quanti = [];            //筹码区域\n    private twink = [];               //存储闪烁的桌子节点 \n    private tableNum = [];               //存储筹码区筹码num lab\n    private p_coin = [];               //存储闪烁的coin\n    private vot = [];               //存储筹码区上一局續投量\n    private di_bg = [];               //存储筹码区底部bg\n    private xinxin = [];                //星星\n    private myw_gold_lab = [];         //存储当前玩家投注每个筹码区域后输赢金币lab\n    private myl_gold_lab = [];\n    private isprepoker: boolean = true;   //是否打开上庄列表\n    private df_sc_y: number = -1;\n    private my_sz_gold: number = 0;//玩家上庄金额\n    private initRateContentPos: cc.Vec2 = cc.v2(0, 0);//初始胜率列表content的pos\n    private isSwitchScreen: boolean = false;//是否切换过屏幕\n\n    private type: string = '';\n    private region: number[] = [-1];\n    private mytotalvot: number = 0;//玩家自己续投总额\n    private votgold: number[] = [0, 0, 0, 0];//續投籌碼池金額\n    private votgold1: number[] = [0, 0, 0, 0];//續投籌碼池金額\n    private eachtypevotcount: number[][] = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]];//續投每个筹码池每一种筹码的数量\n    private eachtypevot: number[][] = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]];//續投每个筹码池每一种筹码的数量\n    private sumbetarea: number = 0;//所有下注区域总和\n    private iscontinue: number = -1;//(0:不能续投，1：能续投)\n    private ischecked: boolean = true;//胜率面板toggle 是否选中\n    private now_isbet: boolean = false;//本局玩家是否下过注\n    private isApplySz: boolean = false;//是否点击申请过上庄\n    private iscancel: boolean = false;//是否点击取消申请\n    private isApplyxz: boolean = false;//是否点击申请过下庄\n    private isclickBtn_back: boolean = false;//是否点击过退出游戏按钮\n    private isclicki_Btn_enter: boolean = false;//是否点击过退出面板确定按钮\n\n    private isSettle: boolean = false;//本局是否已结算\n    private isCheckAfter: boolean = false;//是否在结算后申请上庄/取消申请\n\n    private s_timer0: any = null;\n    private s_timer1: any = null;\n    private s_timer2: any = null;\n    private s_timer3: any = null;\n    private s_timer4: any = null;\n    private s_timer5: any = null;\n    private s_timer6: any = null;\n    private s_timer7: any = null;\n    private s_timer8: any = null;\n    private s_timer11: any = null;\n    private s_timer12: any = null;\n\n    private reconnected:boolean = false;\n\n    private playbetAudioMax = 3;\n    private playbetAudioCount = 0;\n\n    private init(): void {\n        this.beichang = cc.find('Canvas/UI/beichang');\n        this.Promptbox = cc.find('Canvas/Promptbox');\n        this.myhead = cc.find('Canvas/Centerlayer/head_player_7');\n        \n        this.Grp_cz = cc.find('Canvas/Centerlayer/group_cz');//筹码层\n\n        this.spin_kaishi = cc.find('Canvas/wl_start_stop_anim/ani_kaishi');//开始下注\n        this.spin_tingzhi = cc.find('Canvas/wl_start_stop_anim/ani_tingzhi'); //停止下注\n        this.wl_start_stop_anim = cc.find('Canvas/wl_start_stop_anim');\n        \n        this.tipstate_qxz = cc.find('Canvas/Tips/tipstate_qxz');//提示遊戲狀態\n        this.tipstate_qdd = cc.find('Canvas/Tips/tipstate_qdd');//提示遊戲狀態\n        this._state = cc.find('Canvas/Tips/tipstate/gamestate');\n        this._timer_lab_qxz = cc.find('Canvas/Tips/tipstate_qxz/gstate_time');\n        this._timer_lab_qdd = cc.find('Canvas/Tips/tipstate_qdd/gstate_time');\n        configuration.loadSpriteFrame( cc.find(\"Canvas/Tips/tipstate_qdd/gamestate\"), \"brnn/language/\" + brnnlanguage.getCurLanguage() + '/p_prepare');\n        configuration.loadSpriteFrame( cc.find(\"Canvas/Tips/tipstate_qxz/gamestate\"), \"brnn/language/\" + brnnlanguage.getCurLanguage() + '/p_xiazhu');\n        this.tipstate_qxz.active = false;\n        this.tipstate_qdd.active = false;\n       \n        this.sz_inputEditBox = cc.find('Canvas/SzPanl/Sz_money_EditBox');\n        this.waitsp = cc.find('Canvas/Tips/wait_bg');\n        this.judgeSzCondition();\n        this.jiazaiAnim = cc.find('Canvas/jiazai');\n        this.jiazaiAnim.active = false;\n        this.tips.active = true;\n\n        for (let i = 0; i < 2; i++) {\n            let star = cc.find('Canvas/UIlayer/p_star_' + i);\n            this.xinxin.push(star);\n        }\n        for (let i = 0; i < 2; i++) {\n            let my_w_gold = cc.find('Canvas/FloatWordlayer/my_w_gold_' + i);\n            let my_l_gold = cc.find('Canvas/FloatWordlayer/my_l_gold_' + i);\n            this.myw_gold_lab.push(my_w_gold);\n            this.myl_gold_lab.push(my_l_gold);\n        }\n        //闪烁的桌子  //筹码每个区域总数\n        for (let i = 0; i < 4; i++) {\n            let quantity_ = cc.find('Canvas/UIlayer/quantity_' + i);\n            this.quanti.push(quantity_);\n            if( cc.isValid( quantity_ ))\n            {\n                let filck = quantity_.getChildByName('twink');\n                this.twink.push(filck);\n                let p_coin = quantity_.getChildByName('vot').getChildByName('p_coin');\n                this.p_coin.push(p_coin);\n                let vot_lab = quantity_.getChildByName('vot').getChildByName('vot_num');\n                this.vot.push(vot_lab);\n                let total_chip_num = quantity_.getChildByName('table_num');\n                this.tableNum.push(total_chip_num);\n                let di_bg__ = quantity_.getChildByName('di_bg');\n                this.di_bg.push(di_bg__);\n            }\n            else\n            {\n                this.twink.push(null);\n                this.p_coin.push(null);\n                this.vot.push(null);\n                this.tableNum.push(null);\n                this.di_bg.push(null);\n            }\n        }\n\n        for (let i = 0; i < 5; i++) {\n            this.grp_chip_btn[i].interactable = false;\n        }\n        this.win_gold = [];\n        this.lose_gold = [];\n        this.winlose_gold_pos = [];\n        //输赢飘字\n        for (let i = 0; i < 8; i++) {\n            let win_lab = cc.find('Canvas/Centerlayer/head_player_' + i + '/p_eff_win_' + i);\n            let lose_lab = cc.find('Canvas/Centerlayer/head_player_' + i + '/p_eff_lose_' + i);\n            this.win_gold.push(win_lab);\n            this.lose_gold.push(lose_lab);\n            \n            if( cc.isValid( this.win_gold[i] ) )\n            {\n                this.win_gold[i].active = false;\n                this.winlose_gold_pos.push(win_lab.position);\n            }\n            else\n            {\n                this.winlose_gold_pos.push( cc.v2() );\n            }\n            if( cc.isValid( this.lose_gold[i] ))\n            {\n                this.lose_gold[i].active = false;\n            }\n        }\n        this.initHeadPos = [];\n        this.playerHead = [];\n        //玩家头像初始pos\n        for (let i = 0; i < 9; i++) {\n            let head = cc.find('Canvas/Centerlayer/head_player_' + i);\n            let headpos: cc.Vec2 = cc.v2();\n            if( cc.isValid( head ) )\n            {\n                head.x = cc.winSize.width * (head.x / 1334);\n                // head.y = cc.winSize.width * (head.y / 1334);\n                headpos = cc.v2(head.x, head.y);\n            }\n            this.initHeadPos.push(headpos);\n            this.playerHead.push(head);\n        }\n\n        //玩家所有牌pos\n        for (let i = 0; i < 3; i++) {\n            var cardPos = [];\n            for (var j = 0; j < 5; j++) {\n                var card = cc.find('Canvas/Card/carrd_node_' + i + '/poker_' + j);\n                this.cardpoke.push(card);\n                cardPos[j] = card.position;\n            }\n            this.orginPlayerCardPos[i] = cardPos;\n        }\n\n        //牌的大节点carrd_node\n        for (let k = 0; k < 3; k++) {\n            var pukeNode = cc.find('Canvas/Card/carrd_node_' + k);\n            this.carrd_node.push(pukeNode);\n        }\n\n        this.initSzList();\n        this.getInitWinRate();\n        this.votgold1 = [0, 0, 0, 0];//續投籌碼池金額\n        this.eachtypevot = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]];\n        this.my_sz_gold = 0;\n        \n    }\n\n    private initdata(): void {\n        this.spin_kaishi.active = false;\n        this.spin_tingzhi.active = false;\n\n        this.tipstate_qxz.active = false;\n        this.tipstate_qdd.active = false;\n\n        for (let i = 0; i < this.xinxin.length; i++) {\n            if( cc.isValid( this.xinxin[i] ) )\n            {\n                this.xinxin[i].active = false;\n            }\n        }\n        for (let i = 0; i < this.myw_gold_lab.length; i++) {\n            if( cc.isValid( this.myw_gold_lab[i] ) )\n            {\n                this.myw_gold_lab[i].active = false;\n            }\n            if( cc.isValid( this.myl_gold_lab[i] ))\n            {\n                this.myl_gold_lab[i].active = false;\n            }\n        }\n        for (let i = 0; i < 4; i++) {\n            if( cc.isValid( this.twink[i] ) )\n            {\n                this.twink[i].active = false;\n            }\n            if( cc.isValid( this.tableNum[i] ) )\n            {\n                this.tableNum[i].getComponent(cc.Label).string = \"0\";\n                this.tableNum[i].active = false;\n            }\n            if( cc.isValid( this.p_coin[i] ) )\n            {\n                this.p_coin[i].active = false;\n            }\n            if( cc.isValid( this.vot[i] ))\n            {\n                this.vot[i].active = false;\n            }\n            if( cc.isValid( this.di_bg[i] ))\n            {\n                this.di_bg[i].active = false;\n            }\n        }\n        for (let i = 0; i < this.playerHead.length - 2; i++) {\n            if( cc.isValid( this.playerHead[i] ) )\n            {\n                if( cc.isValid( this.playerHead[i].getChildByName('p_win_light') ))\n                {\n                    this.playerHead[i].getChildByName('p_win_light').active = false\n                }\n            }\n        }\n        for (let i = 0; i < this.cardpoke.length; i++) {\n            if( cc.isValid( this.cardpoke[i] ))\n            {\n                this.cardpoke[i].active = false;\n                this.cardpoke[i].getChildByName('back').active = true;\n            }\n        }\n\n        for (let k = 0; k < 5; k++) {\n            if( cc.isValid( this.carrd_node[k] ) )\n            {\n                let cover = this.carrd_node[k].getChildByName('pai_cover');\n                cover.active = false;\n                cover.getChildByName('crad_type').getChildByName('cheng').active = false;\n                cover.getChildByName('crad_type').getChildByName('niu_bet').active = false;\n            }\n        }\n        if( cc.isValid( this.waitsp ) )\n        {\n            this.waitsp.active = false;\n        }\n\n    }\n    /**初始化上庄列表 */\n    private initSzList() {\n        this.updatePreBankList(configuration.PrePokerList);\n    }\n    onLoad() {\n        audiotool.loadSoundsRes( this.node );\n        this.isone = 0;\n        this.init();\n        this.initdata();\n        this.addBankerInfo(configuration.JoinRoomR);\n        this.addPlayerInfo();\n        // this.JudgeGametype();\n        // this.judgeIsPlay();\n        this.addOrdinaryEventListener();\n        this.addInterEventListener();\n\n        websocket.init();\n        websocket.setCurSceneRootNode( this.node );\n        brnnutils.setMessageBoxPrefab( this.Messeagebox );\n        this.whetherPlayAudio();\n    }\n    start() {\n        this.gameProcess();\n        \n        // 下注阶段进入房间 更新玩家下注记录\n        if( this.roomstate == 1 )\n        {\n            this.votgold = configuration.JoinRoomR.mybet_list;\n            for (let i = 0; i < configuration.JoinRoomR.mybet_list.length; i++) {\n                this.eachtypevotcount[i] = createpoke.DiffentChipArea(configuration.JoinRoomR.mybet_list[i]);\n            }\n        }\n        cc.game.on(cc.game.EVENT_HIDE, this.gameHideBackgroundAction.bind( this ), this);\n        cc.game.on(cc.game.EVENT_SHOW, this.gameShowAction.bind( this), this);\n\n        this.whetherPlayAudio();\n\n        this.scheduleOnce( ()=>{\n            let tempnode = cc.find( \"UI/brnn_bg\" , this.node );\n            if( cc.isValid( tempnode ) )\n            {\n                let tempWidget = tempnode.getComponent( cc.Widget );\n                if( cc.isValid( tempWidget ) )\n                {\n                    tempWidget.alignMode = cc.Widget.AlignMode.ON_WINDOW_RESIZE;\n                }\n            }\n\n            tempnode = cc.find( \"UI/bottom_layer/p_bottom\" , this.node );\n            if( cc.isValid( tempnode ) )\n            {\n                let tempWidget = tempnode.getComponent( cc.Widget );\n                if( cc.isValid( tempWidget ) )\n                {\n                    tempWidget.alignMode = cc.Widget.AlignMode.ON_WINDOW_RESIZE;\n                }\n            }\n\n            if( cc.isValid( this.btn_back ) )\n            {\n                this.btn_back.getComponent(cc.Button).interactable = true;\n            }\n        },1)\n    }\n    /**\n      * 是否播放音效\n      */\n    whetherPlayAudio() {\n    }\n    /**\n     * 游戏进入后台\n     */\n    gameHideBackgroundAction() {\n        cc.log(\"=================游戏进入后台1===================\");\n        if( !cc.isValid( this.node ) )return;\n        this.unscheduleAllCallbacks();\n        this.node.stopAllActions();\n        this.removeInterEventListener();\n        this.removeDelayTimer();\n        this.restCradChip();\n        this.isSwitchScreen = true;\n        websocket.closeWebsock();\n    }\n    /**\n     * 游戏进入前台\n     */\n    gameShowAction() {\n        cc.log(\"=================游戏进入前台2===================\");\n        //重新监听\n        this.addInterEventListener();\n        this.reConnect();\n        this.addBankerInfo(configuration.PrePokerList);\n        this.addPlayerInfo();\n        this.isSwitchScreen = true;\n        this.isclickBtn_back = false;\n        websocket.init();\n    }\n    private addOrdinaryEventListener() {\n        \n        \n        this.onGenZhuClick();\n    }\n    private addInterEventListener() {\n        events.register(EventKind.S2C_PreBanker, \"brnnGameScene\", this.prePokerErr.bind(this));//上庄错误\n        events.register(EventKind.S2C_PreBankerList, \"brnnGameScene\", this.prePokerList.bind(this));//上庄列表\n        // events.register(EventKind.S2C_PlayerBet, \"brnnGameScene\", this.PlayerBet2.bind(this));//玩家下注\n        events.register(EventKind.S2C_OpenLoterry, \"brnnGameScene\", this.LotteryResult.bind(this));//开奖结果\n        events.register(EventKind.S2C_ShowPlayerList, \"brnnGameScene\", this.storageT_p.bind(this));//储存桌上玩家信息\n        events.register(EventKind.S2C_ExitPreBanker, \"brnnGameScene\", this.cancalApply.bind(this));//申请退出上庄列表\n        events.register(EventKind.S2C_mbankerChange, \"brnnGameScene\", this.storageCb.bind(this));//换庄下庄\n        events.register(EventKind.S2C_SzModifgold, \"brnnGameScene\", this.changeMyGold.bind(this));\n        events.register(EventKind.S2C_playerExitRoom, \"brnnGameScene\", this.isOutroom.bind(this));//是否成功退出房间\n\n        events.register(EventKind.S2C_ServerconnectClose, \"brnnGameScene\", this.serverClose.bind(this));\n        events.register(EventKind.S2CEnterRoom, \"brnnGameScene\", this.renewJionRoom.bind(this));//断线重连重新接受进入房间信息\n        events.register(EventKind.S2C_RenewPlayerList, \"brnnGameScene\", this.storageT_p.bind(this));//断线重连重新接受储存桌上玩家信息\n        events.register(EventKind.S2C_RenewpreBankerList, \"brnnGameScene\", this.prePokerList.bind(this));//断线重连重新接受上庄列表\n\n        events.register(EventKind.S2C_Self, \"brnnGameScene\", this.reEnterRoom.bind(this));//断线重连重进房间\n\n        events.register(EventKind.S2C_GameStart, \"brnnGameScene\", this.S2C_GameStart.bind(this));//断线重连重进房间\n        events.register(EventKind.S2C_GameStartBet, \"brnnGameScene\", this.S2C_GameStartBet.bind(this));//断线重连重进房间\n        events.register(EventKind.S2C_GameAward, \"brnnGameScene\", this.S2C_GameAward.bind(this));//断线重连重进房间\n    }\n    /**\n   * 筹码点击事件\n   * @param event 点击筹码事件\n   * @param customIndex 点击筹码对应的下标\n   */\n    chipRecordIndex = 0;//\n    touchChooseChip(event, customIndex) {\n        if (configuration.UserInfo.gold < createpoke.JudgeChipValue(customIndex)) {\n            this.grp_chip_btn[customIndex].getComponent(cc.Button).interactable = false;\n            return;\n        }\n        audiotool.play_audioSource(audiotool.LoadAudio(25));\n        if (customIndex !== this.chipRecordIndex && brnnglobal.isxz == true) {\n            //选中筹码\n            let currentChipNode = this.grp_chip_btn[customIndex];\n            if (this.chipRecordIndex !== -1) {\n                //上次选择的筹码节点\n                let lastChipNode = this.grp_chip_btn[this.chipRecordIndex];\n                lastChipNode.node.getChildByName('p_chip_circle').active = false;\n                lastChipNode.node.y = 0;\n            }\n            //选中的筹码\n            currentChipNode.node.y = 20;\n            currentChipNode.node.getChildByName('p_chip_circle').active = true;\n            //记录当前筹码下标\n            this.chipRecordIndex = Number(customIndex);\n        }\n    }\n    /**玩家跟注 */\n    public onGenZhuClick() {\n        for (let j = 0; j < this.quanti.length; j++) {\n            if( cc.isValid( this.quanti[j] ) )\n            {\n                this.quanti[j].on('touchstart', (event)=> {\n                    audiotool.play_audioSource(audiotool.LoadAudio(26));\n                    if (this.chipRecordIndex < 0) {\n                        cc.log(\"先选择筹码\")\n                        return;\n                    }\n    \n                    let roomBeiNum: number = 2;\n                    let type = (configuration.JoinRoomR.name).substr(0, 7);\n                    \n                    let votCount:number = 0;\n                    for( let VotIndex = 0; VotIndex < this.votgold.length; VotIndex++ )\n                    {\n                        votCount += this.votgold[ VotIndex ];\n                    }\n\n                    \n                    // if ( ( createpoke.JudgeChipValue( this.chipRecordIndex ) + votCount ) * roomBeiNum > configuration.UserInfo.gold )\n                    // {\n                    //     this.errTipPrefab(brnnlanguage.getTextByID(11));\n                    //     return;\n                    // }\n                    let index = event.target.name.substr(event.target.name.length - 1);\n\n                    let msg = {\n                        area: parseInt(index),\n                        amount: createpoke.JudgeChipValue(this.chipRecordIndex) \n                    }\n                    \n                    if (brnnglobal.isxz == true) {\n                        events.dispatch(EventKind.C2S_PlayerBet, msg);\n                    } else {\n                        if (brnnglobal.enoughgold) {\n                            cc.log('點擊籌碼池區域,非下注状态');\n                        } else {\n                            this.errTipPrefab( brnnlanguage.getTextByID(8) );\n                        }\n                    }\n                }, this);\n            }\n        }\n        cc.log('點擊籌碼池區域了');\n    }\n    public isclickxt: boolean = false;//是否点击续投\n    private onBtnClicked() {\n        let total = 0;//上一把当前玩家下注金额（续投）\n        let mytotal = 0;//当局当前玩家下注\n        let isxt: boolean = false;\n        for (let value of this.votgold1) {\n            total += value;\n        }\n        for (let value of this.votgold) {\n            mytotal += value;\n        }\n        if (this.type == 'rongyao') {\n            cc.log('+++++++++++++++++++++', total, this.sumbetarea, configuration.JoinRoomR.banker.lgold, mytotal, configuration.UserInfo.gold);\n            if (total <= 4000 &&\n                (total + this.sumbetarea) * 5 <= configuration.JoinRoomR.banker.lgold &&\n                (mytotal + total) * 5 <= configuration.UserInfo.gold) {\n                isxt = true;\n            } else {\n                isxt = false;\n            }\n        } else {\n            if (total <= 2000 &&\n                (total + this.sumbetarea) * 5 <= configuration.JoinRoomR.banker.lgold &&\n                (mytotal + total) * 5 <= configuration.UserInfo.gold) {\n                isxt = true;\n            } else {\n                isxt = false;\n            }\n        }\n        cc.log('点击续投', this.type, this.votgold1, total, isxt, this.votgold, this.sumbetarea);\n        if (isxt == true) {\n            let data = [];\n            for (let i = 0; i < this.eachtypevot.length; i++) {\n                for (let j = 0; j < this.eachtypevot[i].length; j++) {\n                    for (let m = 0; m < this.eachtypevot[i][j]; m++) {\n                        data.push({\n                            bet_type: i,\n                            betnum: j\n                        })\n                    }\n                }\n            }\n            let msg = {\n                id: 16,\n                data:JSON.stringify(data),\n            }\n            events.dispatch(EventKind.C2S_Voting, msg);\n        } else {\n            this.errTipPrefab( brnnlanguage.getTextByID(9) );\n        }\n\n        this.isclickxt = true;\n        this.iscontinue = 0;\n        this.btn_continvot.getComponent(cc.Button).interactable = false;\n        this.xutou_numbg.active = false;\n    }\n\n\n    private onclick(targetname: string) {\n        if (targetname == \"btn_back\") {\n            if (this.isclickBtn_back == false) {\n                audiotool.play_audioSource(audiotool.LoadAudio(24));\n                let callback = ()=>{\n                    this.isclickBtn_back = false;\n                }\n                if (this.now_isbet == false) {\n                    let bankerid = brnnglobal.isChangbanker?configuration.ChangeBanker.pre_banker.id:configuration.ChangeBanker.banker.id;\n                    let hasme = false;\n                    if( configuration.PrePokerList.banker_list instanceof Array )\n                    {\n                        for( let bankListIndex = 0;bankListIndex < configuration.PrePokerList.banker_list.length; bankListIndex++ )\n                        {\n                            if( configuration.PrePokerList.banker_list[ bankListIndex ].id == configuration.UserInfo.id )\n                            {\n                                hasme = true;\n                                break;\n                            }\n                        }\n                    }\n                    if ( bankerid != configuration.UserInfo.id &&\n                        !hasme ) \n                    {\n                        let msg = {\n                            id: 11,\n                            data: JSON.stringify({\n                                isok: true\n                            }),\n                        }\n                        cc.director.preloadScene('brnn', ()=>{\n                            brnnglobal.isHallBtnClicked = false;\n                            events.dispatch(EventKind.C2S_playerExitRoom, msg);\n                        })\n                    } else {\n                        brnnutils.showMessageBox( this.node , brnnlanguage.getTextByID(6), callback.bind( this ) , callback.bind( this ) );\n                    }\n                } else {\n                    brnnutils.showMessageBox( this.node , brnnlanguage.getTextByID(6) , callback.bind( this ), callback.bind( this ));\n                }\n                this.isclickBtn_back = true;\n            }\n        }\n        else if (targetname == \"btn_trend\") {\n            audiotool.play_audioSource(audiotool.LoadAudio(24));\n            this.ratePanl.active = true;\n            this.ratePanl.stopAllActions();\n\n            this.ratePanl.runAction(\n                cc.sequence( cc.moveTo(0.5, cc.v2(0, 0)) ,\n                             cc.delayTime( 0.1 ),\n                             cc.callFunc( ()=>{\n                                if( cc.isValid( this.ratePanl ) )\n                                {\n                                    let lupan_bg = cc.find( \"lupan_bg\" , this.ratePanl );\n                                    if( cc.isValid( lupan_bg ) )\n                                    {\n                                        let lupan_bgWidget = lupan_bg.getComponent(cc.Widget);\n                                        if( cc.isValid( lupan_bgWidget ) )\n                                        {\n                                            lupan_bgWidget.alignMode = cc.Widget.AlignMode.ON_WINDOW_RESIZE;\n                                        }\n                                    }\n                                }\n                             }),\n            ));\n        }\n        else if (targetname == \"btn_help\") {\n            audiotool.play_audioSource(audiotool.LoadAudio(24));\n            this.rulepanl.active = true;\n            this.rulepanl.stopAllActions();\n            this.rulepanl.runAction(\n                cc.moveTo(0.5, cc.v2(-this.rulepanl.width / 2, 0))\n            );\n        }\n        else if (targetname == \"btn_shouqi\") {\n            audiotool.play_audioSource(audiotool.LoadAudio(24));\n            this.ratePanl.stopAllActions();\n            this.ratePanl.runAction(\n                cc.moveTo(0.5, cc.v2(0, this.ratePanl.height))\n            );\n        }\n        else if (targetname == \"prepoker\") {\n            audiotool.play_audioSource(audiotool.LoadAudio(24));\n            this.perPokeScrollow.active = this.isprepoker;\n            this.pre_xiala.scaleY = this.df_sc_y;\n            this.isprepoker = !(this.isprepoker);\n            this.df_sc_y = -(this.df_sc_y);\n        }\n        else if (targetname == \"btn_sz\") {\n            audiotool.play_audioSource(audiotool.LoadAudio(24));\n            let roomname = (configuration.JoinRoomR.name).substr(0, 7);\n            let mygold = this.my_sz_gold + configuration.UserInfo.gold;\n            if (roomname == 'rongyao') {\n                if (mygold >= 5000) {\n                    this.SzPanl.active = true;\n                } else {\n                    this.errTipPrefab( brnnlanguage.getTextByID(12) + '5000' + brnnlanguage.getTextByID(13) );\n                }\n            } else if (roomname == 'chuanqi') {\n                if (mygold >= 10000) {\n                    this.SzPanl.active = true;\n                } else {\n                    this.errTipPrefab( brnnlanguage.getTextByID(12) + '10000' + brnnlanguage.getTextByID(13));\n                }\n            }\n            if ( configuration.PrePokerList.banker.id == configuration.UserInfo.id) {\n                this.btn_applysz.active = false;\n                this.btn_cancelapply.active = false;\n                this.btn_applyxz.active = true;\n            }\n        }\n        else if (targetname == \"btn_qx\") {\n            audiotool.play_audioSource(audiotool.LoadAudio(24));\n            this.SzPanl.active = true;\n        }\n        else if (targetname == \"btn_xz\") {\n            audiotool.play_audioSource(audiotool.LoadAudio(24));\n            this.SzPanl.active = true;\n        }\n        else if (targetname == \"p_btn_clear\") {\n            audiotool.play_audioSource(audiotool.LoadAudio(24));\n            this.SzPanl.active = false;\n            this.isApplySz = false;\n            this.isApplyxz = false;\n            this.iscancel = false;\n        }\n        else if (targetname == \"btn_applysz\") {\n            audiotool.play_audioSource(audiotool.LoadAudio(24));\n            let content = this.sz_inputEditBox.getComponent(cc.EditBox).string;\n            let roomname = (configuration.JoinRoomR.name).substr(0, 7);\n            if (roomname == 'rongyao') {\n                if (content < 5000) {\n                    this.errTipPrefab( brnnlanguage.getTextByID(12) + '5000' + brnnlanguage.getTextByID(13) );\n                    return;\n                }\n            } else if (roomname == 'chuanqi') {\n                if (content < 10000) {\n                    this.errTipPrefab( brnnlanguage.getTextByID(12) + '10000' + brnnlanguage.getTextByID(13));\n                    return;\n                }\n            }\n\n            let total = 0;//当局下注总金额\n            let maxnum = 0;//最大下注赔付金额\n            for (let value of this.votgold) {\n                total += value;\n            }\n            maxnum = this.roomTypeBet * total;\n\n            if (this.iscancel == false) {\n                let msg = {\n                    id: 5,\n                    data: JSON.stringify({\n                        gold: Number(content)  //上庄金额\n                    }),\n                }\n                let number1 = parseInt(content);\n                if (number1.toString() == content) {//上庄只能上整数\n                    if (configuration.UserInfo.gold - maxnum >= parseInt(content)) {\n                        events.dispatch(EventKind.C2S_PreBanker, msg);\n                    } else {\n                        this.errTipPrefab( brnnlanguage.getTextByID(14) );\n                    }\n                } else {\n                    this.errTipPrefab( brnnlanguage.getTextByID(15) );\n                }\n\n            } else {\n                this.errTipPrefab( brnnlanguage.getTextByID(16) );\n            }\n        }\n        else if (targetname == \"btn_applyxz\") { //申请下庄\n            audiotool.play_audioSource(audiotool.LoadAudio(24));\n            if (this.isApplyxz == false) {\n                let msg = {\n                    id: 8,\n                    data: JSON.stringify({\n                    }),\n                }\n                this.isApplyxz = true;\n                this.errTipPrefab( brnnlanguage.getTextByID(17) );\n                events.dispatch(EventKind.C2S_mbankerChange, msg);\n            } else {\n                this.errTipPrefab( brnnlanguage.getTextByID(16) );\n            }\n        } else if (targetname == \"btn_cancelapply\") {  //申请退出上庄列表\n            audiotool.play_audioSource(audiotool.LoadAudio(24));\n            if (this.isApplySz == false) {\n                let msg = {\n                    id: 6,\n                    data: JSON.stringify({\n                    }),\n                }\n                events.dispatch(EventKind.C2S_ExitPreBanker, msg);\n            } else {\n                this.errTipPrefab( brnnlanguage.getTextByID(16) );\n            }\n        }\n        // else if (targetname == this.rulepanl.name) {\n        //     this.rulepanl.stopAllActions();\n        //     this.rulepanl.runAction(\n        //         cc.moveTo(0.5, cc.v2(this.rulepanl.width / 2, 0))\n        //     );\n        // }\n        // else if (targetname == this.toggle.name) {\n        //     audiotool.play_audioSource(audiotool.LoadAudio(24));\n        //     this.ischecked = !this.ischecked;\n        // }\n        // else if (targetname == this.trumpetbg.name) {\n        // }\n    }\n    /**\n     * @param 错误提示\n     */\n    private errTipPrefab(tipStr: string) {\n        let sz_noenought_tip = cc.instantiate(this.sz_no);\n        let tip_lab = sz_noenought_tip.getChildByName('tip_lab');\n        if (tipStr == brnnlanguage.getTextByID(12) + '5000' + brnnlanguage.getTextByID(13)) {\n            tip_lab.getComponent(cc.Label).string = tipStr;\n        } else if (tipStr == brnnlanguage.getTextByID(12) + '10000' + brnnlanguage.getTextByID(13)) {\n            tip_lab.getComponent(cc.Label).string = tipStr;\n        } else if (tipStr == brnnlanguage.getTextByID(16) ) {\n            tip_lab.getComponent(cc.Label).string = tipStr;\n        } else if (tipStr == brnnlanguage.getTextByID(17) ) {\n            tip_lab.getComponent(cc.Label).string = tipStr;\n        } else if (tipStr == brnnlanguage.getTextByID(15) ) {\n            tip_lab.getComponent(cc.Label).string = tipStr;\n        } else if (tipStr == brnnlanguage.getTextByID(9)) {\n            tip_lab.getComponent(cc.Label).string = tipStr;\n        } else if (tipStr == brnnlanguage.getTextByID(14) ) {\n            tip_lab.getComponent(cc.Label).string = tipStr;\n        } else if (tipStr == brnnlanguage.getTextByID(8) ) {\n            tip_lab.getComponent(cc.Label).string = tipStr;\n        }\n        else if (tipStr == brnnlanguage.getTextByID(11)) {\n            tip_lab.getComponent(cc.Label).string = tipStr;\n        }\n        this.node.addChild(sz_noenought_tip);\n        sz_noenought_tip.getComponent('promptbox').initPrompt();\n    }\n    /**判断上庄条件*/\n    private judgeSzCondition() {\n        let type = (configuration.JoinRoomR.name).substr(0, 7);\n        if (type == 'rongyao') {\n            this.sz_inputEditBox.getComponent(cc.EditBox).string = 5000 + '';\n        } else if (type == 'chuanqi') {\n            this.sz_inputEditBox.getComponent(cc.EditBox).string = 10000 + '';\n        }\n    }\n    /**判断当前玩家是否可以游戏 */\n    private judgeIsPlay() {\n        let type = 'rongyao';\n        this.type = type;\n        brnnglobal.roomname = configuration.JoinRoomR.name;\n        cc.log('进入房间的类型', brnnglobal.roomname , \"configuration.UserInfo.gold=\",configuration.UserInfo.gold);\n        if (type == 'rongyao') {\n            if (configuration.UserInfo.gold < 30) {\n\n                if( cc.isValid( this.spin_watch ) )\n                {\n                    this.spin_watch.active = true;\n                }\n                if( cc.isValid( this.wachtip ) )\n                {\n                    this.wachtip.active = true;\n                    this.wachtip.getComponent(cc.Label).string = brnnlanguage.getTextByID(10) + 30 + brnnlanguage.getTextByID(31);\n                }\n                this.wicthingAnim();\n                brnnglobal.isxz = false;\n                brnnglobal.enoughgold = false;\n            } else {\n                if( cc.isValid( this.wachtip ) )\n                {\n                    this.wachtip.active = false;\n                }\n\n                if( cc.isValid( this.spin_watch ) )\n                {\n                    this.spin_watch.active = false;\n                }\n                brnnglobal.enoughgold = true;\n            }\n            this.roomTypeBet = 5;\n            configuration.loadSpriteFrame(this.beichang, \"brnn/language/\" + brnnlanguage.getCurLanguage() + '/10beichang');\n        } else if (type == 'chuanqi') {\n            if (configuration.UserInfo.gold < 50) {\n                \n                if( cc.isValid( this.spin_watch ) )\n                {\n                    this.spin_watch.active = true;\n                }\n                if( cc.isValid( this.wachtip ) )\n                {\n                    this.wachtip.active = true;\n                    this.wachtip.getComponent(cc.Label).string = brnnlanguage.getTextByID(10) + 50 + brnnlanguage.getTextByID(31);\n                }\n                this.wicthingAnim();\n                brnnglobal.isxz = false;\n                brnnglobal.enoughgold = false;\n            } else {\n                if( cc.isValid( this.wachtip ) )\n                {\n                    this.wachtip.active = false;\n                }\n\n                if( cc.isValid( this.spin_watch ) )\n                {\n                    this.spin_watch.active = false;\n                }\n                brnnglobal.enoughgold = true;\n            }\n            this.roomTypeBet = 10;\n            configuration.loadSpriteFrame(this.beichang, \"brnn/language/\" + brnnlanguage.getCurLanguage() + '/10beichang');\n        }\n    }\n    private roomstate: number = -1;\n    private time_gameState: number = -1;\n    /**根据玩家进入时间，开奖时间判断 */\n    private JudgeGametype() {\n        \n    }\n\n    /**游戏状态 \n     * @param index 0:正常进入游戏 1:断线重连进入房间\n     */\n    private gameProcess() {\n    }\n    /** 准备阶段(准备下一局)*/\n    private PreparPhaseDisplay() {\n        if( !cc.isValid( this.waitsp ) || !cc.isValid( this.tipstate_qdd ) ) return;\n        brnnglobal.isxz = false;\n        this.waitsp.active = false;\n        this.tipstate_qdd.active = true;\n        configuration.loadSpriteFrame(this._state, \"brnn/language/\" + brnnlanguage.getCurLanguage() + '/p_prepare');\n        this.startCountDown0(this.time_gameState, this._timer_lab_qdd);\n        // this.s_timer4 = this.scheduleOnce( ()=>{\n        //     if (this.ischecked) {  //如果勾选自动打开胜率面板  在下注阶段开始收回面板\n        //         this.ratePanl.stopAllActions();\n        //         this.ratePanl.runAction(\n        //             cc.moveTo(0.5, cc.v2(0, this.ratePanl.height))\n        //         );\n        //     }\n        //     this.roomstate = 1; //准备阶段完成 roostate置为1\n        //     this.time_gameState = 20;\n        //     this.gameProcess();\n        // }, Timediffe+0.3)\n    }\n    private isone: number = -1;\n    /** 下注阶段显示界面 */\n    private BetStageDisplay() {\n        brnnglobal.isxz = true;\n        \n        for (let i = 0; i < 5; i++) {\n            this.grp_chip_btn[i].interactable = true;\n        }\n        if( !cc.isValid( this.grp_chip_btn[this.chipRecordIndex] ) ) return;\n        this.grp_chip_btn[this.chipRecordIndex].node.y = 20;\n        this.grp_chip_btn[this.chipRecordIndex].node.getChildByName('p_chip_circle').active = true;\n        let roomBeiNum: number = 1;\n        let type = (configuration.JoinRoomR.name).substr(0, 7);\n        if (type == 'rongyao') {\n            roomBeiNum = 5;\n        } else if (type == 'chuanqi') {\n            roomBeiNum = 10;\n        }\n        let votCount:number = 0;\n        for( let VotIndex = 0; VotIndex < this.votgold.length; VotIndex++ )\n        {\n            votCount += this.votgold[ VotIndex ];\n        }\n        \n        //1.判断当前玩家金币是否够筹码下注则显示 2.当前玩家为庄家也按钮变灰\n        for (let i = 0; i < 5; i++) {\n            if ( ( createpoke.JudgeChipValue(i) + votCount ) * roomBeiNum > ( configuration.UserInfo.gold - votCount - createpoke.JudgeChipValue( i ) ) ||\n                    configuration.UserInfo.id == configuration.PrePokerList.banker.id) {\n                cc.log('玩家金币不足');\n                this.grp_chip_btn[i].interactable = false;\n                this.grp_chip_btn[i].node.getChildByName('p_chip_circle').active = false;\n            } else {\n                this.grp_chip_btn[i].interactable = true;\n            }\n        }\n        //判断进入房间时游戏状态时间<=20播放开始下注动画\n        if (this.time_gameState == 11) {\n            this.StartBetAnim();\n        }\n        //进入房间为下注状态直接显示桌上的信息\n        if (this.time_gameState < 11 ) {\n            for (let j = 0; j < 4; j++) {\n                let quantity = cc.find('Canvas/UIlayer/quantity_' + j);//投注区域（黑:0 红:1 梅:2 方:3）\n                if (configuration.JoinRoomR.bet_list[j] != 0) {\n                    if( !cc.isValid( this.tableNum[j] ) )return;\n                    this.tableNum[j].active = true;\n                    this.tableNum[j].getComponent(cc.Label).string = configuration.JoinRoomR.bet_list[j] + '';\n                    let gameview = this.node.getComponent('brnnGameView');\n                    let headPos = gameview.initBetRegionPos[j];\n                    brnnanimate.points_chip_move(configuration.JoinRoomR.bet_list[j], headPos, this.Grp_cz, quantity, this.chip, j);\n                }\n                if (configuration.JoinRoomR.mybet_list[j] != 0) {\n                    if( !cc.isValid( this.vot[j] ) || !cc.isValid( this.p_coin[j] ) ||\n                        !cc.isValid( this.di_bg[j] ) )\n                    {\n                        return;\n                    }\n                    this.vot[j].active = true;\n                    this.p_coin[j].active = true;\n                    this.di_bg[j].active = true;\n                    this.vot[j].getComponent(cc.Label).string = configuration.JoinRoomR.mybet_list[j] + '';\n                }\n            }\n        }\n    }\n    /** 切屏或重连来回是下注阶段重置牌和筹码 */\n    private restCradChip() {\n        //清除桌上筹码\n        if (this.Grp_cz.childrenCount > 0) {\n            this.Grp_cz.removeAllChildren();\n        }\n        if(!cc.isValid( this.carrd_node ) )return;\n        //恢复牌的位置\n        for (let k = 0; k < this.carrd_node.length; k++) {\n            if( !cc.isValid( this.carrd_node[k] ) )return;\n            for (let l = 0; l < 5; l++) {\n                let card = this.carrd_node[k].getChildByName('poker_' + l);\n                if( !cc.isValid( card ) )\n                {\n                    console.log( \"restCradChip card is null\");\n                    return;\n                }\n                let cover = this.carrd_node[k].getChildByName('pai_cover');\n                cover.getChildByName('crad_type').getChildByName('cheng').active = false;\n                cover.getChildByName('crad_type').getChildByName('niu_bet').active = false;\n                cover.active = false;\n                card.position = this.orginPlayerCardPos[k][l];\n                card.getChildByName('back').active = true;\n                card.active = false;\n                card.stopAllActions();\n            }\n        }\n    }\n    /**判断下注阶段玩家是否可以续投*/\n    private JudgeContinuedVot() {\n        if (this.iscontinue == 0) {//不能续投\n            if( cc.isValid( this.xutou_numbg ) )\n            {\n                this.xutou_numbg.active = false;\n            }\n            if( cc.isValid( this.btn_continvot ) )\n            {\n                this.btn_continvot.getComponent(cc.Button).interactable = false;\n            }\n            return;\n        } else if (this.iscontinue == 1 && configuration.ChangeBanker.banker.id != configuration.UserInfo.id) {//可以续投\n            if( cc.isValid( this.vot_num ) )\n            {\n                this.vot_num.getComponent(cc.Label).string = this.mytotalvot + '';\n            }\n            cc.log('可以续投', this.votgold1, this.mytotalvot);\n            if( cc.isValid( this.btn_continvot ) )\n            {\n                this.btn_continvot.getComponent(cc.Button).interactable = true;\n            }\n            if( cc.isValid( this.xutou_numbg ))\n            {\n                this.xutou_numbg.active = true;\n            }\n        }\n    }\n    /** 开奖结算阶段显示界面 */\n    private SettlementStageDisplay() {\n        this.wicthingAnim();\n        brnnglobal.isxz = false;\n        cc.log('开奖 停止下注');\n        let data = configuration.JoinRoomR.pre_loterry;\n        this.displayChipCardValue(data);\n        this.updateSettleInfo(data);\n    }\n    /**开奖结算阶段显示桌上筹码信息和牌值\n     * @param index 0:正常进入游戏 1:断线重连进入房间\n     */\n    private displayChipCardValue(data: any) {\n        if (this.time_gameState > 0 && this.time_gameState < 11) {\n            for (let i = 0; i < 4; i++) {//结算进入房间显示筹码\n                let quantity = cc.find('Canvas/UIlayer/quantity_' + i);//投注区域（黑:0 红:1 梅:2 方:3）\n                if (configuration.JoinRoomR.bet_list[i] != 0) {\n                    if( !cc.isValid( this.tableNum[i] ) )return;\n                    this.tableNum[i].active = true;\n                    let gameview = this.node.getComponent('brnnGameView');\n                    let headPos = gameview.initBetRegionPos[i];\n                    this.tableNum[i].getComponent(cc.Label).string = configuration.JoinRoomR.bet_list[i] + '';\n                    brnnanimate.points_chip_move(configuration.JoinRoomR.bet_list[i], headPos, this.Grp_cz, quantity, this.chip, i);\n                }\n                if (configuration.JoinRoomR.mybet_list[i] != 0) {\n                    if( !cc.isValid( this.vot[i] ) || !cc.isValid( this.p_coin[i] ) ||\n                        !cc.isValid( this.di_bg[i] ) )\n                    {\n                        return;\n                    }\n                    this.vot[i].active = true;\n                    this.p_coin[i].active = true;\n                    this.di_bg[i].active = true;\n                    this.vot[i].getComponent(cc.Label).string = configuration.JoinRoomR.mybet_list[i] + '';\n                }\n            }\n            //结算进入房间显示牌值\n            brnnanimate.directCardValue(this.carrd_node, true,\n                this.setCardValue(data,\n                    createpoke.createCardType(this.carrd_node, data)))\n        }\n    }\n\n    /**开奖结算阶段更新信息*/\n    private updateSettleInfo(data: any) {\n        this.s_timer0 = this.scheduleOnce( ()=> {\n            this.TableflickerAnim(data);\n            this.recordWinner(data);\n            brnnanimate.Chipset(this.playerHead, this.winplayer, data, this.quanti, this.Grp_cz, this.chip, null);\n        }, 9 - this.time_gameState)\n        if (this.time_gameState < 13) {\n            this.s_timer1 = this.scheduleOnce( ()=> {\n                // this.recordWinner(data);\n                // brnnanimate.Chipset(this.playerHead, this.winplayer, data, this.quanti, this.Grp_cz, this.chip, null);\n                this.Updategold(data);\n                brnnanimate.Floatword(data, this.winlose_gold_pos, this.win_gold, this.lose_gold, 1);\n                this.addW_LPanl(data);\n                createpoke.myPlayerWLGold(this.myw_gold_lab, this.myl_gold_lab, data);\n                brnnanimate.WinPlayerlight(data, this.playerHead);\n            }, 11 - this.time_gameState)\n        }\n        this.s_timer2 = this.scheduleOnce( ()=> {\n            // this.Updategold(data);\n            // brnnanimate.Floatword(data, this.winlose_gold_pos, this.win_gold, this.lose_gold, 1);\n            // createpoke.myPlayerWLGold(this.myw_gold_lab, this.myl_gold_lab, data);\n            // this.addW_LPanl(data);\n        }, 13 - this.time_gameState)\n\n    }\n    /**庄家轮换更改庄家信息 */\n    private bankerChange() {\n        if (brnnglobal.isChangbanker == true) {\n            brnnglobal.isChangbanker = false;\n            audiotool.play_audioSource(audiotool.LoadAudio(23));\n            this.addBankerInfo(configuration.ChangeBanker);//重新赋值庄家\n            let pre_bank_id = configuration.ChangeBanker.pre_banker.id;\n            if( !cc.isValid( this.myhead ) || !cc.isValid( this.btn_applysz ) ||\n                    !cc.isValid( this.btn_cancelapply ) || !cc.isValid( this.btn_applyxz ) ||\n                    !cc.isValid( this.btn_sz ) || !cc.isValid( this.btn_qx ) ||\n                    !cc.isValid( this.btn_xz ) || !cc.isValid( this.banker_tip ))\n            {\n                return;\n            }\n            if (pre_bank_id == configuration.UserInfo.id) {//下庄的是玩家自己\n                let my_gold = this.myhead.getChildByName('lab_info_glod');\n                let gold_count = configuration.removeDecimalpoint(configuration.ChangeBanker.pre_banker.ugold);\n                my_gold.getComponent(cc.Label).string = gold_count + '';\n                configuration.UserInfo.gold = configuration.ChangeBanker.pre_banker.ugold;\n                this.my_sz_gold = 0;\n                this.btn_applysz.active = true;\n                this.btn_cancelapply.active = false;\n                this.btn_applyxz.active = false;\n                this.btn_sz.active = true;\n                this.btn_qx.active = false;\n                this.btn_xz.active = false;\n            }\n            let banker_img = this.banker_tip.getChildByName('img_head');\n            this.getPlayerImg(configuration.ChangeBanker.banker.headurl, banker_img, this.banker_tip, true);\n            this.banker_tip.active = true;\n            this.banker_tip.runAction( cc.sequence( cc.scaleTo(0.5, 1, 1) ,\n                                                    cc.delayTime( 2 ),\n                                                    cc.callFunc( ()=>{\n                                                        if( cc.isValid( this.banker_tip ) )\n                                                        {\n                                                            this.banker_tip.active = false;\n                                                        }\n                                                    })\n            ));\n            let banker_id = configuration.ChangeBanker.banker.id;\n            if (banker_id == configuration.UserInfo.id) { //换庄是判断是否当前玩家已成为庄家 显示下庄按钮\n                this.btn_applysz.active = false;\n                this.btn_cancelapply.active = false;\n                this.btn_applyxz.active = true;\n\n                this.btn_sz.active = false;\n                this.btn_qx.active = false;\n                this.btn_xz.active = true;\n                this.my_sz_gold = configuration.ChangeBanker.banker.lgold;\n            }\n        }\n    }\n    private ske_kaishi: sp.Skeleton = null;\n    /**开始下注动画 */\n    private StartBetAnim() {\n        audiotool.play_audioSource(audiotool.LoadAudio(32));\n        configuration.playAnim(this.spin_kaishi, 0, 'ani_kaishiyouxi', false, null);\n        configuration.loadSpriteFrame(this._state, \"brnn/language/\" + brnnlanguage.getCurLanguage() + '/p_xiazhu');\n        // this.time_gameState = 0;\n    }\n\n    /**停止下注动画 */\n    private StopBetAnim() {\n        audiotool.play_audioSource(audiotool.LoadAudio(33));\n        configuration.playAnim(this.spin_tingzhi, 0, 'ani_tingzhixiazhu', false, null);\n    }\n\n    /**桌子闪烁 */\n    private TableflickerAnim(data:msg.GameAward) {\n        for (let i = 0; i < data.award.length; i++) {\n            if ( data.award[i].isWin == true && data.award[i].awardArea != msg.EnumArea.Banker ) {\n                if( cc.isValid( this.twink[i] ) )\n                {\n                    this.twink[i].active = true;\n                    brnnanimate.blink(this.twink[i]);\n                }\n            }\n        }\n    }\n    /**赌神星星 */\n    private starParticle(quantity_, _seat, p_star) {\n        let star = cc.instantiate(this.streamer);\n        let uilar = cc.find('Canvas/UIlayer');\n        uilar.addChild(star);\n        star.position = cc.v2(535, 276);\n        star.active = true;\n        brnnanimate.godStarMoveAction(star, quantity_, _seat, function (pos) {\n            if( cc.isValid( p_star ) && cc.isValid( uilar ) && cc.isValid( star ))\n            {\n                p_star.x = pos.x;\n                p_star.y = pos.y;\n                uilar.removeChild(star);\n                p_star.active = true;\n            }\n        });\n    }\n    private ske_watch: sp.Skeleton = null;\n    /**观战中Anim\n     *@param  1.玩家金币不足显示\n     *@param  2.玩家中途进入处于结算阶段\n     */\n    private wicthingAnim() {\n        // this.ske_watch = this.spin_watch.getComponent(sp.Skeleton);\n        // configuration.playAnim(this.spin_watch, 0, 'ani_gzz', true, null);\n        // for (let i = 0; i < 5; i++) {\n        //     this.grp_chip_btn[i].interactable = false;\n        // }\n    }\n    private zb_callback: any = null;\n    /**准备阶段计时器 */\n    private startCountDown0(time: number, timer_node) {\n        this.unschedule(this.zb_callback);\n        this.unschedule(this.xz_callback);\n        this.zb_callback = ()=>{\n            if( !cc.isValid( timer_node ) )\n            {\n                this.unschedule(this.zb_callback);\n                this.unschedule(this.xz_callback);\n                return;\n            }\n            if (time <= 1) {// 在第time=0次执行回调时取消这个计时器\n                timer_node.getComponent(cc.Label).string = '';\n                this.unschedule(this.zb_callback);\n            }\n            time--;\n            // cc.log('准备阶段计时器', time);\n            timer_node.getComponent(cc.Label).string = time + '';\n        }\n        this.schedule(this.zb_callback, 1, cc.macro.REPEAT_FOREVER, 0.01);//进来先执行一次\n    }\n    private xz_callback: any = null;\n    /**下注阶段计时器 */\n    private startCountDown1(time: number, timer_node) {\n        this.unschedule(this.zb_callback);\n        this.unschedule(this.xz_callback);\n        this.xz_callback = ()=>{\n            if( !cc.isValid( timer_node ) )\n            {\n                this.unschedule(this.zb_callback);\n                this.unschedule(this.xz_callback);\n                return;\n            }\n            if (time <= 6 && time > 1) {\n                audiotool.play_audioSource(audiotool.LoadAudio(28));\n            }\n            if (time <= 1) {   // 在第time=0次执行回调时取消这个计时器\n                audiotool.play_audioSource(audiotool.LoadAudio(31));\n                timer_node.getComponent(cc.Label).string = '';\n                brnnglobal.isxz = false;\n                // this.btn_continvot.getComponent(cc.Button).interactable = false;\n                // this.xutou_numbg.active = false;\n                for (let i = 0; i < 5; i++) {\n                    if( cc.isValid( this.grp_chip_btn[i] ))\n                    {\n                        this.grp_chip_btn[i].interactable = false;\n                        this.grp_chip_btn[i].node.getChildByName('p_chip_circle').active = false;\n                    }\n                }\n                this.unschedule(this.xz_callback);\n                this.StopBetAnim();\n            }\n            time--;\n            // cc.log('下注阶段计时器', time);\n            timer_node.getComponent(cc.Label).string = time + '';\n\n        }\n        this.schedule(this.xz_callback, 1, cc.macro.REPEAT_FOREVER, 0.01);\n    }\n\n    /**玩家下注 */\n    private PlayerBet2(xdata:msg.UserBetResp) {\n        if( !xdata )return;\n        let quantity = cc.find('Canvas/UIlayer/quantity_' + (xdata.userBetReq.area) );//投注区域（黑:0 红:1 梅:2 方:3）\n        let star = this.xinxin[ xdata.userBetReq.area ];\n        let index = -2;\n        index = 7;\n        if (index != 7) {\n            let Head = cc.find('Canvas/Centerlayer/head_player_' + index);//玩家头像\n            brnnanimate.HeadAnim(Head, this.initHeadPos[index], index);\n        }\n        this.votgold[xdata.userBetReq.area] += xdata.userBetReq.amount;//每一个筹码自己下注总数\n        if( !cc.isValid( this.p_coin[xdata.userBetReq.area] ) ||\n            !cc.isValid( this.vot[xdata.userBetReq.area] ) ||\n            !cc.isValid( this.di_bg[xdata.userBetReq.area] ) )\n        {\n            return;\n        }\n        this.p_coin[xdata.userBetReq.area].active = true;\n        this.vot[xdata.userBetReq.area].active = true;\n        this.vot[xdata.userBetReq.area].getComponent(cc.Label).string = this.votgold[xdata.userBetReq.area] + '';\n        // cc.log('下注下一把续投', this.votgold);\n        this.eachtypevotcount[xdata.userBetReq.area][xdata.userBetReq.amount]++;\n        this.di_bg[xdata.userBetReq.area].active = true;\n        this.now_isbet = true;\n        brnnglobal.isRoundBeenBet = true;\n        audiotool.play_audioSource(audiotool.LoadAudio(20));\n        \n        brnnanimate.points_chip_move(xdata.userBetReq.amount, this.playerHead[index].position, this.Grp_cz, quantity, this.chip, xdata.userBetReq.area);\n        configuration.UserInfo.gold = xdata.balance;\n        this.updaePlayerNowGoldandTableNum( true ,xdata.userBetReq);\n    }\n\n    OtherPlayerBet2( xdata:any )\n    {\n    }\n    /**实时更新筹码池金额 及 下注玩家当前所剩金额 */\n    private updaePlayerNowGoldandTableNum(isself:boolean,data: msg.IUserBetReq) {\n        let self = this;\n        if( !cc.isValid( this.tableNum[data.area] ) ||\n            !cc.isValid( this.myhead  ) )\n        {\n            return;\n        }\n        if ( isself ) {\n            cc.log('玩家当前所剩金额', configuration.UserInfo.gold);\n            let gold = this.myhead.getChildByName('lab_info_glod');\n            let playerHead = cc.find('Canvas/Centerlayer/head_player_7');\n            let table_gold = playerHead.getChildByName('gold');//如果当前玩家在桌上\n            let gold_count = configuration.removeDecimalpoint(configuration.UserInfo.gold);\n            gold.getComponent(cc.Label).string = gold_count + '';\n            let allowGold: number = configuration.UserInfo.gold;\n            for (let i = 0; i < 5; i++) {\n                if (allowGold < createpoke.JudgeChipValue(i)) {\n                    this.grp_chip_btn[i].interactable = false;\n                    cc.log('玩家金币不足');\n                }\n                if (allowGold < 1) { //低倍场：小于5块不能投注 高倍场：低于10块不能投注\n                    this.grp_chip_btn[i].interactable = false;\n                }\n            }\n        }\n        //每个筹码池金额\n        let totalgold = Number( this.tableNum[data.area].getComponent(cc.Label).string ) + data.amount;\n        this.tableNum[data.area].active = true;\n        this.tableNum[data.area].getComponent(cc.Label).string = totalgold + '';\n        this.sumbetarea = 0;\n        for (let o = 0; o < this.tableNum.length; o++) {\n            if( cc.isValid( this.tableNum[o] ) )\n            {\n                this.sumbetarea += Number(this.tableNum[o].getComponent(cc.Label).string);\n            }\n        }\n    }\n    /**保存续投 */\n    private saveVotData() {\n        if( !cc.isValid( this.node ) )return;\n        \n        for (let i = 0; i < this.eachtypevotcount.length; i++) {\n            if (this.votgold[i] != 0) {\n                this.votgold1 = this.votgold;\n                break;\n            }\n        }\n        this.mytotalvot = 0;\n        for (let i = 0; i < this.votgold1.length; i++) {\n            this.mytotalvot += this.votgold1[i];\n        }\n        var needbreak = false\n        for (let i = 0; i < this.eachtypevotcount.length; i++) {\n            for (let j = 0; j < this.eachtypevotcount[i].length; j++) {\n                for (let m = 0; m < this.eachtypevotcount[i][j]; m++) {\n                    if (this.eachtypevotcount[i][j] != 0) {\n                        this.eachtypevot = this.eachtypevotcount;\n                        needbreak = true\n                        break;\n                    }\n                }\n                if (needbreak) {\n                    break;\n                }\n            }\n            if (needbreak) {\n                break;\n            }\n        }\n\n    }\n    /**开奖结果 */\n    private LotteryResult(xdata: any) {\n        this.saveVotData();\n        if (xdata == null) {\n            return;\n        }\n\n        if( !cc.isValid( this.xutou_numbg ) ||\n            !cc.isValid( this.tipstate_qxz ) )\n        {\n            return;\n        }\n        if( xdata.robot_num >= 40 )\n        {\n            this.playbetAudioMax = 3;\n        }\n        else\n        {\n            this.playbetAudioMax = 0;\n        }\n        this.playbetAudioCount = this.playbetAudioMax;\n\n        brnnglobal.isRoundBeenBet = false;\n        brnnglobal.isxz = false;\n        this.isSettle = true;\n        let mdata = JSON.parse(xdata.data);\n        this.btn_continvot.getComponent(cc.Button).interactable = false;\n        this.xutou_numbg.active = false;\n        this.iscontinue = mdata.continue;\n        this.tipstate_qxz.active = false;\n        for (let i = 0; i < mdata.player_list.length; i++) {\n            if (mdata.player_list[i].id == configuration.UserInfo.id) {\n                configuration.UserInfo.gold = mdata.player_list[i].ugold;\n            }\n        }\n        brnnanimate.playCardFly(this.carrd_node, ()=> {\n            this.setCardValue(mdata, null);\n            brnnanimate.flipCard0(this.carrd_node, 0, ()=> {\n                brnnanimate.flipCard1(this.carrd_node, mdata, this.votgold, ()=> {\n                    this.addWinRate(mdata);\n                    this.beyondWlrate();\n                    this.TableflickerAnim(mdata);\n                    brnnanimate.eatandpay(mdata);\n                })\n            })\n        });\n        this.s_timer5 = this.scheduleOnce(()=> {\n            this.recordWinner(mdata);\n            brnnanimate.Chipset(this.playerHead, this.winplayer, mdata, this.quanti, this.Grp_cz, this.chip, null);\n        }, 9)\n        this.s_timer6 = this.scheduleOnce(()=> {\n            // this.recordWinner(mdata);\n            // brnnanimate.Chipset(this.playerHead, this.winplayer, mdata, this.quanti, this.Grp_cz, this.chip, null);\n            brnnanimate.Floatword(mdata, this.winlose_gold_pos, this.win_gold, this.lose_gold, 0);\n            brnnanimate.WinPlayerlight(mdata, this.playerHead);\n            this.Updategold(mdata);\n            this.addW_LPanl(mdata);\n            createpoke.myPlayerWLGold(this.myw_gold_lab, this.myl_gold_lab, mdata);\n        }, 11)\n        this.s_timer7 = this.scheduleOnce(()=> {\n            // brnnanimate.Floatword(mdata, this.winlose_gold_pos, this.win_gold, this.lose_gold, 0);\n            // brnnanimate.WinPlayerlight(mdata, this.playerHead);\n            // this.Updategold(mdata);\n            // createpoke.myPlayerWLGold(this.myw_gold_lab, this.myl_gold_lab, mdata);\n            // this.addW_LPanl(mdata);\n        }, 13)\n        this.s_timer8 = this.scheduleOnce(()=> {\n            this.restGame();\n            this.roomstate = 0; //开奖阶段完成 roostate置为0\n            this.time_gameState = 16;\n            this.gameProcess();\n        }, 15)\n\n        if( cc.isValid( this.jiazaiAnim ))\n        {\n            this.jiazaiAnim.active = false;\n        }\n    }\n    private timer: number = -1;\n    /**设置牌值 */\n    setCardValue(data:msg.GameAward, fun) {\n        createpoke.createPoker(this.cardpoke, data, this.pokerAtlas);\n        this.timer = setTimeout(() => {\n            clearTimeout(this.timer)\n            fun && fun()\n        }, (0.4 * 1000))\n    }\n    private winplayer: number[] = [];\n    private recordWinner(data: any) {\n        for (let i = 0; i < data.player_list.length; i++) {\n            let winlose_g = data.player_list[i].winlose;\n            if (winlose_g > 0) {     //赢了的玩家\n                if (data.player_list[i].seat == -1) {\n                    this.winplayer.push(0);\n                } else if (data.player_list[i].seat == 0) {\n                    if (data.player_list[i].id == configuration.UserInfo.id) {\n                        this.winplayer.push(7);\n                    } else {\n                        this.winplayer.push(8);\n                    }\n                } else {\n                    if (data.player_list[i].id == configuration.UserInfo.id) {\n                        this.winplayer.push(7);\n                    } else {\n                        this.winplayer.push(data.player_list[i].seat);\n                    }\n                }\n            }\n        }\n    }\n    /**结算更新所有玩家金币 */\n    private Updategold(data:msg.GameAward) {\n        //更新庄家金币\n        let u_gold_count = configuration.removeDecimalpoint(configuration.UserInfo.gold);\n        let my_gold = this.myhead.getChildByName('lab_info_glod');\n        my_gold.getComponent(cc.Label).string = u_gold_count + '';\n    }\n    /**结算当前玩家游戏过 输赢面板结果 */\n    private addW_LPanl(data: any) {\n        for (let i = 0; i < data.player_list.length; i++) {\n            if (data.player_list[i].id == configuration.UserInfo.id) {//更新玩家自己金币\n                if (data.player_list[i].winlose > 0) {\n                    audiotool.play_audioSource(audiotool.LoadAudio(16));\n                    let win_panl = cc.instantiate(this.Winpanl);\n                    let brnnWinPanl = win_panl.getComponent('brnnWinPanl');\n                    brnnWinPanl.settleMentWin(data, i);\n                    this.wl_start_stop_anim.addChild(win_panl);\n                } else if (data.player_list[i].winlose < 0) {\n                    audiotool.play_audioSource(audiotool.LoadAudio(15));\n                    let lose_panl = cc.instantiate(this.Losepanl);\n                    let brnnLosePanl = lose_panl.getComponent('brnnLosePanl');\n                    brnnLosePanl.settleMentLose(data, i);\n                    this.wl_start_stop_anim.addChild(lose_panl);\n                }\n            }\n        }\n    }\n    /**结算添加胜率面板结果 */\n    private addWinRate(data: any) {\n        var self = this;\n        if( !cc.isValid( this.rare_scrollw ) ||\n            !cc.isValid( this.winlos_node ) ||\n            !cc.isValid( this.ratePanl ) ||\n            !cc.isValid( this.biao_mid1 ) )\n        {\n            return;\n        }\n        this.rare_scrollw.getComponent(cc.ScrollView).content.position = this.initRateContentPos;\n        for (let i = 0; i < data.result.result.length; i++) {\n            let wlitem = cc.instantiate(this.winlost);\n            if (data.result.result[i] == true) {\n                configuration.loadSpriteFrame(wlitem, \"brnn/brnnlist/sheng_1\");\n            } else if (data.result.result[i] == false) {\n                configuration.loadSpriteFrame(wlitem, \"brnn/brnnlist/fu_1\");\n            }\n            this.winlos_node.addChild(wlitem);\n            this.winlos_node.getComponent(cc.Layout).updateLayout();\n        }\n        this.allwinratearr.push(data.result.result);\n        this.getRate();\n        if (this.ischecked) {\n            this.ratePanl.active = true;\n            this.ratePanl.stopAllActions();\n            this.ratePanl.runAction(\n                cc.moveTo(0.5, cc.v2(0, 0))\n            );\n            this.biao_mid1.active = true;\n        }\n        brnnanimate.blink(this.biao_mid1);\n    }\n    /**结算更新胜率列表超出21部分删除 */\n    private beyondWlrate() {\n        if (this.allwinratearr.length > 21) {\n            for (let r = 0; r < 4; r++) {\n                if( cc.isValid( this.winlos_node.children[r] ) )\n                {\n                    this.winlos_node.children[r].destroy();\n                    // this.winlos_node.children[r] = null;\n                }\n            }\n            this.allwinratearr.splice(0, 1);\n        }\n    }\n    private lastListDisPlay(count: number) {\n        var self = this;\n        let childCont = this.winlos_node.children;\n        this.biao_mid1.x = childCont[childCont.length - 1].x;\n        if (count == 1) {\n            this.biao_mid1.active = true;\n        }\n    }\n    /**上庄错误 */\n    private prePokerErr(xdata: any) {\n        if (!xdata) return;\n        let mdata = JSON.parse(xdata.data);\n        if (!mdata) return;\n        cc.log('申请上庄', mdata);\n        if( cc.isValid( this.jiazaiAnim ))\n        {\n            this.jiazaiAnim.active = false;\n        }\n    }\n\n    /**上庄列表 */\n    private prePokerList(xdata: any) {\n        if (!xdata) return;\n        let mdata = JSON.parse(xdata.data);\n        if (!mdata) return;\n        this.updatePreBankList(mdata);\n        configuration.initPrePokerList(xdata);\n        if (mdata.id != '' && mdata.id == configuration.UserInfo.id) {\n            let hasme = false;\n            if( configuration.PrePokerList.banker_list instanceof Array )\n            {\n                for( let bankListIndex = 0;bankListIndex < configuration.PrePokerList.banker_list.length; bankListIndex++ )\n                {\n                    if( configuration.PrePokerList.banker_list[ bankListIndex ].id == configuration.UserInfo.id )\n                    {\n                        hasme = true;\n                        break;\n                    }\n                }\n            }\n\n            if ( hasme == false ) {\n                //当前玩家取消申请\n                this.iscancel = true;\n                if( cc.isValid( this.btn_sz ) &&\n                    cc.isValid( this.btn_qx ) &&\n                    cc.isValid( this.btn_xz ) )\n                {\n                    this.btn_sz.active = true;\n                    this.btn_qx.active = false;\n                    this.btn_xz.active = false;\n                }\n            } else {\n                //当前玩家申请上庄\n                this.isApplySz = true;\n                if( cc.isValid( this.btn_sz ) &&\n                    cc.isValid( this.btn_qx ) &&\n                    cc.isValid( this.btn_xz ) )\n                {\n                    this.btn_sz.active = false;\n                    this.btn_qx.active = true;\n                    this.btn_xz.active = false;\n                }\n            }\n            this.errTipPrefab('操作成功！');\n            if( cc.isValid( this.jiazaiAnim ))\n            {\n                this.jiazaiAnim.active = false;\n            }\n        }\n    }\n    private updatePreBankList(mdata: any) {\n        return;\n        let content = cc.find('Canvas/Centerlayer/prepoker/perPoke_ScrollView/view/content');\n        if( !cc.isValid( content ) )return;\n        content.height = 0;\n        if (content.childrenCount > 0) {\n            for (let i = 0; i < content.childrenCount; i++) {\n                content.removeAllChildren();\n            }\n        }\n\n        let sz_Scrollow = this.SzPanl.getChildByName('Sz_ScrollView');\n        if( !cc.isValid( sz_Scrollow ) )return;\n        let sz_content = sz_Scrollow.getComponent(cc.ScrollView).content;\n        if( !cc.isValid( sz_content ) )return;\n        sz_content.height = 0;\n        if (sz_content.childrenCount > 0) {\n            for (let i = 0; i < sz_content.childrenCount; i++) {\n                sz_content.removeAllChildren();\n            }\n        }\n\n        if( cc.isValid( this.prepoker_num ) )\n        {\n            /**上庄小列表 */\n            if (mdata.banker_list == null) {\n                this.prepoker_num.getComponent(cc.Label).string = 0 + '人';\n                return;\n            } else {\n                cc.log('上庄列表人数', mdata.banker_list.length);\n                this.prepoker_num.getComponent(cc.Label).string = mdata.banker_list.length + '人';\n            }\n        }\n\n        if( cc.isValid( this.perPokeScrollow ) )\n        {\n            if( this.perPokeScrollow.getComponent(cc.ScrollView) )\n            {\n                if( this.perPokeScrollow.getComponent(cc.ScrollView).content )\n                {\n                    for (let i = 0; i < mdata.banker_list.length; i++) {\n                        content.height += 21;\n                        let item = cc.instantiate(this.perlist);\n                        this.perPokeScrollow.getComponent(cc.ScrollView).content.addChild(item);\n                        item.getComponent(cc.Label).string = mdata.banker_list[i].name + '';\n                    }\n                }\n            }\n        }\n        \n        /**上庄大列表 */\n\n        for (let i = 0; i < mdata.banker_list.length; i++) {\n            sz_content.height += 60;\n            let sz_item = cc.instantiate(this.sz_item);\n            let sz_count = sz_item.getChildByName('sz_count');\n            let sz_name = sz_item.getChildByName('sz_name');\n            let sz_gold = sz_item.getChildByName('p_kuang').getChildByName('sz_gold');\n            sz_count.getComponent(cc.Label).string = i + 1 + '.';\n            sz_name.getComponent(cc.Label).string = mdata.banker_list[i].name + '';\n            sz_gold.getComponent(cc.Label).string = mdata.banker_list[i].lgold + '.00';\n            sz_content.addChild(sz_item);\n\n            if (mdata.banker_list[i].id == configuration.UserInfo.id) {\n                if( cc.isValid( this.btn_applysz ) &&\n                    cc.isValid( this.btn_applyxz ) &&\n                    cc.isValid( this.btn_cancelapply ) &&\n                    cc.isValid( this.btn_sz ) &&\n                    cc.isValid( this.btn_xz ) &&\n                    cc.isValid( this.btn_qx ) )\n                {\n                    this.btn_applysz.active = false;\n                    this.btn_applyxz.active = false;\n                    this.btn_cancelapply.active = true;\n                    this.btn_sz.active = false;\n                    this.btn_xz.active = false;\n                    this.btn_qx.active = true;\n                }\n            }\n        }\n    }\n    /**上庄成功后金币修改 */\n    private changeMyGold(xdata: any) {\n        if (!xdata) return;\n        let mdata = JSON.parse(xdata.data);\n        if (!mdata) return;\n        let self = this;\n        cc.log('上庄成功后金币修改', mdata.gold);\n        if (this.isSettle == true) {\n            this.isCheckAfter = true;\n        }\n        let my_gold = this.myhead.getChildByName('lab_info_glod');\n        let gold_count = configuration.removeDecimalpoint(mdata.gold);\n        my_gold.getComponent(cc.Label).string = gold_count + '';\n        configuration.UserInfo.gold = mdata.gold;\n        if( cc.isValid( this.jiazaiAnim ))\n        {\n            this.jiazaiAnim.active = false;\n        }\n    }\n    /**存储每一局更新桌上玩家信息（除开庄的信息） */\n    private storageT_p(xdata: any) {\n        configuration.initOtherPlayerInfo(xdata);//\n        // 不要马上更新等准备阶段再更新\n        // this.addPlayerInfo();\n        if( cc.isValid( this.jiazaiAnim ))\n        {\n            this.jiazaiAnim.active = false;\n        }\n    }\n    /**申请退出上庄列表 */\n    private cancalApply(xdata: any) {\n        if (!xdata) return;\n        let mdata = JSON.parse(xdata.data);\n        if (!mdata) return;\n        if (mdata.isok == false) {\n            cc.log('申请退出上庄列表，失败');\n            return;\n        } else {\n            if( cc.isValid( this.btn_applysz ) &&\n                cc.isValid( this.btn_applyxz ) &&\n                cc.isValid( this.btn_cancelapply ) )\n            {\n                this.btn_applysz.active = true;\n                this.btn_applyxz.active = false;\n                this.btn_cancelapply.active = false;\n                let my_gold = this.myhead.getChildByName('lab_info_glod');\n                let gold_count = configuration.removeDecimalpoint(mdata.gold);\n                my_gold.getComponent(cc.Label).string = gold_count + '';\n                configuration.UserInfo.gold = mdata.gold;\n                this.my_sz_gold = 0;\n            }\n        }\n        if( cc.isValid( this.jiazaiAnim ))\n        {\n            this.jiazaiAnim.active = false;\n        }\n    }\n    /**存储庄家轮换(自动换庄，主动下庄) */\n    private storageCb(xdata: any) {\n        if (!xdata) return;\n        let mdata = JSON.parse(xdata.data);\n        configuration.initChangeBanker(xdata);\n        brnnglobal.isChangbanker = true;\n        if (mdata.banker.id == configuration.UserInfo.id) { //换庄是判断下庄是否当前玩家\n            if (mdata.is_auto == true) {\n                if( cc.isValid( this.btn_sz ) &&\n                    cc.isValid( this.btn_qx ) &&\n                    cc.isValid( this.btn_xz ) )\n                {\n                    this.btn_sz.active = false;\n                    this.btn_qx.active = false;\n                    this.btn_xz.active = true;\n                }\n            }\n        }\n        if( cc.isValid( this.jiazaiAnim ))\n        {\n            this.jiazaiAnim.active = false;\n        }\n    }\n    /**续投 */\n    private ContinuVot(xdata: any) {    \n    }\n    /**退出房间 */\n    private isOutroom(xdata: any) {\n        if (!xdata) return;\n        let mdata = JSON.parse(xdata.data);\n        if (!mdata) return;\n        if (mdata.isok == true) {\n            let currentScene = cc.director.getScene();\n            cc.log('已经加载的场景', currentScene);\n            if (currentScene.name !== 'brnn') {\n                brnnglobal.isroomExit = true;\n                cc.director.loadScene('brnn');\n            }\n        } else {\n            cc.log('退出房间失败');\n        }\n        if( cc.isValid( this.jiazaiAnim ))\n        {\n            this.jiazaiAnim.active = false;\n        }\n    }\n    /**获取庄家信息 */\n    private addBankerInfo(data: any) {\n        if( !this.bankerHead )\n        {\n            cc.log(\"addBankerInfo this.bankerHead=\",this.bankerHead,\" data=\",data);\n            return;\n        }\n        let headImg = this.bankerHead.getChildByName('icon_tx'),\n            id = this.bankerHead.getChildByName('id'),\n            gold_lab = this.bankerHead.getChildByName('gold');\n        let lgold = 0;\n        let ugold = 0;\n        let headurl = '';\n        let name = '';\n        // if (data.banker_before && data.banker_before.id != '') {\n        //     lgold = data.banker_before.lgold;\n        //     ugold = data.banker_before.ugold;\n        //     headurl = data.banker_before.headurl;\n        //     name = data.banker_before.name;\n        // } else {\n            lgold = data.banker.lgold;\n            ugold = data.banker.ugold;\n            headurl = data.banker.headurl;\n            name = data.banker.name;\n        // }\n        let gold_count = configuration.removeDecimalpoint(lgold);\n        this.getPlayerImg(headurl, headImg, this.bankerHead, false);\n        gold_lab.getComponent(cc.Label).string = gold_count + '';\n        id.getComponent(cc.Label).string = name + '';\n        cc.log('金币上庄锁定金币：', lgold, '金币上庄锁定金币：', ugold, '庄家id：', name);\n    }\n    /**获取玩家信息 */\n    private addPlayerInfo() {\n        if( !cc.isValid( this.myhead ) )return;\n        //玩家自己信息\n        let my_Img = this.myhead.getChildByName('icon_tx'),\n            my_id = this.myhead.getChildByName('lab_info_id'),\n            my_gold = this.myhead.getChildByName('lab_info_glod'),\n            img_num = configuration.UserInfo.headurl.substr(0, 1);\n        let gold_count = configuration.removeDecimalpoint(configuration.UserInfo.gold);\n        my_id.getComponent(cc.Label).string = configuration.UserInfo.name;\n        my_gold.getComponent(cc.Label).string = gold_count + '';\n        this.getPlayerImg(configuration.UserInfo.headurl, my_Img, this.myhead, false);\n    }\n    /**赋值玩家的图像信息\n     * @param data\n     * @param img 玩家头像img\n     */\n    private getPlayerImg(data: any, img: cc.Node, head: cc.Node, isbankerchange: boolean) {\n        let img_num = '';\n        if (data.length == 6) {\n            img_num = data.substr(0, 2);\n        } else if (data.length == 5) {\n            img_num = data.substr(0, 1);\n        }\n        if (parseInt(img_num) >= 10)\n            img_num = parseInt(img_num) % 10 + '';\n        if (isbankerchange == true)\n            configuration.loadSpriteAtlasFrame(img, 'brnn/brnnhead/im_thead', 'tAvatar' + img_num);\n        else\n            configuration.loadSpriteAtlasFrame(img, 'brnn/brnnhead/im_head', 'Avatar' + img_num);\n    }\n    private allwinratearr: any[] = [];\n    /*胜率列表 */\n    private getInitWinRate() {\n        var self = this;\n        if (configuration.ListHistory.data.length == null) return;\n        let roomname = configuration.JoinRoomR.name;\n        for (let i = 0; i < configuration.ListHistory.data.length; i++) {\n            let name = configuration.ListHistory.data[i].name;\n            let history = configuration.ListHistory.data[i].history;\n            if (name == roomname && history.length != 0) {\n                let leng = 0;\n                if (history.length > 21) {   //超出显示列表21列(只显示最新21列)\n                    leng = history.length - 21;\n                } else {\n                    leng = 0;\n                }\n                for (let j = leng; j < history.length; j++) {\n                    for (let k = 0; k < history[j].length; k++) {\n                        let wlitem = cc.instantiate(this.winlost);\n                        if (history[j][k] == true) {\n                            configuration.loadSpriteFrame(wlitem, \"brnn/brnnlist/sheng_1\");\n                        } else if (history[j][k] == false) {\n                            configuration.loadSpriteFrame(wlitem, \"brnn/brnnlist/fu_1\");\n                        }\n                        this.winlos_node.addChild(wlitem);\n                    }\n                    this.allwinratearr.push(history[j]);\n                }\n            }\n            if (roomname == 'rongyao1') {\n                this.roomtype.getComponent(cc.Label).string = '富贵厅01';\n            } else if (roomname == 'rongyao2') {\n                this.roomtype.getComponent(cc.Label).string = '富贵厅02';\n            } else if (roomname == 'chuanqi1') {\n                this.roomtype.getComponent(cc.Label).string = '至尊厅01';\n            } else if (roomname == 'chuanqi2') {\n                this.roomtype.getComponent(cc.Label).string = '至尊厅02';\n            }\n        }\n        this.beyondWlrate();\n        this.getRate();\n    }\n    private serverClose(data: any) {\n        if (this.jiazaiAnim.active == false) {\n            this.jiazaiAnim.active = true;\n        }\n        cc.log(`游戏房间网络断开连接：${data}`);\n    }\n    renewJionRoom(xdata: any) {\n        if(this.reconnected)\n        {\n            this.reconnected = false;\n            cc.log(`游戏房间网络重新连接：${xdata}`);\n            configuration.initJoinRoomR(xdata);//断线重连存储加入房间信息\n            // this.JudgeGametype();\n            // this.gameProcess();\n        }\n        if( cc.isValid( this.jiazaiAnim ))\n        {\n            this.jiazaiAnim.active = false;\n        }\n    }\n    private num: number[] = [0, 0, 0, 0];\n    /**胜率面板20场胜率 */\n    private getRate() {\n        return;\n        this.num = [0, 0, 0, 0];\n        for (let j = this.allwinratearr.length < 21 ? 0 : 1; j < this.allwinratearr.length; j++) {\n            for (let m = 0; m < 4; m++) {\n                if (this.allwinratearr[j][m] == true) {\n                    this.num[m]++;\n                }\n            }\n        }\n        this.lab_winrate0.getComponent(cc.Label).string = this.num[0] + '/20';\n        this.lab_winrate1.getComponent(cc.Label).string = this.num[1] + '/20';\n        this.lab_winrate2.getComponent(cc.Label).string = this.num[2] + '/20';\n        this.lab_winrate3.getComponent(cc.Label).string = this.num[3] + '/20';\n    }\n    update(dt) {\n\n    }\n    /**每一局完成应该重置的 */\n    restGame() {\n        var self = this;\n        this.initdata();\n        this.node.stopAllActions();\n        this.unscheduleAllCallbacks();\n        this.removeDelayTimer();\n        this.region = [-1];\n        this.isclickxt = false;\n        this.votgold = [0, 0, 0, 0];//續投籌碼池金額\n        this.eachtypevotcount = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]];\n        this.sumbetarea = 0;\n        this.winplayer = [];\n        this.now_isbet = false;\n        this.num = [0, 0, 0, 0];\n        brnnanimate.allchip_arr = [];\n        brnnanimate.correspond_chips_arr = [[], [], [], []];\n\n        if( cc.isValid( this.spin_watch ) )\n        {\n            this.spin_watch.active = false;\n        }\n        this.isSettle = false;\n        this.isCheckAfter = false;\n        let w_panl = this.wl_start_stop_anim.getChildByName('winPanl');\n        let l_panl = this.wl_start_stop_anim.getChildByName('losePanl');\n        this.wl_start_stop_anim.removeChild(w_panl);\n        this.wl_start_stop_anim.removeChild(l_panl);\n        //清除飘输赢金币字体\n        for (let i = 0; i < 8; i++) {\n            // let call = cc.callFunc((sender) => {\n            //     this.win_gold[i].active = false;\n            //     this.lose_gold[i].active = false;\n            // })\n            // let ac = cc.fadeOut(0.3);\n            // let seq = cc.sequence(ac, call);\n            // this.win_gold[i].runAction(seq);\n            // this.lose_gold[i].runAction(seq);\n            if( cc.isValid( this.win_gold[i] ) &&\n                cc.isValid( this.lose_gold[i] ) )\n            {\n                this.win_gold[i].active = false;\n                this.lose_gold[i].active = false;\n            }\n        }\n        this.restCradChip();\n        this.isSwitchScreen == false;\n    }\n\n    /**重连登陆房间列表 */\n    private reConnect() {\n    }\n    /*移除普通监听 */\n    private removeOrdinaryEventListener() {\n        var self = this;\n        cc.log('移除普通监听');\n        this.btn_back.off('touchend', () => { this.onclick('btn_back'); })\n        this.btn_trend.off('touchend', () => { this.onclick('btn_trend'); })\n        this.btn_help.off('touchend', () => { this.onclick('btn_help'); })\n        this.btn_shouqi.off('touchend', () => { this.onclick('btn_shouqi'); })\n        this.prepoker.off('touchend', () => { this.onclick('prepoker'); })\n        this.btn_sz.off('touchend', () => { this.onclick('btn_sz'); })\n        this.btn_qx.off('touchend', () => { this.onclick('btn_qx'); })\n        this.btn_xz.off('touchend', () => { this.onclick('btn_xz'); })\n        this.rulepanl.off('touchend', () => { this.onclick(this.rulepanl.name); })\n        this.toggle.off('touchend', () => { this.onclick(this.toggle.name); })\n        // this.trumpetbg.off('touchend', () => { this.onclick(this.trumpetbg.name); })\n        this.p_btn_clear.off('touchend', () => { this.onclick('p_btn_clear'); })\n        this.btn_applysz.off('touchend', () => { this.onclick('btn_applysz'); })\n        this.btn_applyxz.off('touchend', () => { this.onclick('btn_applyxz'); })\n        this.btn_cancelapply.off('touchend', () => { this.onclick('btn_cancelapply'); })\n    }\n    /*移除网络监听 */\n    private removeInterEventListener() {\n        var self = this;\n        cc.log('移除网络监听');\n        events.unregister(EventKind.S2C_PreBanker, \"brnnGameScene\");\n        events.unregister(EventKind.S2C_PreBankerList, \"brnnGameScene\");\n        events.unregister(EventKind.S2C_PlayerBet, \"brnnGameScene\");\n        events.unregister(EventKind.S2C_OpenLoterry, \"brnnGameScene\");\n        events.unregister(EventKind.S2C_ShowPlayerList, \"brnnGameScene\");\n        events.unregister(EventKind.S2C_ExitPreBanker, \"brnnGameScene\");\n        events.unregister(EventKind.S2C_mbankerChange, \"brnnGameScene\");\n        events.unregister(EventKind.S2C_Voting, \"brnnGameScene\");\n        events.unregister(EventKind.S2C_SzModifgold, \"brnnGameScene\");\n        events.unregister(EventKind.C2S_playerExitRoom, \"brnnGameScene\");\n\n        events.unregister(EventKind.S2C_ServerconnectClose, \"brnnGameScene\");\n        events.unregister(EventKind.S2C_RenewEnter, \"brnnGameScene\");\n        events.unregister(EventKind.S2C_RenewPlayerList, \"brnnGameScene\");\n        events.unregister(EventKind.S2C_RenewpreBankerList, \"brnnGameScene\");\n\n        events.unregister(EventKind.S2C_Self, \"brnnGameScene\");\n\n        events.unregister(EventKind.S2CEnterRoom, \"brnnGameScene\");\n    }\n    /*移除计时器延时器 */\n    private removeDelayTimer() {\n        var self = this;\n        //清除计数器\n        this.unschedule(this.zb_callback);\n        this.unschedule(this.xz_callback);\n        //清除延时器\n        this.unschedule(this.s_timer0);\n        this.unschedule(this.s_timer1);\n        this.unschedule(this.s_timer2);\n        this.unschedule(this.s_timer3);\n        this.unschedule(this.s_timer4);\n        this.unschedule(this.s_timer5);\n        this.unschedule(this.s_timer6);\n        this.unschedule(this.s_timer7);\n        this.unschedule(this.s_timer8);\n        this.unschedule(this.s_timer11);\n        this.unschedule(this.s_timer12);\n        if (this.timer != -1) {\n            clearTimeout(this.timer);\n        }\n        if (configuration.JoinRoomR.jishiqi != -1) {\n            clearInterval(configuration.JoinRoomR.jishiqi);\n        }\n    }\n    onDestroy() {\n        var self = this;\n        this.chipRecordIndex = 0;\n        this.isSwitchScreen = false;\n        this.isclickBtn_back = false;\n        this.isclicki_Btn_enter = false;\n        cc.audioEngine.stopAll();\n        this.node.stopAllActions();\n        this.removeOrdinaryEventListener();\n        this.removeInterEventListener();\n        this.removeDelayTimer();\n        cc.game.off(cc.game.EVENT_HIDE, ()=> {\n            this.gameHideBackgroundAction();\n        }, self);\n        cc.game.off(cc.game.EVENT_SHOW, ()=> {\n            this.gameShowAction();\n        }, self);\n\n        this.type = '';\n        this.my_sz_gold = 0;\n        this.isprepoker = true;\n        this.df_sc_y = -1;\n        this.roomTypeBet = 0;\n        this.initRateContentPos = cc.v2(0, 0);\n        this.mytotalvot = 0;\n        this.sumbetarea = 0;\n\n        brnnglobal.isLottery == false;\n        brnnanimate.allchip_arr = [];\n        brnnanimate.correspond_chips_arr = [[], [], [], []];\n\n        brnnanimate.isCompleteFlyChip == false;\n    }\n\n    reEnterRoom()\n    {\n        cc.log(\"===================reEnterRoom\")\n        this.reconnected = true;\n        let msg = {\n            id: 3,\n            data: JSON.stringify({\n                name: brnnglobal.roomname\n            }),\n        }\n        events.dispatch(EventKind.C2S_EnterRoom, msg);\n    }\n\n    S2C_GameStart(data:msg.GameStart)\n    {\n        if( cc.isValid( this.jiazaiAnim ))\n        {\n            this.jiazaiAnim.active = false;\n        }\n\n        this.roomstate = 0; //开奖阶段完成 roostate置为0\n        this.time_gameState = data.readyTimer;\n\n        this.restGame();\n        this.judgeIsPlay();\n        this.addPlayerInfo();\n        this.PreparPhaseDisplay();\n    }\n\n    S2C_GameStartBet(data:msg.GameStartBet)\n    {\n        if( cc.isValid( this.jiazaiAnim ))\n        {\n            this.jiazaiAnim.active = false;\n        }\n        this.roomstate = 1; //准备阶段完成 roostate置为1\n        this.time_gameState = data.readyTimer;\n        events.register(EventKind.S2C_PlayerBet, \"brnnGameScene\", this.PlayerBet2.bind(this));//玩家下注            \n        this.BetStageDisplay();\n        this.judgeIsPlay();\n        this.JudgeContinuedVot();\n        this.tipstate_qdd.active = false;\n        this.tipstate_qxz.active = true;\n        this.startCountDown1(this.time_gameState, this._timer_lab_qxz);\n        configuration.loadSpriteFrame(this._state, \"brnn/language/\" + brnnlanguage.getCurLanguage() + '/p_xiazhu');\n    }\n\n    S2C_GameAward(data:msg.GameAward)\n    {\n        if( cc.isValid( this.jiazaiAnim ))\n        {\n            this.jiazaiAnim.active = false;\n        }\n\n        this.roomstate = 2; //开奖阶段完成 roostate置为0\n        this.time_gameState = data.readyTimer;\n\n        this.saveVotData();\n\n        brnnglobal.isRoundBeenBet = false;\n        brnnglobal.isxz = false;\n        this.isSettle = true;\n        // this.btn_continvot.getComponent(cc.Button).interactable = false;\n        // this.xutou_numbg.active = false;\n        this.iscontinue = 0;\n        this.tipstate_qxz.active = false;\n        configuration.UserInfo.gold = data.balance;\n\n        brnnanimate.playCardFly(this.carrd_node, ()=> {\n            this.setCardValue(data, null);\n            brnnanimate.flipCard0(this.carrd_node, 0, ()=> {\n                brnnanimate.flipCard1(this.carrd_node, data, this.votgold, ()=> {\n                    this.TableflickerAnim(data);\n                    brnnanimate.eatandpay(data);\n                })\n            })\n        });\n        this.s_timer5 = this.scheduleOnce(()=> {\n            for (let i = 0; i < data.award.length; i++) {\n                if ( data.award[i].isWin == true && data.award[i].awardArea != msg.EnumArea.Banker ) {\n                    this.winplayer.push(7);\n                    break;\n                }\n            }\n            \n            brnnanimate.Chipset(this.playerHead, this.winplayer, data, this.quanti, this.Grp_cz, this.chip, null);\n        }, 9)\n        this.s_timer6 = this.scheduleOnce(()=> {\n            // this.recordWinner(mdata);\n            // brnnanimate.Chipset(this.playerHead, this.winplayer, mdata, this.quanti, this.Grp_cz, this.chip, null);\n            brnnanimate.Floatword(data, this.winlose_gold_pos, this.win_gold, this.lose_gold, 0);\n            brnnanimate.WinPlayerlight(data, this.playerHead);\n            this.Updategold(data);\n        }, 11)\n        \n        if( cc.isValid( this.jiazaiAnim ))\n        {\n            this.jiazaiAnim.active = false;\n        }\n    }\n}\n","/**brnn 游戏界面gameView */\nimport { events, EventKind } from '../brnntools/brnn_event';\nimport { configuration } from '../brnnutils/brnnConfiguration';\nimport { brnnanimate } from './brnnAnimate';\nimport { audiotool } from '../brnnutils/brnnAudioTool';\nimport { brnnglobal } from '../brnnutils/brnnGlobal';\nimport { brnnutils } from '../brnnutils/brnnUtils';\nconst { ccclass, property } = cc._decorator;\n\nlet rankTemp = cc.Class({\n    name: 'rankTemp',\n    properties: {\n        id: 0,\n        nickName: '',\n        thirdAvatarID: 0,\n        location: \"桂林市\",\n        division: \"黄金\",\n        challengeCoin: 10,\n    }\n});\n\n@ccclass\nexport default class brnnGameView extends cc.Component {\n    @property({ type: cc.Prefab, tooltip: '在线玩家列表Prefab' })\n    onlinePanl: cc.Prefab = null;\n\n    @property({ type: cc.Prefab, tooltip: '错误提示item' })\n    err_item: cc.Prefab = null;\n\n    @property({ type: cc.Node, tooltip: '关闭音效按钮' })\n    btn_sound: cc.Node = null;\n\n    @property({ type: cc.Node, tooltip: '打开音效按钮' })\n    btn_mute: cc.Node = null;\n\n    @property({ type: cc.Node, tooltip: '底部层' })\n    bot_layer: cc.Node = null;\n\n    @property({ type: cc.Button, tooltip: '筹码按钮' })\n    grp_chip_btn: cc.Button[] = [];\n\n    @property({ type: cc.Node, tooltip: '投注筹码区域' })\n    bet_region: cc.Node[] = [];\n\n    @property({ type: cc.Node, tooltip: '扑克大节点' })\n    card_node: cc.Node[] = [];\n\n    @property({ type: cc.Node, tooltip: '添加在线玩家面板的节点' })\n    addonlin_node: cc.Node = null;\n\n    @property({ type: cc.Node, tooltip: '走势面板' })\n    ratePanl: cc.Node = null;\n\n    @property({ type: cc.Node, tooltip: '规则面板' })\n    rulePanl: cc.Node = null;\n\n    FloatWordlayer: cc.Node = null;\n    tipbg: cc.Sprite = null;\n\n    public online_panl: cc.Node = null;\n\n    public head_player_8 = null;\n    public Promptbox = null;\n    public updateBetRegionPos: any[] = [null, null, null, null];\n\n    public initBetRegionPos: any[] = [];\n    public designResolutionW: number = 1334;//设计分辨率\n    public designResolutionH: number = 750;\n    @property({ type: rankTemp, tooltip: '自定义数据属性' })\n    rankTemps = [];\n\n    private aArray: number[] = [1, 2, 3, 4];\n\n    private BGState:boolean = true;\n\n    // static instance: UIMaskManager = null;\n    // static GetInstance() {\n    //     if (this.instance == null) {\n    //         this.instance = new cc.Node(\"UIMaskManager\").addComponent(this);\n    //     }\n    //     return this.instance;\n    // }\n\n    init() {\n        let self = this;\n        this.Promptbox = cc.find('Canvas/Promptbox');\n        this.head_player_8 = cc.find('Canvas/Centerlayer/head_player_8');\n        this.tipbg = cc.find('Canvas/Tips/p_trumpet_bg').getComponent(cc.Sprite);\n        this.resize();\n        for (let value of this.aArray) {\n            cc.log('hahahahahaaaaaaaa', value);\n        }\n    }\n\n    onLoad() {\n        this.init();\n        this.head_player_8.on('touchend', () => { this.onclick('head_player_8'); })\n        events.register(EventKind.S2C_OnlineP, \"brnnGameView\", this.addOnlineList.bind(this));//在线玩家列表\n        events.register(EventKind.S2C_History, \"brnnGameView\", this.roomInfo.bind(this));\n        events.register(EventKind.S2C_Err, \"brnnGameView\", this.getErrMsg.bind(this));\n\n        // events.register(EventKind.S2C_ServerconnectClose, \"brnnGameView\", this.serverClose.bind(this));\n\n        // let action1 = cc.cardinalSplineTo(5, [0, 0], 0);\n\n    }\n    start() {\n        this.whetherPlayAudio();\n    }\n    /**\n    * 是否播放音效\n    */\n    whetherPlayAudio() {\n        if( !cc.isValid( this.btn_sound ) ||\n            !cc.isValid( this.btn_mute ) )\n        {\n            return;\n        }\n        \n        if (this.BGState == true) {\n            this.btn_sound.active = true;\n            this.btn_mute.active = false;\n            audiotool.volume_iudioSource(false);\n            this.node.getComponent(cc.AudioSource).mute = false;\n        } else {\n            this.btn_sound.active = false;\n            this.btn_mute.active = true;\n            audiotool.volume_iudioSource(true);\n            this.node.getComponent(cc.AudioSource).mute = true;\n        }\n    }\n    /**适配 */\n    private resize() {\n        let self = this;\n        /**筹码按钮适配 */\n        for (let i = 0; i < this.grp_chip_btn.length; i++) {\n            this.grp_chip_btn[i].node.x = cc.winSize.width * (this.grp_chip_btn[i].node.x / this.designResolutionW);\n        }\n        this.tipbg.node.width = cc.winSize.width * (this.tipbg.node.width / this.designResolutionW);\n        this.tipbg.node.height = cc.winSize.height * (this.tipbg.node.height / this.designResolutionH);\n\n        /**投注区域适配 */\n        for (let j = 0; j < this.bet_region.length; j++) {\n            this.bet_region[j].x = cc.winSize.width * (this.bet_region[j].x / this.designResolutionW);\n            this.bet_region[j].y = cc.winSize.height * (this.bet_region[j].y / this.designResolutionH);\n            this.initBetRegionPos.push(this.bet_region[j].position);\n            this.bet_region[j].width = cc.winSize.width * (this.bet_region[j].width / this.designResolutionW);\n            this.bet_region[j].height = cc.winSize.height * (this.bet_region[j].height / this.designResolutionH);\n            for (let k = 0; k < this.bet_region[j].childrenCount; k++) {\n                this.bet_region[j].children[k].x = cc.winSize.width * (this.bet_region[j].children[k].x / this.designResolutionW);\n                this.bet_region[j].children[k].y = cc.winSize.height * (this.bet_region[j].children[k].y / this.designResolutionH);\n\n            }\n        }\n        /**牌的位置适配 */\n        for (let m = 1; m < this.card_node.length; m++) {\n            this.card_node[m].x = cc.winSize.width * (this.card_node[m].x / this.designResolutionW);\n            this.card_node[m].y = cc.winSize.height * (this.card_node[m].y / this.designResolutionH);\n        }\n\n    }\n    private onclick(targetname: string) {\n        audiotool.play_audioSource(audiotool.LoadAudio(24));\n        if (targetname == \"head_player_8\") {\n            let msg = {\n                id: 15\n            }\n            events.dispatch(EventKind.C2S_OnlineP, msg);\n        }\n    }\n\n    touchSoundMuteBtn(event, customIndex) {\n        if( !cc.isValid( this.btn_sound ) ||\n            !cc.isValid( this.btn_mute ) )\n        {\n            return;\n        }\n        if (customIndex == 0) {\n            audiotool.play_audioSource(audiotool.LoadAudio(24));\n            this.scheduleOnce( ()=>{\n                                        if( !cc.isValid( this.btn_sound ) ||\n                                            !cc.isValid( this.btn_mute ) )\n                                        {\n                                            return;\n                                        }\n                                        brnnglobal.isSoundOpen = false;\n                                        this.btn_sound.active = false;\n                                        this.btn_mute.active = true;\n                                        audiotool.volume_iudioSource(true);\n                                        this.node.getComponent(cc.AudioSource).mute = true;\n                                        this.BGState = false;\n                                    } , 0.3 )\n        } else {\n            brnnglobal.isSoundOpen = true;\n            this.btn_sound.active = true;\n            this.btn_mute.active = false;\n            audiotool.volume_iudioSource(false);\n            this.node.getComponent(cc.AudioSource).mute = false;\n            this.BGState = true;\n        }\n    }\n\n    /**添加在线玩家列表 */\n    private addOnlineList(xdata: any) {\n        let self = this;\n        if(!cc.isValid( this.addonlin_node ) )return;\n        this.addonlin_node.active = true;\n        if (xdata == null) return;\n        let mdata = JSON.parse(xdata.data);\n        if (this.online_panl != null) {\n            this.online_panl.removeFromParent(false);\n        }\n        this.online_panl = cc.instantiate(this.onlinePanl);\n        let brnnonlinePanl = this.online_panl.getComponent('brnnonlinePanl');\n        brnnonlinePanl.onLinePlayerList(mdata);\n        this.addonlin_node.addChild(this.online_panl);\n        let baak_btn = this.online_panl.getChildByName('p_btn_back');\n        baak_btn.on('touchend', () => {\n            if(!cc.isValid( this.addonlin_node ) )return;\n            audiotool.play_audioSource(audiotool.LoadAudio(24));\n            this.addonlin_node.removeChild(this.online_panl);\n            this.addonlin_node.active = false;\n        })\n    }\n\n    /**退出房间重新获取房间列表历史 */\n    public roomInfo(xdata: any) {\n        if (!xdata) {\n            return;\n        }\n        cc.log('退出房间列表历史');\n        configuration.outInitListHistory(xdata);\n    }\n    /**错误提示\n     * @param err=0：玩家不是庄家 \n     * @param err=1：上庄金额不足\n     * @param err=2：玩家不再房间内\n     * @param err=3：玩家已经在房间内\n     * @param err=4：玩家不在房间内\n     * @param err=5：不存在房间\n     * @param err=6：房间不可下注\n     * @param err=7：已经在上庄列表中\n     * @param err=8：庄家金币不足\n     * @param err=9：当前账号已存在，玩家已经在游戏中\n     * @param err=10：玩家已经达到此局最大下注金额\n     * @param err=11：庄家不允许下注\n     * @param err=12：庄家不允许进行上庄列表操作\n     * @param err=13：玩家重复登录\n     * @param err=14：玩家金币不足赔，不允许下注\n     * @param err=15：玩家金币不足\n     */\n    private getErrMsg(xdata: any) {\n        if (!xdata) return;\n        let mdata = xdata.resultCode;\n        if (!mdata) return;\n        let err_tip = cc.instantiate(this.err_item);\n        let tip_lab = err_tip.getChildByName('tip_lab');\n        if (mdata == 1) {\n            tip_lab.getComponent(cc.Label).string = '非法数据';\n            this.node.addChild(err_tip);\n            err_tip.getComponent('promptbox').initPrompt();\n        } else if (mdata == 2) {\n            tip_lab.getComponent(cc.Label).string = '余额不足';\n            this.node.addChild(err_tip);\n            err_tip.getComponent('promptbox').initPrompt();\n        } else if (mdata == 3) {\n            tip_lab.getComponent(cc.Label).string = '数据库读写失败';\n            this.node.addChild(err_tip);\n            err_tip.getComponent('promptbox').initPrompt();\n        } else if (mdata == 4) {\n            tip_lab.getComponent(cc.Label).string = '投注时间截止';\n            this.node.addChild(err_tip);\n            err_tip.getComponent('promptbox').initPrompt();\n        } else if (mdata == 5) {\n            tip_lab.getComponent(cc.Label).string = '投注超额';\n            this.node.addChild(err_tip);\n            err_tip.getComponent('promptbox').initPrompt();\n        } else if (mdata == 6) {\n            tip_lab.getComponent(cc.Label).string = '籌碼不存在';\n            this.node.addChild(err_tip);\n            err_tip.getComponent('promptbox').initPrompt();\n        }\n    }\n\n    private serverClose(data: any) {\n        // let err_tip = cc.instantiate(this.err_item);\n        // let tip_lab = err_tip.getChildByName('tip_lab');\n        // tip_lab.getComponent(cc.Label).string = '网络断开，正在努力连接中';\n        // this.node.addChild(err_tip);\n        // err_tip.getComponent('promptbox').initPrompt();\n    }\n    update() {\n    }\n    onDestroy() {\n        cc.audioEngine.stopAll();\n\n        this.head_player_8.off('touchend', () => { this.onclick('head_player_8'); })\n\n        events.unregister(EventKind.S2C_OnlineP, \"brnnGameView\");//在线玩家列表\n        events.unregister(EventKind.S2C_History, \"brnnGameView\");\n        events.unregister(EventKind.S2C_Err, \"brnnGameView\");\n        // events.unregister(EventKind.S2C_ServerconnectClose, \"brnnGameView\");\n\n        this.initBetRegionPos = [];\n    }\n\n    /***\n     * ░░░░░░░░░░░░░░░░░░░░░░░░▄░░\n     * ░░░░░░░░░▐█░░░░░░░░░░░▄▀▒▌░\n     * ░░░░░░░░▐▀▒█░░░░░░░░▄▀▒▒▒▐\n     * ░░░░░░░▐▄▀▒▒▀▀▀▀▄▄▄▀▒▒▒▒▒▐\n     * ░░░░░▄▄▀▒░▒▒▒▒▒▒▒▒▒█▒▒▄█▒▐\n     * ░░░▄▀▒▒▒░░░▒▒▒░░░▒▒▒▀██▀▒▌\n     * ░░▐▒▒▒▄▄▒▒▒▒░░░▒▒▒▒▒▒▒▀▄▒▒\n     * ░░▌░░▌█▀▒▒▒▒▒▄▀█▄▒▒▒▒▒▒▒█▒▐\n     * ░▐░░░▒▒▒▒▒▒▒▒▌██▀▒▒░░░▒▒▒▀▄\n     * ░▌░▒▄██▄▒▒▒▒▒▒▒▒▒░░░░░░▒▒▒▒\n     * ▀▒▀▐▄█▄█▌▄░▀▒▒░░░░░░░░░░▒▒▒\n     * 单身狗就这样默默地看着你，一句话也不说。\n     */\n}\n","class brnnGlobal {\n    protected static instance: brnnGlobal;\n    public static getInstance(): brnnGlobal {\n        if (!this.instance) {\n            this.instance = new brnnGlobal();\n        }\n        return this.instance;\n    }\n    public enoughgold: boolean = true;//当前玩家金币是否低于可玩金币\n    public isxz: boolean = false;//是否可以点击筹码池\n    public isSoundOpen: boolean = true;//是否开起音效\n    public isroomExit: boolean = false; //是否是从房间退出到列表\n    public isChangbanker: boolean = false; //是否进行换庄下庄\n    public isBet: boolean = true;//是否能够下注\n    public isRoundBeenBet: boolean = false;//当前玩家当局是否下过注\n    public roomname: string = '';//进入房间的名称\n    public roomid: number = 0;//进入房间的房间id\n    public isLottery: boolean = false;//是否在load界面接收到开奖信息\n    public isHallBtnClicked:boolean = false; // 房间列表按钮是否点击过\n}\nexport const brnnglobal=brnnGlobal.getInstance();\n\n\n","const {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class brnnMessageBox extends cc.Component{\r\n    ButtonOK:cc.Node = null;\r\n    ButtonCancel:cc.Node = null;\r\n    ButtonClose:cc.Node = null;\r\n    fnCallbackOK:Function = null;\r\n    fnCallbackCancel:Function = null;\r\n    messageLabel:cc.Label = null;\r\n    FrameBox:cc.Node = null;\r\n\r\n    start(){\r\n        let MaskLayer = cc.find( \"MaskLayer\" , this.node );\r\n        MaskLayer.width = cc.winSize.width;\r\n        MaskLayer.height = cc.winSize.height;\r\n\r\n        this.ButtonOK = cc.find( \"FrameBox/BtnOK\" , this.node );\r\n        \r\n        this.ButtonCancel = cc.find( \"FrameBox/BtnCancel\" , this.node );\r\n        this.ButtonClose = cc.find( \"FrameBox/BtnClose\" , this.node );\r\n\r\n        let messagenode = cc.find(\"FrameBox/Message\",this.node);\r\n        this.messageLabel = messagenode.getComponent(cc.Label);\r\n\r\n        this.FrameBox = cc.find( \"FrameBox\" , this.node );\r\n\r\n        this.node.active = false;\r\n    }\r\n\r\n    close(){\r\n        if( this.node.isValid)\r\n        {\r\n            this.node.destroy();\r\n        } \r\n    }\r\n\r\n    /**\r\n     * 弹窗初始化\r\n     * @param tips              信息内容 \r\n     * @param fnCallbackOK      确认回调\r\n     * @param fnCallbackCancel  取消回调 \r\n     * @param isOK              是否显示确认按钮\r\n     * @param isCancel          是否显示取消按钮\r\n     * @param isClose           是否显示关闭按钮\r\n     */\r\n    init( tips:string , fnCallbackOK:Function = null , fnCallbackCancel:Function = null , isOK:boolean = false , isCancel:boolean = false , isClose:boolean = false )\r\n    {\r\n        if( cc.isValid( this.messageLabel ) )\r\n        {\r\n            this.messageLabel.string = tips;\r\n        }\r\n\r\n        if( cc.isValid( fnCallbackOK ) )\r\n        {\r\n            this.fnCallbackOK = fnCallbackOK;\r\n        }\r\n\r\n        if( cc.isValid( fnCallbackCancel ) )\r\n        {\r\n            this.fnCallbackCancel = fnCallbackCancel;\r\n        }\r\n\r\n        if( cc.isValid( this.ButtonOK ) )\r\n        {\r\n            this.ButtonOK.active = isOK;\r\n\r\n            if( isOK && !isCancel )\r\n            {\r\n                this.ButtonOK.x = 0;\r\n            }\r\n        }\r\n\r\n        if( cc.isValid( this.ButtonCancel ) )\r\n        {\r\n            this.ButtonCancel.active = isCancel;\r\n        }\r\n\r\n        if( cc.isValid( this.ButtonClose ) )\r\n        {\r\n            this.ButtonClose.active = isClose;\r\n        }\r\n\r\n        if( cc.isValid( this.FrameBox ) )\r\n        {\r\n            this.FrameBox.active = true;\r\n        }\r\n        else if( cc.isValid( fnCallbackCancel ) )\r\n        {\r\n            this.onClickCancel(null,null);\r\n        }\r\n    }\r\n\r\n    onClickOK(event, customEventData){\r\n        if(this.fnCallbackOK){\r\n            this.fnCallbackOK();\r\n        }\r\n\r\n        this.close();\r\n    }\r\n\r\n    onClickCancel(event, customEventData){\r\n        if(this.fnCallbackCancel){\r\n            this.fnCallbackCancel();\r\n        }\r\n        \r\n        this.close();     \r\n    }  \r\n};\r\n","/**\n * 方法类\n * 其他脚本使用此类  import Configuration from \"./Configuration\"\n */\nclass brnnUtils {\n\n    protected static instance: brnnUtils;\n    private MessageBoxPrefab:cc.Prefab = null;\n\n    public static getInstance(): brnnUtils {\n        if (!this.instance) {\n            this.instance = new brnnUtils();\n        }\n        return this.instance;\n    }\n    addClickEvent(node, target, component, handler) {\n        var eventHandler = new cc.Component.EventHandler();\n        eventHandler.target = target;\n        eventHandler.component = component;\n        eventHandler.handler = handler;\n\n        var clickEvents = node.getComponent(cc.Button).clickEvents;\n        clickEvents.push(eventHandler);\n    }\n\n    setMessageBoxPrefab( prefab:cc.Prefab )\n    {\n        this.MessageBoxPrefab = prefab;\n    }\n\n    showMessageBox( parent:cc.Node , tips:string , fnCallbackOK:Function = null, fnCallbackCancel:Function = null , isOK:boolean = true , isCancel:boolean = false , isClose:boolean = false )\n    {\n        if( this.MessageBoxPrefab )\n        {\n            let messagebox = cc.instantiate( this.MessageBoxPrefab );\n            if( cc.isValid( messagebox ) )\n            {\n                parent.addChild(messagebox,100);\n                setTimeout( ()=>{\n                    if( cc.isValid( messagebox ) )\n                    {\n                        let msgboxscript = messagebox.getComponent(\"brnnMessageBox\");\n                        if( cc.isValid( msgboxscript ) )\n                        {\n                            msgboxscript.init( tips , fnCallbackOK , fnCallbackCancel , isOK , isCancel , isClose );\n                        }\n                        messagebox.active = true;\n                    }\n                    else if( cc.isValid( fnCallbackCancel ) )\n                    {\n                        fnCallbackCancel();\n                    }\n                    } , 0.1 * 1000 )\n            }\n        }\n    }\n\n}\nexport const brnnutils = brnnUtils.getInstance();\n","/*\n * @Author: burt\n * @Date: 2019-08-22 13:10:21\n * @LastEditors: burt\n * @LastEditTime: 2019-08-22 13:50:12\n * @Description: \n */\nimport { events, EventKind } from '../brnntools/brnn_event';\nimport { msg, msg as Msg } from \"../brnnproto/brnn_proto_msg\";\nimport { configuration } from '../brnnutils/brnnConfiguration';\n\ntype IResponseFunc = (msg: any) => void;\n\nconst { ccclass } = cc._decorator;\n\n\n\n@ccclass\nclass Client{\n    private static _instance: Client;\n    private io: WebSocket;\n    private timer: number;\n    private mapHandler:Map< Msg.SubCommand, any>;\n    private ReConnectCount:number;\n    private curRootNode:cc.Node;\n\n    constructor() {\n        this.timer = 0;\n        this.io = undefined;\n        this.mapHandler = new Map();\n        this.ReConnectCount = 0;\n        this.curRootNode = null;\n\n        this.mapHandler[ Msg.SubCommand.EnumSubHeartBeatReq ] = Msg.HeartBeatReq;\n        this.mapHandler[ Msg.SubCommand.EnumSubHeartBeatResp ] = Msg.HeartBeatResp;\n        this.mapHandler[ Msg.SubCommand.EnumSubLoginReq ] = Msg.LoginReq;\n        this.mapHandler[ Msg.SubCommand.EnumSubLoginResp ] = Msg.LoginResp;\n        this.mapHandler[ Msg.SubCommand.EnumSubUserBetReq ] = Msg.UserBetReq;\n        this.mapHandler[ Msg.SubCommand.EnumSubUserBetResp ] = Msg.UserBetResp;\n        this.mapHandler[ Msg.SubCommand.EnumSubGameStart ] = Msg.GameStart;\n        this.mapHandler[ Msg.SubCommand.EnumSubGameStartBet ] = Msg.GameStartBet;\n        this.mapHandler[ Msg.SubCommand.EnumSubGameAward ] = Msg.GameAward;\n\n        events.register(EventKind.C2S_PlayerBet, \"send\", this.BetRequest.bind(this));\n    }\n\n    public static getInstance(): Client {\n        this._instance || (this._instance = new Client());\n        return this._instance;\n    }\n\n    setCurSceneRootNode( node:cc.Node )\n    {\n        this.curRootNode = node;\n    }\n\n    /**\n     * name\n     */\n    public init(): void {\n        this.io || this.initSocket();\n    }\n\n    // public registerCallBack(kind: msg.msg.MessageID, func: IResponseFunc): void {\n    //     this.mapHandler.set(kind, func);\n    // }\n\n    public registerCallBack(kind: number, func: IResponseFunc): void {\n        // this.mapHandler.set(kind, func);\n    }\n    /**\n     *  关闭websocket\n     * @param \n     */\n    public closeWebsock() {\n        cc.log('主动断开连接websocket');\n        if( this.io )\n        {\n            this.io.close();\n            this.stopPing( null , false );\n            this.io.onopen = this.io.onerror = this.io.onclose = this.io.onmessage = null;\n            this.io = null;\n            if (this.stop != null) {\n                clearTimeout(this.stop);\n                this.stop = null;\n            }\n            clearInterval(this.timer);\n            this.timer = null;\n        }\n    }\n    public initSocket() {\n        this.closeWebsock();\n\n        let ServerURL = \"ws://127.0.0.1:1228\";\n        if ((cc.sys.platform === cc.sys.ANDROID || cc.sys.os === cc.sys.OS_ANDROID) && ServerURL.indexOf('wss://') == 0) {\n            this.io = new WebSocket(ServerURL, {}, cc.url.raw('resources/hall/cacert.pem'));\n        } else {\n            this.io = new WebSocket(ServerURL);\n        }\n\n        // this.io = new WebSocket(app.ServerURL);\n        this.io.binaryType = \"arraybuffer\";\n        cc.log(\"连接服务器:\", ServerURL);\n        this.io.onopen = (evt: Event) => {\n            cc.log(\"服务器连接成功\");\n            this.startPing();\n            this.LoginTest();\n            // events.dispatch(EventKind.S2C_Connect);\n        }\n        this.io.onmessage = (evt: MessageEvent) => {\n            this.onReceiveMessageEvent(evt);\n        }\n        this.io.onerror = (evt: Event) => {\n            cc.log(\"服务器连接失败\");\n            this.stopPing( evt );\n        }\n        this.io.onclose = (evt: CloseEvent) => {\n            cc.log(\"服务器连接关闭\");\n            this.stopPing( evt , true);\n        }\n    }\n    private onReceiveMessageEvent(evt: MessageEvent): void {\n        this.parseProtoBufId(evt);\n    }\n    /**\n     * Uint8Array[]转int\n     * 相当于二进制加上4位。同时，使用|=号拼接数据，将其还原成最终的int数据\n     * @param uint8Ary Uint8Array类型数组\n     * @return int数字\n     */\n    private Uint8ArrayToInt(uint8Ary: Uint8Array): number {\n        let retInt = 0;\n        for (let i = 0; i < uint8Ary.length; i++) {\n            retInt |= (uint8Ary[i] << (8 * (uint8Ary.length - i - 1)));\n        }\n        return retInt;\n    }\n    private parseProtoBufId(buffer: MessageEvent) {\n        const arrayBuffer: ArrayBuffer = buffer.data;\n        let dataUnit8Array = new Uint8Array(arrayBuffer);\n        //前两位为协议序号，需要解一下协议序号\n        const id = this.Uint8ArrayToInt(dataUnit8Array.slice(0, 2));\n        dataUnit8Array = dataUnit8Array.slice(2);\n        this.distrubuteMsg(id, dataUnit8Array)\n    }\n\n    private distrubuteMsg(id, data) {\n        let bodyClass: any = this.mapHandler[ id ];\n        if(!bodyClass){\n            cc.warn(' distrubuteMsg 未知的协议id：', id);\n            return;\n        }\n        const gameMsg: any = bodyClass.decode(data);\n        cc.log(\"协议id:\" + id , \"data:\", gameMsg );\n        this.Recive(id, gameMsg);\n\n    }\n\n    /**\n     * 处理消息\n     * @param id        协议id \n     * @param data      协议内容\n     * @param isQueue    是否是伫列\n     * @param trycount  伫列重试次数\n     */\n    public Recive(p_id : number, p_data : any , isQueue:boolean = false , trycount:number = 0 ){ //这边收到的就是json的字串了\n        if(  p_data.resultCode == null || p_data.resultCode ==　Msg.ResultCode.Success ) \n        {\n            switch( p_id )\n            {\n                case Msg.SubCommand.EnumSubHeartBeatResp:\n                    break;\n                case Msg.SubCommand.EnumSubLoginResp:\n                    configuration.initUserInfo( p_data );\n                    break;\n                case Msg.SubCommand.EnumSubUserBetResp:\n                    cc.log(\"Msg.SubCommand.EnumSubUserBetResp============\")\n                    cc.log(\"p_data.result=\",p_data.result)\n                    if( p_data.result )\n                    {\n                        cc.log( \"p_data.result.resultCode=\",p_data.result.resultCode )\n                    }\n                    events.dispatch(EventKind.S2C_PlayerBet, p_data);\n                    break;\n                case Msg.SubCommand.EnumSubGameStart:\n                    events.dispatch(EventKind.S2C_GameStart, p_data);\n                    break;\n                case Msg.SubCommand.EnumSubGameStartBet:\n                    events.dispatch(EventKind.S2C_GameStartBet, p_data);\n                    break;\n                case Msg.SubCommand.EnumSubGameAward:\n                    events.dispatch(EventKind.S2C_GameAward, p_data);\n                    break;\n                default:\n                    break;\n            }\n        }\n        else\n        {\n            events.dispatch(EventKind.S2C_Err, p_data);\n        }\n    }\n    /**登陆房间列表 */\n    private LoginTest() {\n        this.sendMessage( Msg.SubCommand.EnumSubLoginReq , Msg.LoginReq.create());\n        cc.log('发送登录消息');\n    }\n\n    // private startPing(): void {\n    //     this.timer = setInterval(() => {\n    //         // cc.log(\"心跳    \" + msg.MessageID.Ping);\n    //         this.sendMessage(msg.MessageID.MsgPing, {});\n    //     }, 5000);\n    // }\n\n    private startPing(): void {\n        this.timer = setInterval(() => {\n            // cc.log(\"心跳    \" + 0);\n            this.sendMessage( Msg.SubCommand.EnumSubHeartBeatReq, Msg.HeartBeatReq.create() );\n        }, 5000);\n    }\n    stop: any = null;\n    private stopPing(evt:any , reconnect: boolean = true): void {\n        if (this.timer) {\n            clearInterval(this.timer);\n            this.timer = 0;\n        }\n        if (reconnect) {\n            if (this.stop == null) {\n                let tryConnect = ()=>{\n                    if (this.io.readyState == WebSocket.OPEN) {\n                        return;\n                    }\n                    this.ReConnectCount++;\n                    events.dispatch(EventKind.S2C_ServerconnectClose, evt);\n                    this.initSocket();\n                    this.stop = null;\n                }\n                if( this.ReConnectCount == 0 )\n                {\n                    tryConnect();\n                }\n                this.stop = setTimeout(tryConnect, 2800)\n            }\n        }\n    }\n\n    /**\n     * 发送协议\n     * @param kind 协议名\n     * @param data 数据\n     */\n    public sendMessage(kind: number, data: any): void {\n        if (this.io == null) return;\n        if (this.io.readyState !== WebSocket.OPEN) {\n            return;\n        }\n        let bodyClass: any = this.mapHandler[ kind ];\n        if(!bodyClass){\n            cc.warn('sendMessage 未知的协议id：', kind);\n            return;\n        }\n        const message = bodyClass.create(data);\n        cc.log(\"发送的数据:\", message);\n        const buffer = bodyClass.encode(message).finish();\n        // leaf 前两位为协议序号，故需包装一下\n        const addTagBuffer = this.protoBufAddTag(kind, buffer);\n        this.io.send(addTagBuffer.buffer);\n    }\n    private protoBufAddTag(tag: number, buffer: Uint8Array): Uint8Array {\n        const bufferAddTag = new Uint8Array(buffer.length + 2);\n        const tagBinary = this.IntToUint8Array(tag, 16);\n        const tagUnit8 = new Uint8Array(tagBinary);\n\n        bufferAddTag.set(tagUnit8, 0);\n        bufferAddTag.set(buffer.subarray(0, buffer.length), 2);\n\n        return bufferAddTag;\n    }\n    private IntToUint8Array(num: number, bits: number): number[] {\n        const resArry = [];\n        const xresArry = [];\n        const binaryStr: string = num.toString(2);\n        for (const chr of binaryStr) {\n            resArry.push(parseInt(chr, 10));\n        }\n\n        if (bits) {\n            for (let r = resArry.length; r < bits; r++) {\n                resArry.unshift(0);\n            }\n        }\n\n        const resArryStr = resArry.join(\"\");\n        for (let j = 0; j < bits; j += 8) {\n            xresArry.push(parseInt(resArryStr.slice(j, j + 8), 2));\n        }\n\n        return xresArry;\n    }\n\n    private BetRequest( data:Msg.IUserBetReq )\n    {\n        this.sendMessage( Msg.SubCommand.EnumSubUserBetReq , Msg.UserBetReq.create( data ));\n    }\n}\n\nexport const websocket = Client.getInstance();\n// export const initWebSocket = () => {\n//     Client.getInstance().init();\n// }","export const app = {\n    Version: \"1.0.61\",\n    IconPath: \"\",\n    GameKind: \"\",\n    UserID: [\n        955115540, 585268413, 585268413, 541856766, 271119740, 896291914,\n        878270101, 757337112, 533023585, 494551945, 500451011,\n        899635022, 907473181, 881495959, 170339127, 929678603\n    ],\n    Password: \"123456\",\n    GameID: \"\",\n    // ServerURL: \"ws://10.63.90.80:1228\",\n    // ServerURL: \"ws://game.539316.com/bairennn\", // 游戏服务器地址 dv  614816744--517919\n    // ServerURL: \"ws://no1tyo.lymrmfyp.com:12351/bairennn\", // 游戏服务器地址 pre 166031355 970006304 335296617  918188800\n    // ServerURL: \"ws://10.25.100.101:1228\",\n    ServerURL:\"ws://127.0.0.1:1228\",\n};\nexport const postMsg = {\n    /** 脚本加载完成后通过window.postMessage发送 */\n    CLIENT_LOAD: \"__loading\",\n    /** 服务器连接成功后通过window.postMessage发送 */\n    CLIENT_ENTER: \"__enter\",\n    /** 游戏登陆成功后通过window.postMessage发送 */\n    CLIENT_DONE: \"__done\",\n    /** 用户确认退出游戏返回大厅后通过window.postMessage发送 */\n    CLIENT_RETURN: \"__back\",\n    /** 资源加载进度 */\n    CLIENT_PROGRESS: \"__progress\",\n};\nexport const audios = {\n    BACKGROUND: \"music_background_mp3\",\n    NEW_RED_PACK: \"effect_new_pack_mp3\",\n    EFFECT_DRUM: \"effect_drum_mp3\",\n    EFFECT_CLICK: \"effect_click_mp3\",\n    EFFECT_BOOM: \"effect_boom_mp3\",\n    EFFECT_OPEN: \"effect_open_mp3\",\n};\n","const { ccclass } = cc._decorator;\n\ntype IBindFunc = (data: any) => void;\n\n@ccclass\nclass EventManage {\n    private static _instance: EventManage;\n    private _mapHandler: Map<EventKind, Map<string, IBindFunc>>;\n\n    constructor() {\n        this._mapHandler = new Map();\n    }\n    public static getInstance(): EventManage {\n        this._instance || (this._instance = new EventManage());\n        return this._instance;\n    }\n    /**\n     * 注册监听事件\n     * @param kind 事件类型\n     * @param className 响应函数所属类名\n     * @param func 响应函数\n     */\n    public register(kind: EventKind, className: string, func: IBindFunc): void {\n        const funcs = this._mapHandler.get(kind) || (new Map());\n        if (funcs.has(className)) {\n            return\n        }\n        funcs.set(className, func);\n        this._mapHandler.set(kind, funcs);\n    }\n\n    /**\n     * 取消监听事件\n     * @param kind 事件类型\n     * @param className 响应函数所属类名\n     */\n    public unregister(kind: EventKind, className: string): void {\n        if (!this._mapHandler.has(kind)) {\n            return\n        }\n        const funcs = this._mapHandler.get(kind);\n        funcs.has(className) && funcs.delete(className);\n        this._mapHandler.set(kind, funcs);\n    }\n\n    /**\n     * 派发事件\n     * @param kind 事件类型\n     * @param data 传递的数据\n     */\n    public dispatch(kind: EventKind, data?: any): void {\n        if (!this._mapHandler.has(kind)) {\n            return\n        }\n        const funcs = this._mapHandler.get(kind);\n        funcs.forEach((value: IBindFunc) => {\n            value(data);\n        })\n    }\n}\n/**\n * \n * @param kind 事件类型\n * @param  0 玩家登陆  1开奖历史  2单个开奖结果  3玩家加入房间 4显示的玩家列表\n * @param  5 申请上庄  6申请退出上庄列表 7上庄列表  8换庄下庄 9玩家下注\n * @param  10开奖结果  11 玩家离开房间   12公告      13离开游戏退到大厅  \n * @param  14   15 在线玩家列表 16续投 17上庄成功后金币修改 18 发送断线重连 19断线重连（上庄列表）\n * @param  20 断线重连（显示的玩家列表） 21 断线重连（玩家加入房间）\n */\nexport const enum EventKind {\n    /**客户端——————————————服务器*/\n    C2S_Login,\n    C2S_History,\n    C2S_Result,\n    C2S_EnterRoom,\n    C2S_ShowPlayerList,\n    C2S_PreBanker,\n    C2S_ExitPreBanker,\n    C2S_PreBankerList,\n    C2S_mbankerChange,\n    C2S_PlayerBet,\n    C2S_OpenLoterry,\n    C2S_playerExitRoom,\n    C2S_NoticeMsg,\n    C2S_ExitGame,\n    C2S_bet,\n    C2S_OnlineP,\n    C2S_Voting,\n    C2S_SzModifgold,\n    C2S_Reconnection,\n    C2S_RenewpreBankerList,\n    C2S_RenewPlayerList,\n    C2S_RenewEnter,\n    /**服务器——————————————客户端 */\n\n    /**开奖结果*/\n    S2C_Self,\n    S2C_Login,\n    S2C_History,\n    S2C_Result,\n    S2CEnterRoom,\n    S2C_ShowPlayerList,\n    S2C_PreBanker,\n    S2C_ExitPreBanker,\n    S2C_PreBankerList,\n    S2C_mbankerChange,\n    S2C_PlayerBet,\n    S2C_OpenLoterry,\n    S2C_playerExitRoom,\n    S2C_NoticeMsg,\n    S2C_Err,\n    S2C_bet,\n    S2C_OnlineP,\n    S2C_Voting,\n    S2C_SzModifgold,\n    S2C_ServerconnectClose,\n    S2C_Reconnection,\n    S2C_RenewpreBankerList,\n    S2C_RenewPlayerList,\n    S2C_RenewEnter,\n    S2C_OtherPlayerBet,\n    S2C_GameStart,\n    S2C_GameStartBet,\n    S2C_GameAward,\n    S2C_RoundPlayInfoPush,\n}\n\nexport const events = EventManage.getInstance();\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"brnn_protobuf\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.msg = (function() {\n\n    /**\n     * Namespace msg.\n     * @exports msg\n     * @namespace\n     */\n    var msg = {};\n\n    /**\n     * SubCommand enum.\n     * @name msg.SubCommand\n     * @enum {number}\n     * @property {number} EnumSubHeartBeatReq=0 EnumSubHeartBeatReq value\n     * @property {number} EnumSubHeartBeatResp=1 EnumSubHeartBeatResp value\n     * @property {number} EnumSubLoginReq=2 EnumSubLoginReq value\n     * @property {number} EnumSubLoginResp=3 EnumSubLoginResp value\n     * @property {number} EnumSubUserBetReq=4 EnumSubUserBetReq value\n     * @property {number} EnumSubUserBetResp=5 EnumSubUserBetResp value\n     * @property {number} EnumSubGameStart=6 EnumSubGameStart value\n     * @property {number} EnumSubGameStartBet=7 EnumSubGameStartBet value\n     * @property {number} EnumSubGameAward=8 EnumSubGameAward value\n     */\n    msg.SubCommand = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"EnumSubHeartBeatReq\"] = 0;\n        values[valuesById[1] = \"EnumSubHeartBeatResp\"] = 1;\n        values[valuesById[2] = \"EnumSubLoginReq\"] = 2;\n        values[valuesById[3] = \"EnumSubLoginResp\"] = 3;\n        values[valuesById[4] = \"EnumSubUserBetReq\"] = 4;\n        values[valuesById[5] = \"EnumSubUserBetResp\"] = 5;\n        values[valuesById[6] = \"EnumSubGameStart\"] = 6;\n        values[valuesById[7] = \"EnumSubGameStartBet\"] = 7;\n        values[valuesById[8] = \"EnumSubGameAward\"] = 8;\n        return values;\n    })();\n\n    msg.HeartBeatReq = (function() {\n\n        /**\n         * Properties of a HeartBeatReq.\n         * @memberof msg\n         * @interface IHeartBeatReq\n         */\n\n        /**\n         * Constructs a new HeartBeatReq.\n         * @memberof msg\n         * @classdesc Represents a HeartBeatReq.\n         * @implements IHeartBeatReq\n         * @constructor\n         * @param {msg.IHeartBeatReq=} [properties] Properties to set\n         */\n        function HeartBeatReq(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new HeartBeatReq instance using the specified properties.\n         * @function create\n         * @memberof msg.HeartBeatReq\n         * @static\n         * @param {msg.IHeartBeatReq=} [properties] Properties to set\n         * @returns {msg.HeartBeatReq} HeartBeatReq instance\n         */\n        HeartBeatReq.create = function create(properties) {\n            return new HeartBeatReq(properties);\n        };\n\n        /**\n         * Encodes the specified HeartBeatReq message. Does not implicitly {@link msg.HeartBeatReq.verify|verify} messages.\n         * @function encode\n         * @memberof msg.HeartBeatReq\n         * @static\n         * @param {msg.IHeartBeatReq} message HeartBeatReq message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HeartBeatReq.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified HeartBeatReq message, length delimited. Does not implicitly {@link msg.HeartBeatReq.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof msg.HeartBeatReq\n         * @static\n         * @param {msg.IHeartBeatReq} message HeartBeatReq message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HeartBeatReq.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a HeartBeatReq message from the specified reader or buffer.\n         * @function decode\n         * @memberof msg.HeartBeatReq\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {msg.HeartBeatReq} HeartBeatReq\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HeartBeatReq.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.HeartBeatReq();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a HeartBeatReq message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof msg.HeartBeatReq\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {msg.HeartBeatReq} HeartBeatReq\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HeartBeatReq.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a HeartBeatReq message.\n         * @function verify\n         * @memberof msg.HeartBeatReq\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        HeartBeatReq.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a HeartBeatReq message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof msg.HeartBeatReq\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {msg.HeartBeatReq} HeartBeatReq\n         */\n        HeartBeatReq.fromObject = function fromObject(object) {\n            if (object instanceof $root.msg.HeartBeatReq)\n                return object;\n            return new $root.msg.HeartBeatReq();\n        };\n\n        /**\n         * Creates a plain object from a HeartBeatReq message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof msg.HeartBeatReq\n         * @static\n         * @param {msg.HeartBeatReq} message HeartBeatReq\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        HeartBeatReq.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this HeartBeatReq to JSON.\n         * @function toJSON\n         * @memberof msg.HeartBeatReq\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        HeartBeatReq.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return HeartBeatReq;\n    })();\n\n    msg.HeartBeatResp = (function() {\n\n        /**\n         * Properties of a HeartBeatResp.\n         * @memberof msg\n         * @interface IHeartBeatResp\n         */\n\n        /**\n         * Constructs a new HeartBeatResp.\n         * @memberof msg\n         * @classdesc Represents a HeartBeatResp.\n         * @implements IHeartBeatResp\n         * @constructor\n         * @param {msg.IHeartBeatResp=} [properties] Properties to set\n         */\n        function HeartBeatResp(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new HeartBeatResp instance using the specified properties.\n         * @function create\n         * @memberof msg.HeartBeatResp\n         * @static\n         * @param {msg.IHeartBeatResp=} [properties] Properties to set\n         * @returns {msg.HeartBeatResp} HeartBeatResp instance\n         */\n        HeartBeatResp.create = function create(properties) {\n            return new HeartBeatResp(properties);\n        };\n\n        /**\n         * Encodes the specified HeartBeatResp message. Does not implicitly {@link msg.HeartBeatResp.verify|verify} messages.\n         * @function encode\n         * @memberof msg.HeartBeatResp\n         * @static\n         * @param {msg.IHeartBeatResp} message HeartBeatResp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HeartBeatResp.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified HeartBeatResp message, length delimited. Does not implicitly {@link msg.HeartBeatResp.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof msg.HeartBeatResp\n         * @static\n         * @param {msg.IHeartBeatResp} message HeartBeatResp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HeartBeatResp.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a HeartBeatResp message from the specified reader or buffer.\n         * @function decode\n         * @memberof msg.HeartBeatResp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {msg.HeartBeatResp} HeartBeatResp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HeartBeatResp.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.HeartBeatResp();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a HeartBeatResp message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof msg.HeartBeatResp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {msg.HeartBeatResp} HeartBeatResp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HeartBeatResp.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a HeartBeatResp message.\n         * @function verify\n         * @memberof msg.HeartBeatResp\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        HeartBeatResp.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a HeartBeatResp message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof msg.HeartBeatResp\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {msg.HeartBeatResp} HeartBeatResp\n         */\n        HeartBeatResp.fromObject = function fromObject(object) {\n            if (object instanceof $root.msg.HeartBeatResp)\n                return object;\n            return new $root.msg.HeartBeatResp();\n        };\n\n        /**\n         * Creates a plain object from a HeartBeatResp message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof msg.HeartBeatResp\n         * @static\n         * @param {msg.HeartBeatResp} message HeartBeatResp\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        HeartBeatResp.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this HeartBeatResp to JSON.\n         * @function toJSON\n         * @memberof msg.HeartBeatResp\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        HeartBeatResp.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return HeartBeatResp;\n    })();\n\n    msg.LoginReq = (function() {\n\n        /**\n         * Properties of a LoginReq.\n         * @memberof msg\n         * @interface ILoginReq\n         */\n\n        /**\n         * Constructs a new LoginReq.\n         * @memberof msg\n         * @classdesc Represents a LoginReq.\n         * @implements ILoginReq\n         * @constructor\n         * @param {msg.ILoginReq=} [properties] Properties to set\n         */\n        function LoginReq(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new LoginReq instance using the specified properties.\n         * @function create\n         * @memberof msg.LoginReq\n         * @static\n         * @param {msg.ILoginReq=} [properties] Properties to set\n         * @returns {msg.LoginReq} LoginReq instance\n         */\n        LoginReq.create = function create(properties) {\n            return new LoginReq(properties);\n        };\n\n        /**\n         * Encodes the specified LoginReq message. Does not implicitly {@link msg.LoginReq.verify|verify} messages.\n         * @function encode\n         * @memberof msg.LoginReq\n         * @static\n         * @param {msg.ILoginReq} message LoginReq message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LoginReq.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified LoginReq message, length delimited. Does not implicitly {@link msg.LoginReq.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof msg.LoginReq\n         * @static\n         * @param {msg.ILoginReq} message LoginReq message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LoginReq.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a LoginReq message from the specified reader or buffer.\n         * @function decode\n         * @memberof msg.LoginReq\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {msg.LoginReq} LoginReq\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LoginReq.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.LoginReq();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a LoginReq message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof msg.LoginReq\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {msg.LoginReq} LoginReq\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LoginReq.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a LoginReq message.\n         * @function verify\n         * @memberof msg.LoginReq\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        LoginReq.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a LoginReq message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof msg.LoginReq\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {msg.LoginReq} LoginReq\n         */\n        LoginReq.fromObject = function fromObject(object) {\n            if (object instanceof $root.msg.LoginReq)\n                return object;\n            return new $root.msg.LoginReq();\n        };\n\n        /**\n         * Creates a plain object from a LoginReq message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof msg.LoginReq\n         * @static\n         * @param {msg.LoginReq} message LoginReq\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        LoginReq.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this LoginReq to JSON.\n         * @function toJSON\n         * @memberof msg.LoginReq\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        LoginReq.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return LoginReq;\n    })();\n\n    msg.LoginResp = (function() {\n\n        /**\n         * Properties of a LoginResp.\n         * @memberof msg\n         * @interface ILoginResp\n         * @property {msg.ResultCode|null} [resultCode] LoginResp resultCode\n         * @property {number|null} [userId] LoginResp userId\n         * @property {number|null} [balance] LoginResp balance\n         */\n\n        /**\n         * Constructs a new LoginResp.\n         * @memberof msg\n         * @classdesc Represents a LoginResp.\n         * @implements ILoginResp\n         * @constructor\n         * @param {msg.ILoginResp=} [properties] Properties to set\n         */\n        function LoginResp(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * LoginResp resultCode.\n         * @member {msg.ResultCode} resultCode\n         * @memberof msg.LoginResp\n         * @instance\n         */\n        LoginResp.prototype.resultCode = 0;\n\n        /**\n         * LoginResp userId.\n         * @member {number} userId\n         * @memberof msg.LoginResp\n         * @instance\n         */\n        LoginResp.prototype.userId = 0;\n\n        /**\n         * LoginResp balance.\n         * @member {number} balance\n         * @memberof msg.LoginResp\n         * @instance\n         */\n        LoginResp.prototype.balance = 0;\n\n        /**\n         * Creates a new LoginResp instance using the specified properties.\n         * @function create\n         * @memberof msg.LoginResp\n         * @static\n         * @param {msg.ILoginResp=} [properties] Properties to set\n         * @returns {msg.LoginResp} LoginResp instance\n         */\n        LoginResp.create = function create(properties) {\n            return new LoginResp(properties);\n        };\n\n        /**\n         * Encodes the specified LoginResp message. Does not implicitly {@link msg.LoginResp.verify|verify} messages.\n         * @function encode\n         * @memberof msg.LoginResp\n         * @static\n         * @param {msg.ILoginResp} message LoginResp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LoginResp.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.resultCode != null && Object.hasOwnProperty.call(message, \"resultCode\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.resultCode);\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);\n            if (message.balance != null && Object.hasOwnProperty.call(message, \"balance\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.balance);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified LoginResp message, length delimited. Does not implicitly {@link msg.LoginResp.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof msg.LoginResp\n         * @static\n         * @param {msg.ILoginResp} message LoginResp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LoginResp.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a LoginResp message from the specified reader or buffer.\n         * @function decode\n         * @memberof msg.LoginResp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {msg.LoginResp} LoginResp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LoginResp.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.LoginResp();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.resultCode = reader.int32();\n                    break;\n                case 2:\n                    message.userId = reader.int32();\n                    break;\n                case 3:\n                    message.balance = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a LoginResp message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof msg.LoginResp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {msg.LoginResp} LoginResp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LoginResp.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a LoginResp message.\n         * @function verify\n         * @memberof msg.LoginResp\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        LoginResp.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.resultCode != null && message.hasOwnProperty(\"resultCode\"))\n                switch (message.resultCode) {\n                default:\n                    return \"resultCode: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                    break;\n                }\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isInteger(message.userId))\n                    return \"userId: integer expected\";\n            if (message.balance != null && message.hasOwnProperty(\"balance\"))\n                if (!$util.isInteger(message.balance))\n                    return \"balance: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a LoginResp message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof msg.LoginResp\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {msg.LoginResp} LoginResp\n         */\n        LoginResp.fromObject = function fromObject(object) {\n            if (object instanceof $root.msg.LoginResp)\n                return object;\n            var message = new $root.msg.LoginResp();\n            switch (object.resultCode) {\n            case \"Success\":\n            case 0:\n                message.resultCode = 0;\n                break;\n            case \"DataIllegal\":\n            case 1:\n                message.resultCode = 1;\n                break;\n            case \"BalanceNotEnough\":\n            case 2:\n                message.resultCode = 2;\n                break;\n            case \"DatabaseReadWriteFailed\":\n            case 3:\n                message.resultCode = 3;\n                break;\n            case \"BetTimeEnd\":\n            case 4:\n                message.resultCode = 4;\n                break;\n            case \"MoreThanLimit\":\n            case 5:\n                message.resultCode = 5;\n                break;\n            case \"ChipDoesNotExits\":\n            case 6:\n                message.resultCode = 6;\n                break;\n            }\n            if (object.userId != null)\n                message.userId = object.userId | 0;\n            if (object.balance != null)\n                message.balance = object.balance | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a LoginResp message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof msg.LoginResp\n         * @static\n         * @param {msg.LoginResp} message LoginResp\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        LoginResp.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.resultCode = options.enums === String ? \"Success\" : 0;\n                object.userId = 0;\n                object.balance = 0;\n            }\n            if (message.resultCode != null && message.hasOwnProperty(\"resultCode\"))\n                object.resultCode = options.enums === String ? $root.msg.ResultCode[message.resultCode] : message.resultCode;\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.balance != null && message.hasOwnProperty(\"balance\"))\n                object.balance = message.balance;\n            return object;\n        };\n\n        /**\n         * Converts this LoginResp to JSON.\n         * @function toJSON\n         * @memberof msg.LoginResp\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        LoginResp.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return LoginResp;\n    })();\n\n    msg.UserBetReq = (function() {\n\n        /**\n         * Properties of a UserBetReq.\n         * @memberof msg\n         * @interface IUserBetReq\n         * @property {msg.EnumArea|null} [area] UserBetReq area\n         * @property {number|null} [amount] UserBetReq amount\n         */\n\n        /**\n         * Constructs a new UserBetReq.\n         * @memberof msg\n         * @classdesc Represents a UserBetReq.\n         * @implements IUserBetReq\n         * @constructor\n         * @param {msg.IUserBetReq=} [properties] Properties to set\n         */\n        function UserBetReq(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * UserBetReq area.\n         * @member {msg.EnumArea} area\n         * @memberof msg.UserBetReq\n         * @instance\n         */\n        UserBetReq.prototype.area = 0;\n\n        /**\n         * UserBetReq amount.\n         * @member {number} amount\n         * @memberof msg.UserBetReq\n         * @instance\n         */\n        UserBetReq.prototype.amount = 0;\n\n        /**\n         * Creates a new UserBetReq instance using the specified properties.\n         * @function create\n         * @memberof msg.UserBetReq\n         * @static\n         * @param {msg.IUserBetReq=} [properties] Properties to set\n         * @returns {msg.UserBetReq} UserBetReq instance\n         */\n        UserBetReq.create = function create(properties) {\n            return new UserBetReq(properties);\n        };\n\n        /**\n         * Encodes the specified UserBetReq message. Does not implicitly {@link msg.UserBetReq.verify|verify} messages.\n         * @function encode\n         * @memberof msg.UserBetReq\n         * @static\n         * @param {msg.IUserBetReq} message UserBetReq message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        UserBetReq.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.area != null && Object.hasOwnProperty.call(message, \"area\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.area);\n            if (message.amount != null && Object.hasOwnProperty.call(message, \"amount\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.amount);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified UserBetReq message, length delimited. Does not implicitly {@link msg.UserBetReq.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof msg.UserBetReq\n         * @static\n         * @param {msg.IUserBetReq} message UserBetReq message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        UserBetReq.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a UserBetReq message from the specified reader or buffer.\n         * @function decode\n         * @memberof msg.UserBetReq\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {msg.UserBetReq} UserBetReq\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        UserBetReq.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.UserBetReq();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.area = reader.int32();\n                    break;\n                case 2:\n                    message.amount = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a UserBetReq message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof msg.UserBetReq\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {msg.UserBetReq} UserBetReq\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        UserBetReq.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a UserBetReq message.\n         * @function verify\n         * @memberof msg.UserBetReq\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        UserBetReq.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.area != null && message.hasOwnProperty(\"area\"))\n                switch (message.area) {\n                default:\n                    return \"area: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                    break;\n                }\n            if (message.amount != null && message.hasOwnProperty(\"amount\"))\n                if (!$util.isInteger(message.amount))\n                    return \"amount: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a UserBetReq message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof msg.UserBetReq\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {msg.UserBetReq} UserBetReq\n         */\n        UserBetReq.fromObject = function fromObject(object) {\n            if (object instanceof $root.msg.UserBetReq)\n                return object;\n            var message = new $root.msg.UserBetReq();\n            switch (object.area) {\n            case \"Banker\":\n            case 0:\n                message.area = 0;\n                break;\n            case \"BetArea1\":\n            case 1:\n                message.area = 1;\n                break;\n            case \"BetArea2\":\n            case 2:\n                message.area = 2;\n                break;\n            }\n            if (object.amount != null)\n                message.amount = object.amount | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a UserBetReq message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof msg.UserBetReq\n         * @static\n         * @param {msg.UserBetReq} message UserBetReq\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        UserBetReq.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.area = options.enums === String ? \"Banker\" : 0;\n                object.amount = 0;\n            }\n            if (message.area != null && message.hasOwnProperty(\"area\"))\n                object.area = options.enums === String ? $root.msg.EnumArea[message.area] : message.area;\n            if (message.amount != null && message.hasOwnProperty(\"amount\"))\n                object.amount = message.amount;\n            return object;\n        };\n\n        /**\n         * Converts this UserBetReq to JSON.\n         * @function toJSON\n         * @memberof msg.UserBetReq\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        UserBetReq.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return UserBetReq;\n    })();\n\n    msg.UserBetResp = (function() {\n\n        /**\n         * Properties of a UserBetResp.\n         * @memberof msg\n         * @interface IUserBetResp\n         * @property {msg.ResultCode|null} [resultCode] UserBetResp resultCode\n         * @property {number|null} [balance] UserBetResp balance\n         * @property {msg.IUserBetReq|null} [userBetReq] UserBetResp userBetReq\n         */\n\n        /**\n         * Constructs a new UserBetResp.\n         * @memberof msg\n         * @classdesc Represents a UserBetResp.\n         * @implements IUserBetResp\n         * @constructor\n         * @param {msg.IUserBetResp=} [properties] Properties to set\n         */\n        function UserBetResp(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * UserBetResp resultCode.\n         * @member {msg.ResultCode} resultCode\n         * @memberof msg.UserBetResp\n         * @instance\n         */\n        UserBetResp.prototype.resultCode = 0;\n\n        /**\n         * UserBetResp balance.\n         * @member {number} balance\n         * @memberof msg.UserBetResp\n         * @instance\n         */\n        UserBetResp.prototype.balance = 0;\n\n        /**\n         * UserBetResp userBetReq.\n         * @member {msg.IUserBetReq|null|undefined} userBetReq\n         * @memberof msg.UserBetResp\n         * @instance\n         */\n        UserBetResp.prototype.userBetReq = null;\n\n        /**\n         * Creates a new UserBetResp instance using the specified properties.\n         * @function create\n         * @memberof msg.UserBetResp\n         * @static\n         * @param {msg.IUserBetResp=} [properties] Properties to set\n         * @returns {msg.UserBetResp} UserBetResp instance\n         */\n        UserBetResp.create = function create(properties) {\n            return new UserBetResp(properties);\n        };\n\n        /**\n         * Encodes the specified UserBetResp message. Does not implicitly {@link msg.UserBetResp.verify|verify} messages.\n         * @function encode\n         * @memberof msg.UserBetResp\n         * @static\n         * @param {msg.IUserBetResp} message UserBetResp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        UserBetResp.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.resultCode != null && Object.hasOwnProperty.call(message, \"resultCode\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.resultCode);\n            if (message.balance != null && Object.hasOwnProperty.call(message, \"balance\"))\n                writer.uint32(/* id 2, wireType 1 =*/17).double(message.balance);\n            if (message.userBetReq != null && Object.hasOwnProperty.call(message, \"userBetReq\"))\n                $root.msg.UserBetReq.encode(message.userBetReq, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified UserBetResp message, length delimited. Does not implicitly {@link msg.UserBetResp.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof msg.UserBetResp\n         * @static\n         * @param {msg.IUserBetResp} message UserBetResp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        UserBetResp.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a UserBetResp message from the specified reader or buffer.\n         * @function decode\n         * @memberof msg.UserBetResp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {msg.UserBetResp} UserBetResp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        UserBetResp.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.UserBetResp();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.resultCode = reader.int32();\n                    break;\n                case 2:\n                    message.balance = reader.double();\n                    break;\n                case 3:\n                    message.userBetReq = $root.msg.UserBetReq.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a UserBetResp message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof msg.UserBetResp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {msg.UserBetResp} UserBetResp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        UserBetResp.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a UserBetResp message.\n         * @function verify\n         * @memberof msg.UserBetResp\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        UserBetResp.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.resultCode != null && message.hasOwnProperty(\"resultCode\"))\n                switch (message.resultCode) {\n                default:\n                    return \"resultCode: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                    break;\n                }\n            if (message.balance != null && message.hasOwnProperty(\"balance\"))\n                if (typeof message.balance !== \"number\")\n                    return \"balance: number expected\";\n            if (message.userBetReq != null && message.hasOwnProperty(\"userBetReq\")) {\n                var error = $root.msg.UserBetReq.verify(message.userBetReq);\n                if (error)\n                    return \"userBetReq.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a UserBetResp message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof msg.UserBetResp\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {msg.UserBetResp} UserBetResp\n         */\n        UserBetResp.fromObject = function fromObject(object) {\n            if (object instanceof $root.msg.UserBetResp)\n                return object;\n            var message = new $root.msg.UserBetResp();\n            switch (object.resultCode) {\n            case \"Success\":\n            case 0:\n                message.resultCode = 0;\n                break;\n            case \"DataIllegal\":\n            case 1:\n                message.resultCode = 1;\n                break;\n            case \"BalanceNotEnough\":\n            case 2:\n                message.resultCode = 2;\n                break;\n            case \"DatabaseReadWriteFailed\":\n            case 3:\n                message.resultCode = 3;\n                break;\n            case \"BetTimeEnd\":\n            case 4:\n                message.resultCode = 4;\n                break;\n            case \"MoreThanLimit\":\n            case 5:\n                message.resultCode = 5;\n                break;\n            case \"ChipDoesNotExits\":\n            case 6:\n                message.resultCode = 6;\n                break;\n            }\n            if (object.balance != null)\n                message.balance = Number(object.balance);\n            if (object.userBetReq != null) {\n                if (typeof object.userBetReq !== \"object\")\n                    throw TypeError(\".msg.UserBetResp.userBetReq: object expected\");\n                message.userBetReq = $root.msg.UserBetReq.fromObject(object.userBetReq);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a UserBetResp message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof msg.UserBetResp\n         * @static\n         * @param {msg.UserBetResp} message UserBetResp\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        UserBetResp.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.resultCode = options.enums === String ? \"Success\" : 0;\n                object.balance = 0;\n                object.userBetReq = null;\n            }\n            if (message.resultCode != null && message.hasOwnProperty(\"resultCode\"))\n                object.resultCode = options.enums === String ? $root.msg.ResultCode[message.resultCode] : message.resultCode;\n            if (message.balance != null && message.hasOwnProperty(\"balance\"))\n                object.balance = options.json && !isFinite(message.balance) ? String(message.balance) : message.balance;\n            if (message.userBetReq != null && message.hasOwnProperty(\"userBetReq\"))\n                object.userBetReq = $root.msg.UserBetReq.toObject(message.userBetReq, options);\n            return object;\n        };\n\n        /**\n         * Converts this UserBetResp to JSON.\n         * @function toJSON\n         * @memberof msg.UserBetResp\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        UserBetResp.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return UserBetResp;\n    })();\n\n    msg.GameStart = (function() {\n\n        /**\n         * Properties of a GameStart.\n         * @memberof msg\n         * @interface IGameStart\n         * @property {number|null} [roundId] GameStart roundId\n         * @property {number|null} [readyTimer] GameStart readyTimer\n         */\n\n        /**\n         * Constructs a new GameStart.\n         * @memberof msg\n         * @classdesc Represents a GameStart.\n         * @implements IGameStart\n         * @constructor\n         * @param {msg.IGameStart=} [properties] Properties to set\n         */\n        function GameStart(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GameStart roundId.\n         * @member {number} roundId\n         * @memberof msg.GameStart\n         * @instance\n         */\n        GameStart.prototype.roundId = 0;\n\n        /**\n         * GameStart readyTimer.\n         * @member {number} readyTimer\n         * @memberof msg.GameStart\n         * @instance\n         */\n        GameStart.prototype.readyTimer = 0;\n\n        /**\n         * Creates a new GameStart instance using the specified properties.\n         * @function create\n         * @memberof msg.GameStart\n         * @static\n         * @param {msg.IGameStart=} [properties] Properties to set\n         * @returns {msg.GameStart} GameStart instance\n         */\n        GameStart.create = function create(properties) {\n            return new GameStart(properties);\n        };\n\n        /**\n         * Encodes the specified GameStart message. Does not implicitly {@link msg.GameStart.verify|verify} messages.\n         * @function encode\n         * @memberof msg.GameStart\n         * @static\n         * @param {msg.IGameStart} message GameStart message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GameStart.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.roundId != null && Object.hasOwnProperty.call(message, \"roundId\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.roundId);\n            if (message.readyTimer != null && Object.hasOwnProperty.call(message, \"readyTimer\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.readyTimer);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GameStart message, length delimited. Does not implicitly {@link msg.GameStart.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof msg.GameStart\n         * @static\n         * @param {msg.IGameStart} message GameStart message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GameStart.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GameStart message from the specified reader or buffer.\n         * @function decode\n         * @memberof msg.GameStart\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {msg.GameStart} GameStart\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GameStart.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GameStart();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.roundId = reader.int32();\n                    break;\n                case 2:\n                    message.readyTimer = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GameStart message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof msg.GameStart\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {msg.GameStart} GameStart\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GameStart.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GameStart message.\n         * @function verify\n         * @memberof msg.GameStart\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GameStart.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.roundId != null && message.hasOwnProperty(\"roundId\"))\n                if (!$util.isInteger(message.roundId))\n                    return \"roundId: integer expected\";\n            if (message.readyTimer != null && message.hasOwnProperty(\"readyTimer\"))\n                if (!$util.isInteger(message.readyTimer))\n                    return \"readyTimer: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a GameStart message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof msg.GameStart\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {msg.GameStart} GameStart\n         */\n        GameStart.fromObject = function fromObject(object) {\n            if (object instanceof $root.msg.GameStart)\n                return object;\n            var message = new $root.msg.GameStart();\n            if (object.roundId != null)\n                message.roundId = object.roundId | 0;\n            if (object.readyTimer != null)\n                message.readyTimer = object.readyTimer | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GameStart message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof msg.GameStart\n         * @static\n         * @param {msg.GameStart} message GameStart\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GameStart.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.roundId = 0;\n                object.readyTimer = 0;\n            }\n            if (message.roundId != null && message.hasOwnProperty(\"roundId\"))\n                object.roundId = message.roundId;\n            if (message.readyTimer != null && message.hasOwnProperty(\"readyTimer\"))\n                object.readyTimer = message.readyTimer;\n            return object;\n        };\n\n        /**\n         * Converts this GameStart to JSON.\n         * @function toJSON\n         * @memberof msg.GameStart\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GameStart.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GameStart;\n    })();\n\n    msg.GameStartBet = (function() {\n\n        /**\n         * Properties of a GameStartBet.\n         * @memberof msg\n         * @interface IGameStartBet\n         * @property {number|null} [roundId] GameStartBet roundId\n         * @property {number|null} [readyTimer] GameStartBet readyTimer\n         */\n\n        /**\n         * Constructs a new GameStartBet.\n         * @memberof msg\n         * @classdesc Represents a GameStartBet.\n         * @implements IGameStartBet\n         * @constructor\n         * @param {msg.IGameStartBet=} [properties] Properties to set\n         */\n        function GameStartBet(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GameStartBet roundId.\n         * @member {number} roundId\n         * @memberof msg.GameStartBet\n         * @instance\n         */\n        GameStartBet.prototype.roundId = 0;\n\n        /**\n         * GameStartBet readyTimer.\n         * @member {number} readyTimer\n         * @memberof msg.GameStartBet\n         * @instance\n         */\n        GameStartBet.prototype.readyTimer = 0;\n\n        /**\n         * Creates a new GameStartBet instance using the specified properties.\n         * @function create\n         * @memberof msg.GameStartBet\n         * @static\n         * @param {msg.IGameStartBet=} [properties] Properties to set\n         * @returns {msg.GameStartBet} GameStartBet instance\n         */\n        GameStartBet.create = function create(properties) {\n            return new GameStartBet(properties);\n        };\n\n        /**\n         * Encodes the specified GameStartBet message. Does not implicitly {@link msg.GameStartBet.verify|verify} messages.\n         * @function encode\n         * @memberof msg.GameStartBet\n         * @static\n         * @param {msg.IGameStartBet} message GameStartBet message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GameStartBet.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.roundId != null && Object.hasOwnProperty.call(message, \"roundId\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.roundId);\n            if (message.readyTimer != null && Object.hasOwnProperty.call(message, \"readyTimer\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.readyTimer);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GameStartBet message, length delimited. Does not implicitly {@link msg.GameStartBet.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof msg.GameStartBet\n         * @static\n         * @param {msg.IGameStartBet} message GameStartBet message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GameStartBet.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GameStartBet message from the specified reader or buffer.\n         * @function decode\n         * @memberof msg.GameStartBet\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {msg.GameStartBet} GameStartBet\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GameStartBet.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GameStartBet();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.roundId = reader.int32();\n                    break;\n                case 2:\n                    message.readyTimer = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GameStartBet message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof msg.GameStartBet\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {msg.GameStartBet} GameStartBet\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GameStartBet.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GameStartBet message.\n         * @function verify\n         * @memberof msg.GameStartBet\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GameStartBet.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.roundId != null && message.hasOwnProperty(\"roundId\"))\n                if (!$util.isInteger(message.roundId))\n                    return \"roundId: integer expected\";\n            if (message.readyTimer != null && message.hasOwnProperty(\"readyTimer\"))\n                if (!$util.isInteger(message.readyTimer))\n                    return \"readyTimer: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a GameStartBet message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof msg.GameStartBet\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {msg.GameStartBet} GameStartBet\n         */\n        GameStartBet.fromObject = function fromObject(object) {\n            if (object instanceof $root.msg.GameStartBet)\n                return object;\n            var message = new $root.msg.GameStartBet();\n            if (object.roundId != null)\n                message.roundId = object.roundId | 0;\n            if (object.readyTimer != null)\n                message.readyTimer = object.readyTimer | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GameStartBet message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof msg.GameStartBet\n         * @static\n         * @param {msg.GameStartBet} message GameStartBet\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GameStartBet.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.roundId = 0;\n                object.readyTimer = 0;\n            }\n            if (message.roundId != null && message.hasOwnProperty(\"roundId\"))\n                object.roundId = message.roundId;\n            if (message.readyTimer != null && message.hasOwnProperty(\"readyTimer\"))\n                object.readyTimer = message.readyTimer;\n            return object;\n        };\n\n        /**\n         * Converts this GameStartBet to JSON.\n         * @function toJSON\n         * @memberof msg.GameStartBet\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GameStartBet.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GameStartBet;\n    })();\n\n    msg.GameAward = (function() {\n\n        /**\n         * Properties of a GameAward.\n         * @memberof msg\n         * @interface IGameAward\n         * @property {number|null} [roundId] GameAward roundId\n         * @property {number|null} [readyTimer] GameAward readyTimer\n         * @property {Array.<msg.IAwardDetail>|null} [award] GameAward award\n         * @property {number|null} [offsetBanker] GameAward offsetBanker\n         * @property {number|null} [offsetMe] GameAward offsetMe\n         * @property {number|null} [balance] GameAward balance\n         */\n\n        /**\n         * Constructs a new GameAward.\n         * @memberof msg\n         * @classdesc Represents a GameAward.\n         * @implements IGameAward\n         * @constructor\n         * @param {msg.IGameAward=} [properties] Properties to set\n         */\n        function GameAward(properties) {\n            this.award = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GameAward roundId.\n         * @member {number} roundId\n         * @memberof msg.GameAward\n         * @instance\n         */\n        GameAward.prototype.roundId = 0;\n\n        /**\n         * GameAward readyTimer.\n         * @member {number} readyTimer\n         * @memberof msg.GameAward\n         * @instance\n         */\n        GameAward.prototype.readyTimer = 0;\n\n        /**\n         * GameAward award.\n         * @member {Array.<msg.IAwardDetail>} award\n         * @memberof msg.GameAward\n         * @instance\n         */\n        GameAward.prototype.award = $util.emptyArray;\n\n        /**\n         * GameAward offsetBanker.\n         * @member {number} offsetBanker\n         * @memberof msg.GameAward\n         * @instance\n         */\n        GameAward.prototype.offsetBanker = 0;\n\n        /**\n         * GameAward offsetMe.\n         * @member {number} offsetMe\n         * @memberof msg.GameAward\n         * @instance\n         */\n        GameAward.prototype.offsetMe = 0;\n\n        /**\n         * GameAward balance.\n         * @member {number} balance\n         * @memberof msg.GameAward\n         * @instance\n         */\n        GameAward.prototype.balance = 0;\n\n        /**\n         * Creates a new GameAward instance using the specified properties.\n         * @function create\n         * @memberof msg.GameAward\n         * @static\n         * @param {msg.IGameAward=} [properties] Properties to set\n         * @returns {msg.GameAward} GameAward instance\n         */\n        GameAward.create = function create(properties) {\n            return new GameAward(properties);\n        };\n\n        /**\n         * Encodes the specified GameAward message. Does not implicitly {@link msg.GameAward.verify|verify} messages.\n         * @function encode\n         * @memberof msg.GameAward\n         * @static\n         * @param {msg.IGameAward} message GameAward message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GameAward.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.roundId != null && Object.hasOwnProperty.call(message, \"roundId\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.roundId);\n            if (message.readyTimer != null && Object.hasOwnProperty.call(message, \"readyTimer\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.readyTimer);\n            if (message.award != null && message.award.length)\n                for (var i = 0; i < message.award.length; ++i)\n                    $root.msg.AwardDetail.encode(message.award[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.offsetBanker != null && Object.hasOwnProperty.call(message, \"offsetBanker\"))\n                writer.uint32(/* id 4, wireType 1 =*/33).double(message.offsetBanker);\n            if (message.offsetMe != null && Object.hasOwnProperty.call(message, \"offsetMe\"))\n                writer.uint32(/* id 5, wireType 1 =*/41).double(message.offsetMe);\n            if (message.balance != null && Object.hasOwnProperty.call(message, \"balance\"))\n                writer.uint32(/* id 6, wireType 1 =*/49).double(message.balance);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GameAward message, length delimited. Does not implicitly {@link msg.GameAward.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof msg.GameAward\n         * @static\n         * @param {msg.IGameAward} message GameAward message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GameAward.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GameAward message from the specified reader or buffer.\n         * @function decode\n         * @memberof msg.GameAward\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {msg.GameAward} GameAward\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GameAward.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.GameAward();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.roundId = reader.int32();\n                    break;\n                case 2:\n                    message.readyTimer = reader.int32();\n                    break;\n                case 3:\n                    if (!(message.award && message.award.length))\n                        message.award = [];\n                    message.award.push($root.msg.AwardDetail.decode(reader, reader.uint32()));\n                    break;\n                case 4:\n                    message.offsetBanker = reader.double();\n                    break;\n                case 5:\n                    message.offsetMe = reader.double();\n                    break;\n                case 6:\n                    message.balance = reader.double();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GameAward message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof msg.GameAward\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {msg.GameAward} GameAward\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GameAward.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GameAward message.\n         * @function verify\n         * @memberof msg.GameAward\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GameAward.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.roundId != null && message.hasOwnProperty(\"roundId\"))\n                if (!$util.isInteger(message.roundId))\n                    return \"roundId: integer expected\";\n            if (message.readyTimer != null && message.hasOwnProperty(\"readyTimer\"))\n                if (!$util.isInteger(message.readyTimer))\n                    return \"readyTimer: integer expected\";\n            if (message.award != null && message.hasOwnProperty(\"award\")) {\n                if (!Array.isArray(message.award))\n                    return \"award: array expected\";\n                for (var i = 0; i < message.award.length; ++i) {\n                    var error = $root.msg.AwardDetail.verify(message.award[i]);\n                    if (error)\n                        return \"award.\" + error;\n                }\n            }\n            if (message.offsetBanker != null && message.hasOwnProperty(\"offsetBanker\"))\n                if (typeof message.offsetBanker !== \"number\")\n                    return \"offsetBanker: number expected\";\n            if (message.offsetMe != null && message.hasOwnProperty(\"offsetMe\"))\n                if (typeof message.offsetMe !== \"number\")\n                    return \"offsetMe: number expected\";\n            if (message.balance != null && message.hasOwnProperty(\"balance\"))\n                if (typeof message.balance !== \"number\")\n                    return \"balance: number expected\";\n            return null;\n        };\n\n        /**\n         * Creates a GameAward message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof msg.GameAward\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {msg.GameAward} GameAward\n         */\n        GameAward.fromObject = function fromObject(object) {\n            if (object instanceof $root.msg.GameAward)\n                return object;\n            var message = new $root.msg.GameAward();\n            if (object.roundId != null)\n                message.roundId = object.roundId | 0;\n            if (object.readyTimer != null)\n                message.readyTimer = object.readyTimer | 0;\n            if (object.award) {\n                if (!Array.isArray(object.award))\n                    throw TypeError(\".msg.GameAward.award: array expected\");\n                message.award = [];\n                for (var i = 0; i < object.award.length; ++i) {\n                    if (typeof object.award[i] !== \"object\")\n                        throw TypeError(\".msg.GameAward.award: object expected\");\n                    message.award[i] = $root.msg.AwardDetail.fromObject(object.award[i]);\n                }\n            }\n            if (object.offsetBanker != null)\n                message.offsetBanker = Number(object.offsetBanker);\n            if (object.offsetMe != null)\n                message.offsetMe = Number(object.offsetMe);\n            if (object.balance != null)\n                message.balance = Number(object.balance);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GameAward message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof msg.GameAward\n         * @static\n         * @param {msg.GameAward} message GameAward\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GameAward.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.award = [];\n            if (options.defaults) {\n                object.roundId = 0;\n                object.readyTimer = 0;\n                object.offsetBanker = 0;\n                object.offsetMe = 0;\n                object.balance = 0;\n            }\n            if (message.roundId != null && message.hasOwnProperty(\"roundId\"))\n                object.roundId = message.roundId;\n            if (message.readyTimer != null && message.hasOwnProperty(\"readyTimer\"))\n                object.readyTimer = message.readyTimer;\n            if (message.award && message.award.length) {\n                object.award = [];\n                for (var j = 0; j < message.award.length; ++j)\n                    object.award[j] = $root.msg.AwardDetail.toObject(message.award[j], options);\n            }\n            if (message.offsetBanker != null && message.hasOwnProperty(\"offsetBanker\"))\n                object.offsetBanker = options.json && !isFinite(message.offsetBanker) ? String(message.offsetBanker) : message.offsetBanker;\n            if (message.offsetMe != null && message.hasOwnProperty(\"offsetMe\"))\n                object.offsetMe = options.json && !isFinite(message.offsetMe) ? String(message.offsetMe) : message.offsetMe;\n            if (message.balance != null && message.hasOwnProperty(\"balance\"))\n                object.balance = options.json && !isFinite(message.balance) ? String(message.balance) : message.balance;\n            return object;\n        };\n\n        /**\n         * Converts this GameAward to JSON.\n         * @function toJSON\n         * @memberof msg.GameAward\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GameAward.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GameAward;\n    })();\n\n    msg.UserInfo = (function() {\n\n        /**\n         * Properties of a UserInfo.\n         * @memberof msg\n         * @interface IUserInfo\n         * @property {number|null} [userId] UserInfo userId\n         * @property {number|null} [balance] UserInfo balance\n         */\n\n        /**\n         * Constructs a new UserInfo.\n         * @memberof msg\n         * @classdesc Represents a UserInfo.\n         * @implements IUserInfo\n         * @constructor\n         * @param {msg.IUserInfo=} [properties] Properties to set\n         */\n        function UserInfo(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * UserInfo userId.\n         * @member {number} userId\n         * @memberof msg.UserInfo\n         * @instance\n         */\n        UserInfo.prototype.userId = 0;\n\n        /**\n         * UserInfo balance.\n         * @member {number} balance\n         * @memberof msg.UserInfo\n         * @instance\n         */\n        UserInfo.prototype.balance = 0;\n\n        /**\n         * Creates a new UserInfo instance using the specified properties.\n         * @function create\n         * @memberof msg.UserInfo\n         * @static\n         * @param {msg.IUserInfo=} [properties] Properties to set\n         * @returns {msg.UserInfo} UserInfo instance\n         */\n        UserInfo.create = function create(properties) {\n            return new UserInfo(properties);\n        };\n\n        /**\n         * Encodes the specified UserInfo message. Does not implicitly {@link msg.UserInfo.verify|verify} messages.\n         * @function encode\n         * @memberof msg.UserInfo\n         * @static\n         * @param {msg.IUserInfo} message UserInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        UserInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.userId);\n            if (message.balance != null && Object.hasOwnProperty.call(message, \"balance\"))\n                writer.uint32(/* id 2, wireType 1 =*/17).double(message.balance);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified UserInfo message, length delimited. Does not implicitly {@link msg.UserInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof msg.UserInfo\n         * @static\n         * @param {msg.IUserInfo} message UserInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        UserInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a UserInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof msg.UserInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {msg.UserInfo} UserInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        UserInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.UserInfo();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.userId = reader.int32();\n                    break;\n                case 2:\n                    message.balance = reader.double();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a UserInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof msg.UserInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {msg.UserInfo} UserInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        UserInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a UserInfo message.\n         * @function verify\n         * @memberof msg.UserInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        UserInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isInteger(message.userId))\n                    return \"userId: integer expected\";\n            if (message.balance != null && message.hasOwnProperty(\"balance\"))\n                if (typeof message.balance !== \"number\")\n                    return \"balance: number expected\";\n            return null;\n        };\n\n        /**\n         * Creates a UserInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof msg.UserInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {msg.UserInfo} UserInfo\n         */\n        UserInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.msg.UserInfo)\n                return object;\n            var message = new $root.msg.UserInfo();\n            if (object.userId != null)\n                message.userId = object.userId | 0;\n            if (object.balance != null)\n                message.balance = Number(object.balance);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a UserInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof msg.UserInfo\n         * @static\n         * @param {msg.UserInfo} message UserInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        UserInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.userId = 0;\n                object.balance = 0;\n            }\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.balance != null && message.hasOwnProperty(\"balance\"))\n                object.balance = options.json && !isFinite(message.balance) ? String(message.balance) : message.balance;\n            return object;\n        };\n\n        /**\n         * Converts this UserInfo to JSON.\n         * @function toJSON\n         * @memberof msg.UserInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        UserInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return UserInfo;\n    })();\n\n    msg.AwardDetail = (function() {\n\n        /**\n         * Properties of an AwardDetail.\n         * @memberof msg\n         * @interface IAwardDetail\n         * @property {msg.EnumArea|null} [awardArea] AwardDetail awardArea\n         * @property {number|null} [cards] AwardDetail cards\n         * @property {msg.EnumCardType|null} [cardType] AwardDetail cardType\n         * @property {number|null} [awardAreaOdds] AwardDetail awardAreaOdds\n         * @property {boolean|null} [isWin] AwardDetail isWin\n         */\n\n        /**\n         * Constructs a new AwardDetail.\n         * @memberof msg\n         * @classdesc Represents an AwardDetail.\n         * @implements IAwardDetail\n         * @constructor\n         * @param {msg.IAwardDetail=} [properties] Properties to set\n         */\n        function AwardDetail(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AwardDetail awardArea.\n         * @member {msg.EnumArea} awardArea\n         * @memberof msg.AwardDetail\n         * @instance\n         */\n        AwardDetail.prototype.awardArea = 0;\n\n        /**\n         * AwardDetail cards.\n         * @member {number} cards\n         * @memberof msg.AwardDetail\n         * @instance\n         */\n        AwardDetail.prototype.cards = 0;\n\n        /**\n         * AwardDetail cardType.\n         * @member {msg.EnumCardType} cardType\n         * @memberof msg.AwardDetail\n         * @instance\n         */\n        AwardDetail.prototype.cardType = 0;\n\n        /**\n         * AwardDetail awardAreaOdds.\n         * @member {number} awardAreaOdds\n         * @memberof msg.AwardDetail\n         * @instance\n         */\n        AwardDetail.prototype.awardAreaOdds = 0;\n\n        /**\n         * AwardDetail isWin.\n         * @member {boolean} isWin\n         * @memberof msg.AwardDetail\n         * @instance\n         */\n        AwardDetail.prototype.isWin = false;\n\n        /**\n         * Creates a new AwardDetail instance using the specified properties.\n         * @function create\n         * @memberof msg.AwardDetail\n         * @static\n         * @param {msg.IAwardDetail=} [properties] Properties to set\n         * @returns {msg.AwardDetail} AwardDetail instance\n         */\n        AwardDetail.create = function create(properties) {\n            return new AwardDetail(properties);\n        };\n\n        /**\n         * Encodes the specified AwardDetail message. Does not implicitly {@link msg.AwardDetail.verify|verify} messages.\n         * @function encode\n         * @memberof msg.AwardDetail\n         * @static\n         * @param {msg.IAwardDetail} message AwardDetail message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AwardDetail.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.awardArea != null && Object.hasOwnProperty.call(message, \"awardArea\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.awardArea);\n            if (message.cards != null && Object.hasOwnProperty.call(message, \"cards\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.cards);\n            if (message.cardType != null && Object.hasOwnProperty.call(message, \"cardType\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.cardType);\n            if (message.awardAreaOdds != null && Object.hasOwnProperty.call(message, \"awardAreaOdds\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.awardAreaOdds);\n            if (message.isWin != null && Object.hasOwnProperty.call(message, \"isWin\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.isWin);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AwardDetail message, length delimited. Does not implicitly {@link msg.AwardDetail.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof msg.AwardDetail\n         * @static\n         * @param {msg.IAwardDetail} message AwardDetail message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AwardDetail.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AwardDetail message from the specified reader or buffer.\n         * @function decode\n         * @memberof msg.AwardDetail\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {msg.AwardDetail} AwardDetail\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AwardDetail.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.msg.AwardDetail();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.awardArea = reader.int32();\n                    break;\n                case 2:\n                    message.cards = reader.int32();\n                    break;\n                case 3:\n                    message.cardType = reader.int32();\n                    break;\n                case 4:\n                    message.awardAreaOdds = reader.int32();\n                    break;\n                case 5:\n                    message.isWin = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AwardDetail message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof msg.AwardDetail\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {msg.AwardDetail} AwardDetail\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AwardDetail.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AwardDetail message.\n         * @function verify\n         * @memberof msg.AwardDetail\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AwardDetail.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.awardArea != null && message.hasOwnProperty(\"awardArea\"))\n                switch (message.awardArea) {\n                default:\n                    return \"awardArea: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                    break;\n                }\n            if (message.cards != null && message.hasOwnProperty(\"cards\"))\n                if (!$util.isInteger(message.cards))\n                    return \"cards: integer expected\";\n            if (message.cardType != null && message.hasOwnProperty(\"cardType\"))\n                switch (message.cardType) {\n                default:\n                    return \"cardType: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                    break;\n                }\n            if (message.awardAreaOdds != null && message.hasOwnProperty(\"awardAreaOdds\"))\n                if (!$util.isInteger(message.awardAreaOdds))\n                    return \"awardAreaOdds: integer expected\";\n            if (message.isWin != null && message.hasOwnProperty(\"isWin\"))\n                if (typeof message.isWin !== \"boolean\")\n                    return \"isWin: boolean expected\";\n            return null;\n        };\n\n        /**\n         * Creates an AwardDetail message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof msg.AwardDetail\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {msg.AwardDetail} AwardDetail\n         */\n        AwardDetail.fromObject = function fromObject(object) {\n            if (object instanceof $root.msg.AwardDetail)\n                return object;\n            var message = new $root.msg.AwardDetail();\n            switch (object.awardArea) {\n            case \"Banker\":\n            case 0:\n                message.awardArea = 0;\n                break;\n            case \"BetArea1\":\n            case 1:\n                message.awardArea = 1;\n                break;\n            case \"BetArea2\":\n            case 2:\n                message.awardArea = 2;\n                break;\n            }\n            if (object.cards != null)\n                message.cards = object.cards | 0;\n            switch (object.cardType) {\n            case \"Unknown\":\n            case 0:\n                message.cardType = 0;\n                break;\n            case \"Bigger\":\n            case 1:\n                message.cardType = 1;\n                break;\n            case \"Smaller\":\n            case 2:\n                message.cardType = 2;\n                break;\n            case \"Tie\":\n            case 3:\n                message.cardType = 3;\n                break;\n            }\n            if (object.awardAreaOdds != null)\n                message.awardAreaOdds = object.awardAreaOdds | 0;\n            if (object.isWin != null)\n                message.isWin = Boolean(object.isWin);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AwardDetail message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof msg.AwardDetail\n         * @static\n         * @param {msg.AwardDetail} message AwardDetail\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AwardDetail.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.awardArea = options.enums === String ? \"Banker\" : 0;\n                object.cards = 0;\n                object.cardType = options.enums === String ? \"Unknown\" : 0;\n                object.awardAreaOdds = 0;\n                object.isWin = false;\n            }\n            if (message.awardArea != null && message.hasOwnProperty(\"awardArea\"))\n                object.awardArea = options.enums === String ? $root.msg.EnumArea[message.awardArea] : message.awardArea;\n            if (message.cards != null && message.hasOwnProperty(\"cards\"))\n                object.cards = message.cards;\n            if (message.cardType != null && message.hasOwnProperty(\"cardType\"))\n                object.cardType = options.enums === String ? $root.msg.EnumCardType[message.cardType] : message.cardType;\n            if (message.awardAreaOdds != null && message.hasOwnProperty(\"awardAreaOdds\"))\n                object.awardAreaOdds = message.awardAreaOdds;\n            if (message.isWin != null && message.hasOwnProperty(\"isWin\"))\n                object.isWin = message.isWin;\n            return object;\n        };\n\n        /**\n         * Converts this AwardDetail to JSON.\n         * @function toJSON\n         * @memberof msg.AwardDetail\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AwardDetail.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return AwardDetail;\n    })();\n\n    /**\n     * EnumArea enum.\n     * @name msg.EnumArea\n     * @enum {number}\n     * @property {number} Banker=0 Banker value\n     * @property {number} BetArea1=1 BetArea1 value\n     * @property {number} BetArea2=2 BetArea2 value\n     */\n    msg.EnumArea = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"Banker\"] = 0;\n        values[valuesById[1] = \"BetArea1\"] = 1;\n        values[valuesById[2] = \"BetArea2\"] = 2;\n        return values;\n    })();\n\n    /**\n     * EnumCardType enum.\n     * @name msg.EnumCardType\n     * @enum {number}\n     * @property {number} Unknown=0 Unknown value\n     * @property {number} Bigger=1 Bigger value\n     * @property {number} Smaller=2 Smaller value\n     * @property {number} Tie=3 Tie value\n     */\n    msg.EnumCardType = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"Unknown\"] = 0;\n        values[valuesById[1] = \"Bigger\"] = 1;\n        values[valuesById[2] = \"Smaller\"] = 2;\n        values[valuesById[3] = \"Tie\"] = 3;\n        return values;\n    })();\n\n    /**\n     * EnumGameStatus enum.\n     * @name msg.EnumGameStatus\n     * @enum {number}\n     * @property {number} EnumGameUnknown=0 EnumGameUnknown value\n     * @property {number} EnumGameStart=1 EnumGameStart value\n     * @property {number} EnumGameBet=2 EnumGameBet value\n     * @property {number} EnumGameAward=3 EnumGameAward value\n     */\n    msg.EnumGameStatus = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"EnumGameUnknown\"] = 0;\n        values[valuesById[1] = \"EnumGameStart\"] = 1;\n        values[valuesById[2] = \"EnumGameBet\"] = 2;\n        values[valuesById[3] = \"EnumGameAward\"] = 3;\n        return values;\n    })();\n\n    /**\n     * ResultCode enum.\n     * @name msg.ResultCode\n     * @enum {number}\n     * @property {number} Success=0 Success value\n     * @property {number} DataIllegal=1 DataIllegal value\n     * @property {number} BalanceNotEnough=2 BalanceNotEnough value\n     * @property {number} DatabaseReadWriteFailed=3 DatabaseReadWriteFailed value\n     * @property {number} BetTimeEnd=4 BetTimeEnd value\n     * @property {number} MoreThanLimit=5 MoreThanLimit value\n     * @property {number} ChipDoesNotExits=6 ChipDoesNotExits value\n     */\n    msg.ResultCode = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"Success\"] = 0;\n        values[valuesById[1] = \"DataIllegal\"] = 1;\n        values[valuesById[2] = \"BalanceNotEnough\"] = 2;\n        values[valuesById[3] = \"DatabaseReadWriteFailed\"] = 3;\n        values[valuesById[4] = \"BetTimeEnd\"] = 4;\n        values[valuesById[5] = \"MoreThanLimit\"] = 5;\n        values[valuesById[6] = \"ChipDoesNotExits\"] = 6;\n        return values;\n    })();\n\n    return msg;\n})();\n\nmodule.exports = $root;\n","/*!\n * protobuf.js v6.8.9 (c) 2016, daniel wirtz\n * compiled fri, 17 apr 2020 21:58:51 utc\n * licensed under the bsd-3-clause license\n * see: https://github.com/dcodeio/protobuf.js for details\n */\n(function(undefined){\"use strict\";(function prelude(modules, cache, entries) {\n\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\n    // sources through a conflict-free require shim and is again wrapped within an iife that\n    // provides a minification-friendly `undefined` var plus a global \"use strict\" directive\n    // so that minification can remove the directives of each module.\n\n    function $require(name) {\n        var $module = cache[name];\n        if (!$module)\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\n        return $module.exports;\n    }\n\n    var protobuf = $require(entries[0]);\n\n    // Expose globally\n    protobuf.util.global.protobuf = protobuf;\n\n    // Be nice to AMD\n    if (typeof define === \"function\" && define.amd)\n        define([\"long\"], function(Long) {\n            if (Long && Long.isLong) {\n                protobuf.util.Long = Long;\n                protobuf.configure();\n            }\n            return protobuf;\n        });\n\n    // Be nice to CommonJS\n    if (typeof module === \"object\" && module && module.exports)\n        module.exports = protobuf;\n\n})/* end of prelude */({1:[function(require,module,exports){\n\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n\n},{}],2:[function(require,module,exports){\n\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n\n},{}],4:[function(require,module,exports){\n\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n\n},{}],5:[function(require,module,exports){\n\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n\n},{}],6:[function(require,module,exports){\n\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n\n},{}],7:[function(require,module,exports){\n\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n\n},{}],8:[function(require,module,exports){\n\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(16);\nprotobuf.BufferWriter = require(17);\nprotobuf.Reader       = require(9);\nprotobuf.BufferReader = require(10);\n\n// Utility\nprotobuf.util         = require(15);\nprotobuf.rpc          = require(12);\nprotobuf.roots        = require(11);\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n\n},{\"10\":10,\"11\":11,\"12\":12,\"15\":15,\"16\":16,\"17\":17,\"9\":9}],9:[function(require,module,exports){\n\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(15);\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n\n},{\"15\":15}],10:[function(require,module,exports){\n\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(9);\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(15);\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n\n},{\"15\":15,\"9\":9}],11:[function(require,module,exports){\n\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n\n},{}],12:[function(require,module,exports){\n\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(13);\n\n},{\"13\":13}],13:[function(require,module,exports){\n\"use strict\";\nmodule.exports = Service;\n\nvar util = require(15);\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n\n},{\"15\":15}],14:[function(require,module,exports){\n\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(15);\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n\n},{\"15\":15}],15:[function(require,module,exports){\n\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(1);\n\n// converts to / from base64 encoded strings\nutil.base64 = require(2);\n\n// base class of rpc.Service\nutil.EventEmitter = require(3);\n\n// float handling accross browsers\nutil.float = require(4);\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(5);\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(7);\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(6);\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(14);\n\n// global object reference\nutil.global = typeof window !== \"undefined\" && window\n           || typeof global !== \"undefined\" && global\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n * @const\n */\nutil.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n\n},{\"1\":1,\"14\":14,\"2\":2,\"3\":3,\"4\":4,\"5\":5,\"6\":6,\"7\":7}],16:[function(require,module,exports){\n\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(15);\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n\n},{\"15\":15}],17:[function(require,module,exports){\n\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(16);\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(15);\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n\n},{\"15\":15,\"16\":16}]},{},[8])\n\n})();\n//# sourceMappingURL=protobuf.js.map\n","import { configuration } from \"./brnnConfiguration\";\nimport { audiotool } from \"./brnnAudioTool\";\nimport { brnnlanguage } from '../../language/brnnlanguage';\nimport {msg} from '../brnnproto/brnn_proto_msg';\n\nclass brnncreatePoke {\n\n    protected static instance: brnncreatePoke;\n    public static getInstance(): brnncreatePoke {\n        if (!this.instance) {\n            this.instance = new brnncreatePoke();\n        }\n        return this.instance;\n    }\n    /**\n     * 设置牌值\n     */\n    public createPoker(cardpoke, data:msg.GameAward, pokerAtlas) {\n        //初始化 \n        if (cardpoke == null || cardpoke.length == null) {\n            cc.log('牌已被销毁，或未找到节点');\n            return;\n        }\n        for (let i = 0; i < cardpoke.length; i=i+5) {\n            // cardpoke[i].active = true;\n            let card_bg = cardpoke[i].getChildByName('card_back');\n            let back = cardpoke[i].getChildByName('back');\n            let pokenum = cardpoke[i].getChildByName('num');\n            let color_0 = cardpoke[i].getChildByName('color_0');\n            let color_1 = cardpoke[i].getChildByName('color_1');\n\n            card_bg.stopAllActions();\n            back.stopAllActions();\n            card_bg.scaleX = 1;\n            back.scaleX = 1;\n            let pokevalue = data.award[ Math.floor(i / 5)].cards;\n            \n            var value = pokevalue % 13;\n            if (value == 0) {\n                value = 13\n            }\n            var huase = Math.floor((pokevalue) / 13 + 1);\n            if (huase == 0) {  //方片特殊情况\n                huase = 1;\n            }\n            var num, smallHua, large_Hua;\n            //花色 4,3,2,1\n            if (huase == 2 || huase == 4) {\n                num = \"black_\" + value;\n                smallHua = \"small_\" + huase;\n                if (value > 10) {        //黑色 j,q,k\n                    if (huase == 4) {\n                        large_Hua = \"hua_hei\" + value;\n                    } else if (huase == 2) {\n                        large_Hua = \"hua_m\" + value;\n                    }\n                } else {\n                    large_Hua = \"large_\" + huase;\n                }\n            } else if (huase == 1 || huase == 3) {\n                num = \"red_\" + value;\n                smallHua = \"small_\" + huase;\n                if (value > 10) {        //红色 j,q,k\n                    if (huase == 3) {\n                        large_Hua = \"hua_h\" + value;\n                    } else if (huase == 1) {\n                        large_Hua = \"hua_f\" + value;\n                    }\n                } else {\n                    large_Hua = \"large_\" + huase;\n                }\n            }\n            pokenum.getComponent(cc.Sprite).spriteFrame = pokerAtlas.getSpriteFrame(num),\n                color_0.getComponent(cc.Sprite).spriteFrame = pokerAtlas.getSpriteFrame(smallHua),\n                color_1.getComponent(cc.Sprite).spriteFrame = pokerAtlas.getSpriteFrame(large_Hua)\n        }\n    }\n\n    /**\n     * 设置牌类型 (中途进入直接赋值牌的类型)\n     */\n    public createCardType(carrd_node: any, data: any) {\n        if (carrd_node == null || carrd_node.length == null) {\n            cc.log('牌已被销毁，或未找到节点');\n            return;\n        }\n        for (let i = 0; i < carrd_node.length; i++) {\n            var cover = carrd_node[i].getChildByName('pai_cover');\n            var niu = cover.getChildByName('crad_type').getChildByName('card_niu');\n            cover.active = true;\n            // niu.active = true;\n            configuration.loadSpriteFrame(niu, \"brnn/language/\" + brnnlanguage.getCurLanguage() + \"/cardType/niu_\" + data.type[i]);\n        }\n    }\n\n    /**\n    * 设置牌类型 (翻牌赋值牌的类型)\n    * @param carrd_node 每一个牌的大节点\n    * @param datatype data.type[i]\n    * @param votgold [0,0,0,0] //当前玩家是否在筹码池下注\n    * @param m //for循环牌的i 庄家的牌 不会出现几倍\n    */\n    public createCardType2(carrd_node: any, datatype: any, votgold: number[], m: number,awardAreaOdds:number) {\n        if (carrd_node == null) {\n            cc.log('牌已被销毁，或未找到节点');\n            return;\n        }\n        var cover = carrd_node.getChildByName('pai_cover');\n        var niu = cover.getChildByName('crad_type').getChildByName('card_niu');\n        var cheng = cover.getChildByName('crad_type').getChildByName('cheng');\n        var niu_bet = cover.getChildByName('crad_type').getChildByName('niu_bet');\n        carrd_node.getChildByName('poker_3').getChildByName('back').active = false;\n        cover.active = true;\n        // audiotool.play_audioSource(audiotool.LoadAudio(datatype));\n        // niu.active = true;\n        // configuration.loadSpriteFrame(niu, \"brnn/language/\" + brnnlanguage.getCurLanguage() + \"/cardType/niu_\" + datatype);\n        // niu.stopAllActions();\n        cheng.stopAllActions();\n        niu_bet.stopAllActions();\n        // niu.runAction(cc.sequence(cc.scaleTo(0.1, 3, 3), cc.scaleTo(0.08, 2, 2)));\n        if (m != 0 && votgold[ m ] != 0 && awardAreaOdds > 0) {\n            niu_bet.getComponent(cc.Label).string = awardAreaOdds + '';\n            var timer = setTimeout(() => {\n                clearTimeout(timer);\n                if( !cc.isValid( cheng ) ||\n                    !cc.isValid( niu_bet ) )\n                {\n                    return;\n                }\n                cheng.active = true;\n                niu_bet.active = true;\n                cheng.runAction(cc.sequence(cc.scaleTo(0.1, 3.5, 3.5), cc.scaleTo(0.08, 2.5, 2.5))),\n                    niu_bet.runAction(cc.sequence(cc.scaleTo(0.1, 1.5, 1.5), cc.scaleTo(0.08, 1, 1)))\n            }, 0.3 * 1000)\n        }\n    }\n    /**\n     * 当前玩家投注后显示对应牌堆的倍率\n     * @param datatype \n     * @param votgold [0,0,0,0] //当前玩家是否在筹码池下注\n     * @param datatype == 10  牛牛\n     * @param datatype == 11  四炸\n     * @param datatype== 12  五花牛\n     */\n    public cardTypeBet(datatype: any, niu_bet: cc.Node) {\n        if (datatype >= 0 && datatype <= 1) {\n            niu_bet.getComponent(cc.Label).string = 1 + '';\n        } else if (datatype >= 2 && datatype <= 9) {\n            niu_bet.getComponent(cc.Label).string = datatype + '';\n        } else if (datatype >= 10) {\n            niu_bet.getComponent(cc.Label).string = 10 + '';\n        }\n    }\n    /**\n     * 当前玩家每个筹码区域输赢的金币（未扣税）\n     * @param W_gold_lab 赢数组节点lab\n     * @param l_gold_lab 输数组节点lab\n     */\n    public myPlayerWLGold(W_gold_lab: cc.Node[], l_gold_lab: cc.Node[], data: any) {\n        cc.log(' 当前玩家每个筹码区域输赢的金币（未扣税）');\n        if (data == null || data.bet_result == null) return;\n        for (let i = 0; i < W_gold_lab.length; i++) {\n            if (data.bet_result[i] > 0) {\n                if( cc.isValid( W_gold_lab[i] ) )\n                {\n                    W_gold_lab[i].active = true;\n                    W_gold_lab[i].getComponent(cc.Label).string = data.bet_result[i] + '';\n                }\n            } else if (data.bet_result[i] < 0) {\n                if( cc.isValid( l_gold_lab[i] ) )\n                {\n                    l_gold_lab[i].active = true;\n                    l_gold_lab[i].getComponent(cc.Label).string = data.bet_result[i] + '';\n                }\n            }\n        }\n    }\n    /**\n     * 判斷籌碼值\n     * @param chiptype 籌碼類型（（type=value）0=1,1=10,2=50,3=100,4=1000）\n     */\n    public JudgeChipValue(chiptype: number) {\n        let value = 0;\n        switch (chiptype) {\n            case 0:\n                value = 1;\n                break;\n            case 1:\n                value = 10;\n                break;\n            case 2:\n                value = 50;\n                break;\n            case 3:\n                value = 100;\n                break;\n            case 4:\n                value = 1000;\n                break;\n            default:\n                break;\n        }\n        return value;\n    }\n    /**\n     *区别筹码区域投注\n     * @param mybetNum 当前玩家每个区域下注\n     */\n    public DiffentChipArea(mybetNum: number) {\n        if (mybetNum < 0) {\n            return;\n        }\n        let num = mybetNum;\n        let count: number[] = [0, 0, 0, 0, 0];\n        if (num >= 1000) {\n            count[4] = Math.floor(num / 1000);\n            num = num % 1000;\n        }\n        if (num >= 100) {\n            count[3] = Math.floor(num / 100);\n            num = num % 100;\n        }\n        if (num >= 50) {\n            count[2] = Math.floor(num / 50);\n            num = num % 50;\n        }\n        if (num >= 10) {\n            count[1] = Math.floor(num / 10);\n            num = num % 10;\n        }\n        if (num >= 1) {\n            count[0] = Math.floor(num / 1);\n            num = num % 1;\n        }\n        return count;\n    }\n\n}\nexport const createpoke = brnncreatePoke.getInstance();\n","class language{\r\n\r\n    protected static instance: language;\r\n    public static getInstance(): language {\r\n        if (!this.instance) {\r\n            this.instance = new language();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    private language = {\r\n                        \"Chinese\":{\r\n                                    0:\"富贵厅\",\r\n                                    1:\"至尊厅\",\r\n                                    2:\"近20局\",\r\n                                    3:\"局\",\r\n                                    4:\"连接超时， 请您返回游戏大厅后重新进入\",\r\n                                    5:\"网络断开，正在努力连接中\",\r\n                                    6:\"本局游戏结算还未结束，请在本局结算完成后再退出游戏。\",\r\n                                    7:\"此账号已从其他地方登录！\",\r\n                                    8:\"金币不足，请充值\",\r\n                                    9:\"续投失败\",\r\n                                    10:\"处于观战模式，需要\",\r\n                                    11:\"金币不足，无法继续下注！\",\r\n                                    12:\"金币不足，最低上庄需要\",\r\n                                    13:\"金币！\",\r\n                                    14:\"剩余金币不足请充值！\",\r\n                                    15:\"您输入的金额有误，请重新输入！\",\r\n                                    16:\"请关闭后再次提交！\",\r\n                                    17:\"操作成功！\",\r\n                                    18:\"请输入上庄金额...\",\r\n                                    19:\"限红\",\r\n                                    20:\"-\",\r\n                                    21:\"倍\",\r\n                                    22:\"金币\",\r\n                                    23:\"玩家不是庄家\",\r\n                                    24:\"已停止下注,房间不可下注\",\r\n                                    25:\"已经在上庄列表中\",\r\n                                    26:\"庄家金币不足,上庄金额已达上限\",\r\n                                    27:\"玩家已经达到此局最大下注金额\",\r\n                                    28:\"庄家不允许下注\",\r\n                                    29:\"庄家不允许进行上庄列表操作\",\r\n                                    30:\"玩家金币不足\",\r\n                                    31:\"金币即可参与游戏\",\r\n                                  }\r\n                        }\r\n\r\n    public getCurLanguage():string\r\n    {\r\n        return \"Chinese\";\r\n    }\r\n\r\n    public getTextByID( id:number ):string\r\n    {\r\n        return this.language[ this.getCurLanguage() ][ id.toString() ];\r\n    }\r\n}\r\n\r\nexport const brnnlanguage = language.getInstance();","\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class brnnscene extends cc.Component {\n\n\n\n    onLoad() {\n        \n    }\n\n    start() {\n\n    }\n    /** \n     * 每一局游戏结束重置游戏   \n     * @param \n     */\n    restGame() {\n\n    }\n    onDestroy() {\n\n    }\n}\n","\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class promptbox extends cc.Component {\n\n    onLoad() {\n\n    }\n    initPrompt() {\n        let action = cc.moveTo(1.5, cc.v2(0, 150));\n        let action2 = cc.moveTo(0.5, cc.v2(0, 150));\n        this.node.runAction(cc.sequence(action, action2, cc.callFunc(() => {\n            if( cc.isValid( this.node ) )\n            {\n                this.node.destroy();\n            }\n        })))\n    }\n\n    // update (dt) {}\n}\n"],"file":"project.js"}